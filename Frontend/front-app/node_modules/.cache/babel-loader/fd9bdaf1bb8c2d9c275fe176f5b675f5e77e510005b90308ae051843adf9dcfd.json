{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @module ol/loadingstrategy\r\n */\n\nimport { fromUserExtent, fromUserResolution, toUserExtent } from './proj.js';\n\n/**\r\n * Strategy function for loading all features with a single request.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n\n/**\r\n * Strategy function for loading features based on the view's extent and\r\n * resolution.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n\n/**\r\n * Creates a strategy function for loading features based on a tile grid.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\r\n * @api\r\n */\nexport function tile(tileGrid) {\n  return (\n    /**\r\n     * @param {import(\"./extent.js\").Extent} extent Extent.\r\n     * @param {number} resolution Resolution.\r\n     * @param {import(\"./proj.js\").Projection} projection Projection.\r\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n     */\n    function (extent, resolution, projection) {\n      const z = tileGrid.getZForResolution(fromUserResolution(resolution, projection));\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(fromUserExtent(extent, projection), z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      const extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      const tileCoord = [z, 0, 0];\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection));\n        }\n      }\n      return extents;\n    }\n  );\n}","map":{"version":3,"names":["fromUserExtent","fromUserResolution","toUserExtent","all","extent","resolution","Infinity","bbox","tile","tileGrid","projection","z","getZForResolution","tileRange","getTileRangeForExtentAndZ","extents","tileCoord","minX","maxX","minY","maxY","push","getTileCoordExtent"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/loadingstrategy.js"],"sourcesContent":["/**\r\n * @module ol/loadingstrategy\r\n */\r\n\r\nimport {fromUserExtent, fromUserResolution, toUserExtent} from './proj.js';\r\n\r\n/**\r\n * Strategy function for loading all features with a single request.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\r\nexport function all(extent, resolution) {\r\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\r\n}\r\n\r\n/**\r\n * Strategy function for loading features based on the view's extent and\r\n * resolution.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\r\nexport function bbox(extent, resolution) {\r\n  return [extent];\r\n}\r\n\r\n/**\r\n * Creates a strategy function for loading features based on a tile grid.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\r\n * @api\r\n */\r\nexport function tile(tileGrid) {\r\n  return (\r\n    /**\r\n     * @param {import(\"./extent.js\").Extent} extent Extent.\r\n     * @param {number} resolution Resolution.\r\n     * @param {import(\"./proj.js\").Projection} projection Projection.\r\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n     */\r\n    function (extent, resolution, projection) {\r\n      const z = tileGrid.getZForResolution(\r\n        fromUserResolution(resolution, projection),\r\n      );\r\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\r\n        fromUserExtent(extent, projection),\r\n        z,\r\n      );\r\n      /** @type {Array<import(\"./extent.js\").Extent>} */\r\n      const extents = [];\r\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\r\n      const tileCoord = [z, 0, 0];\r\n      for (\r\n        tileCoord[1] = tileRange.minX;\r\n        tileCoord[1] <= tileRange.maxX;\r\n        ++tileCoord[1]\r\n      ) {\r\n        for (\r\n          tileCoord[2] = tileRange.minY;\r\n          tileCoord[2] <= tileRange.maxY;\r\n          ++tileCoord[2]\r\n        ) {\r\n          extents.push(\r\n            toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection),\r\n          );\r\n        }\r\n      }\r\n      return extents;\r\n    }\r\n  );\r\n}\r\n"],"mappings":";AAAA;AACA;AACA;;AAEA,SAAQA,cAAc,EAAEC,kBAAkB,EAAEC,YAAY,QAAO,WAAW;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAGA,CAACC,MAAM,EAAEC,UAAU,EAAE;EACtC,OAAO,CAAC,CAAC,CAACC,QAAQ,EAAE,CAACA,QAAQ,EAAEA,QAAQ,EAAEA,QAAQ,CAAC,CAAC;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACH,MAAM,EAAEC,UAAU,EAAE;EACvC,OAAO,CAACD,MAAM,CAAC;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,IAAIA,CAACC,QAAQ,EAAE;EAC7B;IACE;AACJ;AACA;AACA;AACA;AACA;IACI,UAAUL,MAAM,EAAEC,UAAU,EAAEK,UAAU,EAAE;MACxC,MAAMC,CAAC,GAAGF,QAAQ,CAACG,iBAAiB,CAClCX,kBAAkB,CAACI,UAAU,EAAEK,UAAU,CAC3C,CAAC;MACD,MAAMG,SAAS,GAAGJ,QAAQ,CAACK,yBAAyB,CAClDd,cAAc,CAACI,MAAM,EAAEM,UAAU,CAAC,EAClCC,CACF,CAAC;MACD;MACA,MAAMI,OAAO,GAAG,EAAE;MAClB;MACA,MAAMC,SAAS,GAAG,CAACL,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC3B,KACEK,SAAS,CAAC,CAAC,CAAC,GAAGH,SAAS,CAACI,IAAI,EAC7BD,SAAS,CAAC,CAAC,CAAC,IAAIH,SAAS,CAACK,IAAI,EAC9B,EAAEF,SAAS,CAAC,CAAC,CAAC,EACd;QACA,KACEA,SAAS,CAAC,CAAC,CAAC,GAAGH,SAAS,CAACM,IAAI,EAC7BH,SAAS,CAAC,CAAC,CAAC,IAAIH,SAAS,CAACO,IAAI,EAC9B,EAAEJ,SAAS,CAAC,CAAC,CAAC,EACd;UACAD,OAAO,CAACM,IAAI,CACVnB,YAAY,CAACO,QAAQ,CAACa,kBAAkB,CAACN,SAAS,CAAC,EAAEN,UAAU,CACjE,CAAC;QACH;MACF;MACA,OAAOK,OAAO;IAChB;EAAC;AAEL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}