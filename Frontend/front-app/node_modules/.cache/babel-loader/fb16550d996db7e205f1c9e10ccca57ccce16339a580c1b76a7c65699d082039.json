{"ast":null,"code":"/**\r\n * @module ol/proj/epsg3857\r\n */\nimport Projection from './Projection.js';\n\n/**\r\n * Radius of WGS84 sphere\r\n *\r\n * @const\r\n * @type {number}\r\n */\nexport const RADIUS = 6378137;\n\n/**\r\n * @const\r\n * @type {number}\r\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n/**\r\n * @const\r\n * @type {import(\"../extent.js\").Extent}\r\n */\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\r\n * @const\r\n * @type {import(\"../extent.js\").Extent}\r\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\r\n * Maximum safe value in y direction\r\n * @const\r\n * @type {number}\r\n */\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n\n/**\r\n * @classdesc\r\n * Projection object for web/spherical Mercator (EPSG:3857).\r\n */\nclass EPSG3857Projection extends Projection {\n  /**\r\n   * @param {string} code Code.\r\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: 'm',\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / Math.cosh(point[1] / RADIUS);\n      }\n    });\n  }\n}\n\n/**\r\n * Projections equal to EPSG:3857.\r\n *\r\n * @const\r\n * @type {Array<import(\"./Projection.js\").default>}\r\n */\nexport const PROJECTIONS = [new EPSG3857Projection('EPSG:3857'), new EPSG3857Projection('EPSG:102100'), new EPSG3857Projection('EPSG:102113'), new EPSG3857Projection('EPSG:900913'), new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'), new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n\n/**\r\n * Transformation from EPSG:4326 to EPSG:3857.\r\n *\r\n * @param {Array<number>} input Input array of coordinate values.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @param {number} [dimension] Dimension (default is `2`).\r\n * @return {Array<number>} Output array of coordinate values.\r\n */\nexport function fromEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = HALF_SIZE * input[i] / 180;\n    let y = RADIUS * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\r\n * Transformation from EPSG:3857 to EPSG:4326.\r\n *\r\n * @param {Array<number>} input Input array of coordinate values.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @param {number} [dimension] Dimension (default is `2`).\r\n * @return {Array<number>} Output array of coordinate values.\r\n */\nexport function toEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n  return output;\n}","map":{"version":3,"names":["Projection","RADIUS","HALF_SIZE","Math","PI","EXTENT","WORLD_EXTENT","MAX_SAFE_Y","log","tan","EPSG3857Projection","constructor","code","units","extent","global","worldExtent","getPointResolution","resolution","point","cosh","PROJECTIONS","fromEPSG4326","input","output","dimension","length","undefined","slice","Array","i","y","toEPSG4326","atan","exp"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/proj/epsg3857.js"],"sourcesContent":["/**\r\n * @module ol/proj/epsg3857\r\n */\r\nimport Projection from './Projection.js';\r\n\r\n/**\r\n * Radius of WGS84 sphere\r\n *\r\n * @const\r\n * @type {number}\r\n */\r\nexport const RADIUS = 6378137;\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const HALF_SIZE = Math.PI * RADIUS;\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../extent.js\").Extent}\r\n */\r\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../extent.js\").Extent}\r\n */\r\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\r\n\r\n/**\r\n * Maximum safe value in y direction\r\n * @const\r\n * @type {number}\r\n */\r\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\r\n\r\n/**\r\n * @classdesc\r\n * Projection object for web/spherical Mercator (EPSG:3857).\r\n */\r\nclass EPSG3857Projection extends Projection {\r\n  /**\r\n   * @param {string} code Code.\r\n   */\r\n  constructor(code) {\r\n    super({\r\n      code: code,\r\n      units: 'm',\r\n      extent: EXTENT,\r\n      global: true,\r\n      worldExtent: WORLD_EXTENT,\r\n      getPointResolution: function (resolution, point) {\r\n        return resolution / Math.cosh(point[1] / RADIUS);\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Projections equal to EPSG:3857.\r\n *\r\n * @const\r\n * @type {Array<import(\"./Projection.js\").default>}\r\n */\r\nexport const PROJECTIONS = [\r\n  new EPSG3857Projection('EPSG:3857'),\r\n  new EPSG3857Projection('EPSG:102100'),\r\n  new EPSG3857Projection('EPSG:102113'),\r\n  new EPSG3857Projection('EPSG:900913'),\r\n  new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\r\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\r\n];\r\n\r\n/**\r\n * Transformation from EPSG:4326 to EPSG:3857.\r\n *\r\n * @param {Array<number>} input Input array of coordinate values.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @param {number} [dimension] Dimension (default is `2`).\r\n * @return {Array<number>} Output array of coordinate values.\r\n */\r\nexport function fromEPSG4326(input, output, dimension) {\r\n  const length = input.length;\r\n  dimension = dimension > 1 ? dimension : 2;\r\n  if (output === undefined) {\r\n    if (dimension > 2) {\r\n      // preserve values beyond second dimension\r\n      output = input.slice();\r\n    } else {\r\n      output = new Array(length);\r\n    }\r\n  }\r\n  for (let i = 0; i < length; i += dimension) {\r\n    output[i] = (HALF_SIZE * input[i]) / 180;\r\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\r\n    if (y > MAX_SAFE_Y) {\r\n      y = MAX_SAFE_Y;\r\n    } else if (y < -MAX_SAFE_Y) {\r\n      y = -MAX_SAFE_Y;\r\n    }\r\n    output[i + 1] = y;\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * Transformation from EPSG:3857 to EPSG:4326.\r\n *\r\n * @param {Array<number>} input Input array of coordinate values.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @param {number} [dimension] Dimension (default is `2`).\r\n * @return {Array<number>} Output array of coordinate values.\r\n */\r\nexport function toEPSG4326(input, output, dimension) {\r\n  const length = input.length;\r\n  dimension = dimension > 1 ? dimension : 2;\r\n  if (output === undefined) {\r\n    if (dimension > 2) {\r\n      // preserve values beyond second dimension\r\n      output = input.slice();\r\n    } else {\r\n      output = new Array(length);\r\n    }\r\n  }\r\n  for (let i = 0; i < length; i += dimension) {\r\n    output[i] = (180 * input[i]) / HALF_SIZE;\r\n    output[i + 1] =\r\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\r\n  }\r\n  return output;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAG,OAAO;;AAE7B;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGC,IAAI,CAACC,EAAE,GAAGH,MAAM;;AAEzC;AACA;AACA;AACA;AACA,OAAO,MAAMI,MAAM,GAAG,CAAC,CAACH,SAAS,EAAE,CAACA,SAAS,EAAEA,SAAS,EAAEA,SAAS,CAAC;;AAEpE;AACA;AACA;AACA;AACA,OAAO,MAAMI,YAAY,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGN,MAAM,GAAGE,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,GAAG,CAACN,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC,CAAC;;AAElE;AACA;AACA;AACA;AACA,MAAMM,kBAAkB,SAASV,UAAU,CAAC;EAC1C;AACF;AACA;EACEW,WAAWA,CAACC,IAAI,EAAE;IAChB,KAAK,CAAC;MACJA,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAET,MAAM;MACdU,MAAM,EAAE,IAAI;MACZC,WAAW,EAAEV,YAAY;MACzBW,kBAAkB,EAAE,SAAAA,CAAUC,UAAU,EAAEC,KAAK,EAAE;QAC/C,OAAOD,UAAU,GAAGf,IAAI,CAACiB,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,GAAGlB,MAAM,CAAC;MAClD;IACF,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMoB,WAAW,GAAG,CACzB,IAAIX,kBAAkB,CAAC,WAAW,CAAC,EACnC,IAAIA,kBAAkB,CAAC,aAAa,CAAC,EACrC,IAAIA,kBAAkB,CAAC,aAAa,CAAC,EACrC,IAAIA,kBAAkB,CAAC,aAAa,CAAC,EACrC,IAAIA,kBAAkB,CAAC,4CAA4C,CAAC,EACpE,IAAIA,kBAAkB,CAAC,8CAA8C,CAAC,CACvE;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,YAAYA,CAACC,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAE;EACrD,MAAMC,MAAM,GAAGH,KAAK,CAACG,MAAM;EAC3BD,SAAS,GAAGA,SAAS,GAAG,CAAC,GAAGA,SAAS,GAAG,CAAC;EACzC,IAAID,MAAM,KAAKG,SAAS,EAAE;IACxB,IAAIF,SAAS,GAAG,CAAC,EAAE;MACjB;MACAD,MAAM,GAAGD,KAAK,CAACK,KAAK,CAAC,CAAC;IACxB,CAAC,MAAM;MACLJ,MAAM,GAAG,IAAIK,KAAK,CAACH,MAAM,CAAC;IAC5B;EACF;EACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,EAAEI,CAAC,IAAIL,SAAS,EAAE;IAC1CD,MAAM,CAACM,CAAC,CAAC,GAAI5B,SAAS,GAAGqB,KAAK,CAACO,CAAC,CAAC,GAAI,GAAG;IACxC,IAAIC,CAAC,GAAG9B,MAAM,GAAGE,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,GAAG,CAAEN,IAAI,CAACC,EAAE,IAAI,CAACmB,KAAK,CAACO,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAI,GAAG,CAAC,CAAC;IAC3E,IAAIC,CAAC,GAAGxB,UAAU,EAAE;MAClBwB,CAAC,GAAGxB,UAAU;IAChB,CAAC,MAAM,IAAIwB,CAAC,GAAG,CAACxB,UAAU,EAAE;MAC1BwB,CAAC,GAAG,CAACxB,UAAU;IACjB;IACAiB,MAAM,CAACM,CAAC,GAAG,CAAC,CAAC,GAAGC,CAAC;EACnB;EACA,OAAOP,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,UAAUA,CAACT,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAE;EACnD,MAAMC,MAAM,GAAGH,KAAK,CAACG,MAAM;EAC3BD,SAAS,GAAGA,SAAS,GAAG,CAAC,GAAGA,SAAS,GAAG,CAAC;EACzC,IAAID,MAAM,KAAKG,SAAS,EAAE;IACxB,IAAIF,SAAS,GAAG,CAAC,EAAE;MACjB;MACAD,MAAM,GAAGD,KAAK,CAACK,KAAK,CAAC,CAAC;IACxB,CAAC,MAAM;MACLJ,MAAM,GAAG,IAAIK,KAAK,CAACH,MAAM,CAAC;IAC5B;EACF;EACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,EAAEI,CAAC,IAAIL,SAAS,EAAE;IAC1CD,MAAM,CAACM,CAAC,CAAC,GAAI,GAAG,GAAGP,KAAK,CAACO,CAAC,CAAC,GAAI5B,SAAS;IACxCsB,MAAM,CAACM,CAAC,GAAG,CAAC,CAAC,GACV,GAAG,GAAG3B,IAAI,CAAC8B,IAAI,CAAC9B,IAAI,CAAC+B,GAAG,CAACX,KAAK,CAACO,CAAC,GAAG,CAAC,CAAC,GAAG7B,MAAM,CAAC,CAAC,GAAIE,IAAI,CAACC,EAAE,GAAG,EAAE;EACrE;EACA,OAAOoB,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}