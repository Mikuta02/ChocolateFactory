{"ast":null,"code":"/**\r\n * @module ol/structs/RBush\r\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\n\n/**\r\n * @typedef {Object} Entry\r\n * @property {number} minX MinX.\r\n * @property {number} minY MinY.\r\n * @property {number} maxX MaxX.\r\n * @property {number} maxY MaxY.\r\n * @property {Object} [value] Value.\r\n */\n\n/**\r\n * @classdesc\r\n * Wrapper around the RBush by Vladimir Agafonkin.\r\n * See https://github.com/mourner/rbush.\r\n *\r\n * @template T\r\n */\nclass RBush {\n  /**\r\n   * @param {number} [maxEntries] Max entries.\r\n   */\n  constructor(maxEntries) {\n    /**\r\n     * @private\r\n     */\n    this.rbush_ = new RBush_(maxEntries);\n\n    /**\r\n     * A mapping between the objects added to this rbush wrapper\r\n     * and the objects that are actually added to the internal rbush.\r\n     * @private\r\n     * @type {Object<string, Entry>}\r\n     */\n    this.items_ = {};\n  }\n\n  /**\r\n   * Insert a value into the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\n  insert(extent, value) {\n    /** @type {Entry} */\n    const item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  }\n\n  /**\r\n   * Bulk-insert values into the RBush.\r\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\r\n   * @param {Array<T>} values Values.\r\n   */\n  load(extents, values) {\n    const items = new Array(values.length);\n    for (let i = 0, l = values.length; i < l; i++) {\n      const extent = extents[i];\n      const value = values[i];\n\n      /** @type {Entry} */\n      const item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n    this.rbush_.load(items);\n  }\n\n  /**\r\n   * Remove a value from the RBush.\r\n   * @param {T} value Value.\r\n   * @return {boolean} Removed.\r\n   */\n  remove(value) {\n    const uid = getUid(value);\n\n    // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n    const item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  }\n\n  /**\r\n   * Update the extent of a value in the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\n  update(extent, value) {\n    const item = this.items_[getUid(value)];\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  }\n\n  /**\r\n   * Return all values in the RBush.\r\n   * @return {Array<T>} All.\r\n   */\n  getAll() {\n    const items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n\n  /**\r\n   * Return all values in the given extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {Array<T>} All in extent.\r\n   */\n  getInExtent(extent) {\n    /** @type {Entry} */\n    const bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3]\n    };\n    const items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n\n  /**\r\n   * Calls a callback function with each value in the tree.\r\n   * If the callback returns a truthy value, this value is returned without\r\n   * checking the rest of the tree.\r\n   * @param {function(T): *} callback Callback.\r\n   * @return {*} Callback return value.\r\n   */\n  forEach(callback) {\n    return this.forEach_(this.getAll(), callback);\n  }\n\n  /**\r\n   * Calls a callback function with each value in the provided extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(T): *} callback Callback.\r\n   * @return {*} Callback return value.\r\n   */\n  forEachInExtent(extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  }\n\n  /**\r\n   * @param {Array<T>} values Values.\r\n   * @param {function(T): *} callback Callback.\r\n   * @private\r\n   * @return {*} Callback return value.\r\n   */\n  forEach_(values, callback) {\n    let result;\n    for (let i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n      if (result) {\n        return result;\n      }\n    }\n    return result;\n  }\n\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\n  isEmpty() {\n    return isEmpty(this.items_);\n  }\n\n  /**\r\n   * Remove all values from the RBush.\r\n   */\n  clear() {\n    this.rbush_.clear();\n    this.items_ = {};\n  }\n\n  /**\r\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   */\n  getExtent(extent) {\n    const data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, extent);\n  }\n\n  /**\r\n   * @param {RBush} rbush R-Tree.\r\n   */\n  concat(rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n    for (const i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  }\n}\nexport default RBush;","map":{"version":3,"names":["RBush_","createOrUpdate","equals","getUid","isEmpty","RBush","constructor","maxEntries","rbush_","items_","insert","extent","value","item","minX","minY","maxX","maxY","load","extents","values","items","Array","length","i","l","remove","uid","update","bbox","getAll","all","map","getInExtent","search","forEach","callback","forEach_","forEachInExtent","result","clear","getExtent","data","toJSON","concat","rbush"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/structs/RBush.js"],"sourcesContent":["/**\r\n * @module ol/structs/RBush\r\n */\r\nimport RBush_ from 'rbush';\r\nimport {createOrUpdate, equals} from '../extent.js';\r\nimport {getUid} from '../util.js';\r\nimport {isEmpty} from '../obj.js';\r\n\r\n/**\r\n * @typedef {Object} Entry\r\n * @property {number} minX MinX.\r\n * @property {number} minY MinY.\r\n * @property {number} maxX MaxX.\r\n * @property {number} maxY MaxY.\r\n * @property {Object} [value] Value.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Wrapper around the RBush by Vladimir Agafonkin.\r\n * See https://github.com/mourner/rbush.\r\n *\r\n * @template T\r\n */\r\nclass RBush {\r\n  /**\r\n   * @param {number} [maxEntries] Max entries.\r\n   */\r\n  constructor(maxEntries) {\r\n    /**\r\n     * @private\r\n     */\r\n    this.rbush_ = new RBush_(maxEntries);\r\n\r\n    /**\r\n     * A mapping between the objects added to this rbush wrapper\r\n     * and the objects that are actually added to the internal rbush.\r\n     * @private\r\n     * @type {Object<string, Entry>}\r\n     */\r\n    this.items_ = {};\r\n  }\r\n\r\n  /**\r\n   * Insert a value into the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\r\n  insert(extent, value) {\r\n    /** @type {Entry} */\r\n    const item = {\r\n      minX: extent[0],\r\n      minY: extent[1],\r\n      maxX: extent[2],\r\n      maxY: extent[3],\r\n      value: value,\r\n    };\r\n\r\n    this.rbush_.insert(item);\r\n    this.items_[getUid(value)] = item;\r\n  }\r\n\r\n  /**\r\n   * Bulk-insert values into the RBush.\r\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\r\n   * @param {Array<T>} values Values.\r\n   */\r\n  load(extents, values) {\r\n    const items = new Array(values.length);\r\n    for (let i = 0, l = values.length; i < l; i++) {\r\n      const extent = extents[i];\r\n      const value = values[i];\r\n\r\n      /** @type {Entry} */\r\n      const item = {\r\n        minX: extent[0],\r\n        minY: extent[1],\r\n        maxX: extent[2],\r\n        maxY: extent[3],\r\n        value: value,\r\n      };\r\n      items[i] = item;\r\n      this.items_[getUid(value)] = item;\r\n    }\r\n    this.rbush_.load(items);\r\n  }\r\n\r\n  /**\r\n   * Remove a value from the RBush.\r\n   * @param {T} value Value.\r\n   * @return {boolean} Removed.\r\n   */\r\n  remove(value) {\r\n    const uid = getUid(value);\r\n\r\n    // get the object in which the value was wrapped when adding to the\r\n    // internal rbush. then use that object to do the removal.\r\n    const item = this.items_[uid];\r\n    delete this.items_[uid];\r\n    return this.rbush_.remove(item) !== null;\r\n  }\r\n\r\n  /**\r\n   * Update the extent of a value in the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\r\n  update(extent, value) {\r\n    const item = this.items_[getUid(value)];\r\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\r\n    if (!equals(bbox, extent)) {\r\n      this.remove(value);\r\n      this.insert(extent, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return all values in the RBush.\r\n   * @return {Array<T>} All.\r\n   */\r\n  getAll() {\r\n    const items = this.rbush_.all();\r\n    return items.map(function (item) {\r\n      return item.value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return all values in the given extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {Array<T>} All in extent.\r\n   */\r\n  getInExtent(extent) {\r\n    /** @type {Entry} */\r\n    const bbox = {\r\n      minX: extent[0],\r\n      minY: extent[1],\r\n      maxX: extent[2],\r\n      maxY: extent[3],\r\n    };\r\n    const items = this.rbush_.search(bbox);\r\n    return items.map(function (item) {\r\n      return item.value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calls a callback function with each value in the tree.\r\n   * If the callback returns a truthy value, this value is returned without\r\n   * checking the rest of the tree.\r\n   * @param {function(T): *} callback Callback.\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEach(callback) {\r\n    return this.forEach_(this.getAll(), callback);\r\n  }\r\n\r\n  /**\r\n   * Calls a callback function with each value in the provided extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(T): *} callback Callback.\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEachInExtent(extent, callback) {\r\n    return this.forEach_(this.getInExtent(extent), callback);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<T>} values Values.\r\n   * @param {function(T): *} callback Callback.\r\n   * @private\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEach_(values, callback) {\r\n    let result;\r\n    for (let i = 0, l = values.length; i < l; i++) {\r\n      result = callback(values[i]);\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return isEmpty(this.items_);\r\n  }\r\n\r\n  /**\r\n   * Remove all values from the RBush.\r\n   */\r\n  clear() {\r\n    this.rbush_.clear();\r\n    this.items_ = {};\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   */\r\n  getExtent(extent) {\r\n    const data = this.rbush_.toJSON();\r\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, extent);\r\n  }\r\n\r\n  /**\r\n   * @param {RBush} rbush R-Tree.\r\n   */\r\n  concat(rbush) {\r\n    this.rbush_.load(rbush.rbush_.all());\r\n    for (const i in rbush.items_) {\r\n      this.items_[i] = rbush.items_[i];\r\n    }\r\n  }\r\n}\r\n\r\nexport default RBush;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,OAAO;AAC1B,SAAQC,cAAc,EAAEC,MAAM,QAAO,cAAc;AACnD,SAAQC,MAAM,QAAO,YAAY;AACjC,SAAQC,OAAO,QAAO,WAAW;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,CAAC;EACV;AACF;AACA;EACEC,WAAWA,CAACC,UAAU,EAAE;IACtB;AACJ;AACA;IACI,IAAI,CAACC,MAAM,GAAG,IAAIR,MAAM,CAACO,UAAU,CAAC;;IAEpC;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC;EAClB;;EAEA;AACF;AACA;AACA;AACA;EACEC,MAAMA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACpB;IACA,MAAMC,IAAI,GAAG;MACXC,IAAI,EAAEH,MAAM,CAAC,CAAC,CAAC;MACfI,IAAI,EAAEJ,MAAM,CAAC,CAAC,CAAC;MACfK,IAAI,EAAEL,MAAM,CAAC,CAAC,CAAC;MACfM,IAAI,EAAEN,MAAM,CAAC,CAAC,CAAC;MACfC,KAAK,EAAEA;IACT,CAAC;IAED,IAAI,CAACJ,MAAM,CAACE,MAAM,CAACG,IAAI,CAAC;IACxB,IAAI,CAACJ,MAAM,CAACN,MAAM,CAACS,KAAK,CAAC,CAAC,GAAGC,IAAI;EACnC;;EAEA;AACF;AACA;AACA;AACA;EACEK,IAAIA,CAACC,OAAO,EAAEC,MAAM,EAAE;IACpB,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAACF,MAAM,CAACG,MAAM,CAAC;IACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGL,MAAM,CAACG,MAAM,EAAEC,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MAC7C,MAAMb,MAAM,GAAGQ,OAAO,CAACK,CAAC,CAAC;MACzB,MAAMZ,KAAK,GAAGQ,MAAM,CAACI,CAAC,CAAC;;MAEvB;MACA,MAAMX,IAAI,GAAG;QACXC,IAAI,EAAEH,MAAM,CAAC,CAAC,CAAC;QACfI,IAAI,EAAEJ,MAAM,CAAC,CAAC,CAAC;QACfK,IAAI,EAAEL,MAAM,CAAC,CAAC,CAAC;QACfM,IAAI,EAAEN,MAAM,CAAC,CAAC,CAAC;QACfC,KAAK,EAAEA;MACT,CAAC;MACDS,KAAK,CAACG,CAAC,CAAC,GAAGX,IAAI;MACf,IAAI,CAACJ,MAAM,CAACN,MAAM,CAACS,KAAK,CAAC,CAAC,GAAGC,IAAI;IACnC;IACA,IAAI,CAACL,MAAM,CAACU,IAAI,CAACG,KAAK,CAAC;EACzB;;EAEA;AACF;AACA;AACA;AACA;EACEK,MAAMA,CAACd,KAAK,EAAE;IACZ,MAAMe,GAAG,GAAGxB,MAAM,CAACS,KAAK,CAAC;;IAEzB;IACA;IACA,MAAMC,IAAI,GAAG,IAAI,CAACJ,MAAM,CAACkB,GAAG,CAAC;IAC7B,OAAO,IAAI,CAAClB,MAAM,CAACkB,GAAG,CAAC;IACvB,OAAO,IAAI,CAACnB,MAAM,CAACkB,MAAM,CAACb,IAAI,CAAC,KAAK,IAAI;EAC1C;;EAEA;AACF;AACA;AACA;AACA;EACEe,MAAMA,CAACjB,MAAM,EAAEC,KAAK,EAAE;IACpB,MAAMC,IAAI,GAAG,IAAI,CAACJ,MAAM,CAACN,MAAM,CAACS,KAAK,CAAC,CAAC;IACvC,MAAMiB,IAAI,GAAG,CAAChB,IAAI,CAACC,IAAI,EAAED,IAAI,CAACE,IAAI,EAAEF,IAAI,CAACG,IAAI,EAAEH,IAAI,CAACI,IAAI,CAAC;IACzD,IAAI,CAACf,MAAM,CAAC2B,IAAI,EAAElB,MAAM,CAAC,EAAE;MACzB,IAAI,CAACe,MAAM,CAACd,KAAK,CAAC;MAClB,IAAI,CAACF,MAAM,CAACC,MAAM,EAAEC,KAAK,CAAC;IAC5B;EACF;;EAEA;AACF;AACA;AACA;EACEkB,MAAMA,CAAA,EAAG;IACP,MAAMT,KAAK,GAAG,IAAI,CAACb,MAAM,CAACuB,GAAG,CAAC,CAAC;IAC/B,OAAOV,KAAK,CAACW,GAAG,CAAC,UAAUnB,IAAI,EAAE;MAC/B,OAAOA,IAAI,CAACD,KAAK;IACnB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEqB,WAAWA,CAACtB,MAAM,EAAE;IAClB;IACA,MAAMkB,IAAI,GAAG;MACXf,IAAI,EAAEH,MAAM,CAAC,CAAC,CAAC;MACfI,IAAI,EAAEJ,MAAM,CAAC,CAAC,CAAC;MACfK,IAAI,EAAEL,MAAM,CAAC,CAAC,CAAC;MACfM,IAAI,EAAEN,MAAM,CAAC,CAAC;IAChB,CAAC;IACD,MAAMU,KAAK,GAAG,IAAI,CAACb,MAAM,CAAC0B,MAAM,CAACL,IAAI,CAAC;IACtC,OAAOR,KAAK,CAACW,GAAG,CAAC,UAAUnB,IAAI,EAAE;MAC/B,OAAOA,IAAI,CAACD,KAAK;IACnB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEuB,OAAOA,CAACC,QAAQ,EAAE;IAChB,OAAO,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACP,MAAM,CAAC,CAAC,EAAEM,QAAQ,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEE,eAAeA,CAAC3B,MAAM,EAAEyB,QAAQ,EAAE;IAChC,OAAO,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACJ,WAAW,CAACtB,MAAM,CAAC,EAAEyB,QAAQ,CAAC;EAC1D;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,QAAQA,CAACjB,MAAM,EAAEgB,QAAQ,EAAE;IACzB,IAAIG,MAAM;IACV,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGL,MAAM,CAACG,MAAM,EAAEC,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MAC7Ce,MAAM,GAAGH,QAAQ,CAAChB,MAAM,CAACI,CAAC,CAAC,CAAC;MAC5B,IAAIe,MAAM,EAAE;QACV,OAAOA,MAAM;MACf;IACF;IACA,OAAOA,MAAM;EACf;;EAEA;AACF;AACA;EACEnC,OAAOA,CAAA,EAAG;IACR,OAAOA,OAAO,CAAC,IAAI,CAACK,MAAM,CAAC;EAC7B;;EAEA;AACF;AACA;EACE+B,KAAKA,CAAA,EAAG;IACN,IAAI,CAAChC,MAAM,CAACgC,KAAK,CAAC,CAAC;IACnB,IAAI,CAAC/B,MAAM,GAAG,CAAC,CAAC;EAClB;;EAEA;AACF;AACA;AACA;EACEgC,SAASA,CAAC9B,MAAM,EAAE;IAChB,MAAM+B,IAAI,GAAG,IAAI,CAAClC,MAAM,CAACmC,MAAM,CAAC,CAAC;IACjC,OAAO1C,cAAc,CAACyC,IAAI,CAAC5B,IAAI,EAAE4B,IAAI,CAAC3B,IAAI,EAAE2B,IAAI,CAAC1B,IAAI,EAAE0B,IAAI,CAACzB,IAAI,EAAEN,MAAM,CAAC;EAC3E;;EAEA;AACF;AACA;EACEiC,MAAMA,CAACC,KAAK,EAAE;IACZ,IAAI,CAACrC,MAAM,CAACU,IAAI,CAAC2B,KAAK,CAACrC,MAAM,CAACuB,GAAG,CAAC,CAAC,CAAC;IACpC,KAAK,MAAMP,CAAC,IAAIqB,KAAK,CAACpC,MAAM,EAAE;MAC5B,IAAI,CAACA,MAAM,CAACe,CAAC,CAAC,GAAGqB,KAAK,CAACpC,MAAM,CAACe,CAAC,CAAC;IAClC;EACF;AACF;AAEA,eAAenB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}