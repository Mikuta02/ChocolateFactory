{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @module ol/control/Control\r\n */\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport { VOID } from '../functions.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { removeNode } from '../dom.js';\n\n/**\r\n * @typedef {Object} Options\r\n * @property {HTMLElement} [element] The element is the control's\r\n * container element. This only needs to be specified if you're developing\r\n * a custom control.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\r\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n * @property {HTMLElement|string} [target] Specify a target if you want\r\n * the control to be rendered outside of the map's viewport.\r\n */\n\n/**\r\n * @classdesc\r\n * A control is a visible widget with a DOM element in a fixed position on the\r\n * screen. They can involve user input (buttons), or be informational only;\r\n * the position is determined using CSS. By default these are placed in the\r\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\r\n * any outside DOM element.\r\n *\r\n * This is the base class for controls. You can use it for simple custom\r\n * controls by creating the element with listeners, creating an instance:\r\n * ```js\r\n * const myControl = new Control({element: myElement});\r\n * ```\r\n * and then adding this to the map.\r\n *\r\n * The main advantage of having this as a control rather than a simple separate\r\n * DOM element is that preventing propagation is handled for you. Controls\r\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\r\n *\r\n * You can also extend this base for your own control class. See\r\n * examples/custom-controls for an example of how to do this.\r\n *\r\n * @api\r\n */\nclass Control extends BaseObject {\n  /**\r\n   * @param {Options} options Control options.\r\n   */\n  constructor(options) {\n    super();\n    const element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n\n    /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */\n    this.element = element ? element : null;\n\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\n    this.target_ = null;\n\n    /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").default|null}\r\n     */\n    this.map_ = null;\n\n    /**\r\n     * @protected\r\n     * @type {!Array<import(\"../events.js\").EventsKey>}\r\n     */\n    this.listenerKeys = [];\n    if (options.render) {\n      this.render = options.render;\n    }\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n  }\n\n  /**\r\n   * Clean up.\r\n   */\n  disposeInternal() {\n    removeNode(this.element);\n    super.disposeInternal();\n  }\n\n  /**\r\n   * Get the map associated with this control.\r\n   * @return {import(\"../Map.js\").default|null} Map.\r\n   * @api\r\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Pass `null` to just remove the control from the current map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   */\n  setMap(map) {\n    if (this.map_) {\n      removeNode(this.element);\n    }\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (map) {\n      const target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n      if (this.render !== VOID) {\n        this.listenerKeys.push(listen(map, MapEventType.POSTRENDER, this.render, this));\n      }\n      map.render();\n    }\n  }\n\n  /**\r\n   * Renders the control.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @api\r\n   */\n  render(mapEvent) {}\n\n  /**\r\n   * This function is used to set a target element for the control. It has no\r\n   * effect if it is called after the control has been added to the map (i.e.\r\n   * after `setMap` is called on the control). If no `target` is set in the\r\n   * options passed to the control constructor and if `setTarget` is not called\r\n   * then the control is added to the map's overlay container.\r\n   * @param {HTMLElement|string} target Target.\r\n   * @api\r\n   */\n  setTarget(target) {\n    this.target_ = typeof target === 'string' ? document.getElementById(target) : target;\n  }\n}\nexport default Control;","map":{"version":3,"names":["BaseObject","MapEventType","VOID","listen","unlistenByKey","removeNode","Control","constructor","options","element","target","style","pointerEvents","target_","map_","listenerKeys","render","setTarget","disposeInternal","getMap","setMap","map","i","ii","length","getOverlayContainerStopEvent","appendChild","push","POSTRENDER","mapEvent","document","getElementById"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/control/Control.js"],"sourcesContent":["/**\r\n * @module ol/control/Control\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport MapEventType from '../MapEventType.js';\r\nimport {VOID} from '../functions.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {removeNode} from '../dom.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {HTMLElement} [element] The element is the control's\r\n * container element. This only needs to be specified if you're developing\r\n * a custom control.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\r\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n * @property {HTMLElement|string} [target] Specify a target if you want\r\n * the control to be rendered outside of the map's viewport.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A control is a visible widget with a DOM element in a fixed position on the\r\n * screen. They can involve user input (buttons), or be informational only;\r\n * the position is determined using CSS. By default these are placed in the\r\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\r\n * any outside DOM element.\r\n *\r\n * This is the base class for controls. You can use it for simple custom\r\n * controls by creating the element with listeners, creating an instance:\r\n * ```js\r\n * const myControl = new Control({element: myElement});\r\n * ```\r\n * and then adding this to the map.\r\n *\r\n * The main advantage of having this as a control rather than a simple separate\r\n * DOM element is that preventing propagation is handled for you. Controls\r\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\r\n *\r\n * You can also extend this base for your own control class. See\r\n * examples/custom-controls for an example of how to do this.\r\n *\r\n * @api\r\n */\r\nclass Control extends BaseObject {\r\n  /**\r\n   * @param {Options} options Control options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    const element = options.element;\r\n    if (element && !options.target && !element.style.pointerEvents) {\r\n      element.style.pointerEvents = 'auto';\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */\r\n    this.element = element ? element : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\r\n    this.target_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").default|null}\r\n     */\r\n    this.map_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.listenerKeys = [];\r\n\r\n    if (options.render) {\r\n      this.render = options.render;\r\n    }\r\n\r\n    if (options.target) {\r\n      this.setTarget(options.target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    removeNode(this.element);\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * Get the map associated with this control.\r\n   * @return {import(\"../Map.js\").default|null} Map.\r\n   * @api\r\n   */\r\n  getMap() {\r\n    return this.map_;\r\n  }\r\n\r\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Pass `null` to just remove the control from the current map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   */\r\n  setMap(map) {\r\n    if (this.map_) {\r\n      removeNode(this.element);\r\n    }\r\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\r\n      unlistenByKey(this.listenerKeys[i]);\r\n    }\r\n    this.listenerKeys.length = 0;\r\n    this.map_ = map;\r\n    if (map) {\r\n      const target = this.target_\r\n        ? this.target_\r\n        : map.getOverlayContainerStopEvent();\r\n      target.appendChild(this.element);\r\n      if (this.render !== VOID) {\r\n        this.listenerKeys.push(\r\n          listen(map, MapEventType.POSTRENDER, this.render, this),\r\n        );\r\n      }\r\n      map.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the control.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @api\r\n   */\r\n  render(mapEvent) {}\r\n\r\n  /**\r\n   * This function is used to set a target element for the control. It has no\r\n   * effect if it is called after the control has been added to the map (i.e.\r\n   * after `setMap` is called on the control). If no `target` is set in the\r\n   * options passed to the control constructor and if `setTarget` is not called\r\n   * then the control is added to the map's overlay container.\r\n   * @param {HTMLElement|string} target Target.\r\n   * @api\r\n   */\r\n  setTarget(target) {\r\n    this.target_ =\r\n      typeof target === 'string' ? document.getElementById(target) : target;\r\n  }\r\n}\r\n\r\nexport default Control;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}