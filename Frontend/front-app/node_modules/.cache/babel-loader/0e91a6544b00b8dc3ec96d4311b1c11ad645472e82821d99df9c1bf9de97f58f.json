{"ast":null,"code":"/**\r\n * @module ol/geom/LinearRing\r\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { linearRing as linearRingArea } from './flat/area.js';\n\n/**\r\n * @classdesc\r\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\r\n * on its own.\r\n *\r\n * @api\r\n */\nclass LinearRing extends SimpleGeometry {\n  /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.maxDelta_ = -1;\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.maxDeltaRevision_ = -1;\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(layout, /** @type {Array<number>} */coordinates);\n    } else {\n      this.setCoordinates( /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, layout);\n    }\n  }\n\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!LinearRing} Clone.\r\n   * @api\r\n   */\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  }\n\n  /**\r\n   * Return the area of the linear ring on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */\n  getArea() {\n    return linearRingArea(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\r\n   * Return the coordinates of the linear ring.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   */\n  getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {LinearRing} Simplified LinearRing.\r\n   * @protected\r\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    /** @type {Array<number>} */\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\n  getType() {\n    return 'LinearRing';\n  }\n\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\n  intersectsExtent(extent) {\n    return false;\n  }\n\n  /**\r\n   * Set the coordinates of the linear ring.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n}\nexport default LinearRing;","map":{"version":3,"names":["SimpleGeometry","assignClosestPoint","maxSquaredDelta","closestSquaredDistanceXY","deflateCoordinates","douglasPeucker","inflateCoordinates","linearRing","linearRingArea","LinearRing","constructor","coordinates","layout","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","clone","flatCoordinates","slice","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","getArea","getCoordinates","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","getType","intersectsExtent","extent","setLayout","changed"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/geom/LinearRing.js"],"sourcesContent":["/**\r\n * @module ol/geom/LinearRing\r\n */\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport {deflateCoordinates} from './flat/deflate.js';\r\nimport {douglasPeucker} from './flat/simplify.js';\r\nimport {inflateCoordinates} from './flat/inflate.js';\r\nimport {linearRing as linearRingArea} from './flat/area.js';\r\n\r\n/**\r\n * @classdesc\r\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\r\n * on its own.\r\n *\r\n * @api\r\n */\r\nclass LinearRing extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  constructor(coordinates, layout) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates),\r\n      );\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\r\n          coordinates\r\n        ),\r\n        layout,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!LinearRing} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        maxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.flatCoordinates.length,\r\n          this.stride,\r\n          0,\r\n        ),\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestPoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      true,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the area of the linear ring on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */\r\n  getArea() {\r\n    return linearRingArea(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the linear ring.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {LinearRing} Simplified LinearRing.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    /** @type {Array<number>} */\r\n    const simplifiedFlatCoordinates = [];\r\n    simplifiedFlatCoordinates.length = douglasPeucker(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      0,\r\n    );\r\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'LinearRing';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the linear ring.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 1);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default LinearRing;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}