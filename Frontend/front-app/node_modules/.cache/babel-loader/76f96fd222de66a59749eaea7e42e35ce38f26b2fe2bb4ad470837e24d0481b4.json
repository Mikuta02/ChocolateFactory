{"ast":null,"code":"/**\r\n * @module ol/layer/Tile\r\n */\nimport BaseTileLayer from './BaseTile.js';\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\n\n/**\r\n * @classdesc\r\n * For layer sources that provide pre-rendered, tiled images in grids that are\r\n * organized by zoom levels for specific resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Tile.js\").default} TileSourceType\r\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\r\n * @api\r\n */\nclass TileLayer extends BaseTileLayer {\n  /**\r\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\r\n   */\n  constructor(options) {\n    super(options);\n  }\n  createRenderer() {\n    return new CanvasTileLayerRenderer(this);\n  }\n}\nexport default TileLayer;","map":{"version":3,"names":["BaseTileLayer","CanvasTileLayerRenderer","TileLayer","constructor","options","createRenderer"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/layer/Tile.js"],"sourcesContent":["/**\r\n * @module ol/layer/Tile\r\n */\r\nimport BaseTileLayer from './BaseTile.js';\r\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\r\n\r\n/**\r\n * @classdesc\r\n * For layer sources that provide pre-rendered, tiled images in grids that are\r\n * organized by zoom levels for specific resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Tile.js\").default} TileSourceType\r\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\r\n * @api\r\n */\r\nclass TileLayer extends BaseTileLayer {\r\n  /**\r\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n\r\n  createRenderer() {\r\n    return new CanvasTileLayerRenderer(this);\r\n  }\r\n}\r\n\r\nexport default TileLayer;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,aAAa,MAAM,eAAe;AACzC,OAAOC,uBAAuB,MAAM,iCAAiC;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAASF,aAAa,CAAC;EACpC;AACF;AACA;EACEG,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEAC,cAAcA,CAAA,EAAG;IACf,OAAO,IAAIJ,uBAAuB,CAAC,IAAI,CAAC;EAC1C;AACF;AAEA,eAAeC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}