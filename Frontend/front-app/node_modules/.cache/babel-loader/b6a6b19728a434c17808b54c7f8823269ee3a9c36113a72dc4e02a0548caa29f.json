{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @module ol/Map\r\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport CompositeMapRenderer from './renderer/Composite.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, { GroupEvent } from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, { getTilePriority } from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { TRUE } from './functions.js';\nimport { apply as applyTransform, create as createTransform } from './transform.js';\nimport { assert } from './asserts.js';\nimport { clone, createOrUpdateEmpty, equals as equalsExtent, getForViewAndSize, isEmpty } from './extent.js';\nimport { defaults as defaultControls } from './control/defaults.js';\nimport { defaults as defaultInteractions } from './interaction/defaults.js';\nimport { equals } from './array.js';\nimport { fromUserCoordinate, toUserCoordinate } from './proj.js';\nimport { getUid } from './util.js';\nimport { hasArea } from './size.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { removeNode } from './dom.js';\nimport { warn } from './console.js';\n\n/**\r\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\r\n * be used in applications.\r\n * @typedef {Object} FrameState\r\n * @property {number} pixelRatio The pixel ratio of the frame.\r\n * @property {number} time The time when rendering of the frame was requested.\r\n * @property {import(\"./View.js\").State} viewState The state of the current view.\r\n * @property {boolean} animate Animate.\r\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\r\n * @property {Object<string, import(\"rbush\").default>|null} declutter Declutter trees by declutter group.\r\n * When null, no decluttering is needed because no layers have decluttering enabled.\r\n * @property {null|import(\"./extent.js\").Extent} extent Extent (in view projection coordinates).\r\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\r\n * @property {number} index Index.\r\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\r\n * @property {number} layerIndex LayerIndex.\r\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\r\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\r\n * @property {import(\"./size.js\").Size} size Size.\r\n * @property {TileQueue} tileQueue TileQueue.\r\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\r\n * @property {Array<number>} viewHints ViewHints.\r\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\r\n * @property {string} mapId The id of the map.\r\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\r\n */\n\n/**\r\n * @typedef {function(Map, ?FrameState): any} PostRenderFunction\r\n */\n\n/**\r\n * @typedef {Object} AtPixelOptions\r\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\r\n * function. The filter function will receive one argument, the\r\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\r\n * Only layers which are visible and for which this function returns `true`\r\n * will be tested for features. By default, all visible layers will be tested.\r\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\r\n * inside the radius around the given position will be checked for features.\r\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\r\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\r\n */\n\n/**\r\n * @typedef {Object} MapOptionsInternal\r\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\r\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\r\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\r\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\r\n * @property {Object<string, *>} values Values.\r\n */\n\n/**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\r\n */\n\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\r\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\r\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\r\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\r\n */\n\n/**\r\n * Object literal with config options for the map.\r\n * @typedef {Object} MapOptions\r\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\r\n * Controls initially added to the map. If not specified,\r\n * {@link module:ol/control/defaults.defaults} is used.\r\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\r\n * physical pixels and device-independent pixels (dips) on the device.\r\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\r\n * Interactions that are initially added to the map. If not specified,\r\n * {@link module:ol/interaction/defaults.defaults} is used.\r\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\r\n * listen to keyboard events on. This determines when the `KeyboardPan` and\r\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\r\n * `document` the keyboard interactions will always trigger. If this option is\r\n * not specified, the element the library listens to keyboard events on is the\r\n * map target (i.e. the user-provided div for the map). If this is not\r\n * `document`, the target element needs to be focused for key events to be\r\n * emitted, requiring that the target element has a `tabindex` attribute.\r\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\r\n * Layers. If this is not defined, a map with no layers will be rendered. Note\r\n * that layers are rendered in the order supplied, so if you want, for example,\r\n * a vector layer to appear on top of a tile layer, it must come after the tile\r\n * layer.\r\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\r\n * simultaneously.\r\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\r\n * cursor must move to be detected as a map move event instead of a click.\r\n * Increasing this value can make it easier to click on the map.\r\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\r\n * Overlays initially added to the map. By default, no overlays are added.\r\n * @property {HTMLElement|string} [target] The container for the map, either the\r\n * element itself or the `id` of the element. If not specified at construction\r\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\r\n * rendered. If passed by element, the container can be in a secondary document.\r\n * **Note:** CSS `transform` support for the target element is limited to `scale`.\r\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\r\n * fetched unless this is specified at construction time or through\r\n * {@link module:ol/Map~Map#setView}.\r\n */\n\n/**\r\n * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n */\nfunction removeLayerMapProperty(layer) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(null);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    layer.getLayers().forEach(removeLayerMapProperty);\n  }\n}\n\n/**\r\n * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n * @param {Map} map Map.\r\n */\nfunction setLayerMapProperty(layer, map) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(map);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    const layers = layer.getLayers().getArray();\n    for (let i = 0, ii = layers.length; i < ii; ++i) {\n      setLayerMapProperty(layers[i], map);\n    }\n  }\n}\n\n/**\r\n * @classdesc\r\n * The map is the core component of OpenLayers. For a map to render, a view,\r\n * one or more layers, and a target container are needed:\r\n *\r\n *     import Map from 'ol/Map.js';\r\n *     import View from 'ol/View.js';\r\n *     import TileLayer from 'ol/layer/Tile.js';\r\n *     import OSM from 'ol/source/OSM.js';\r\n *\r\n *     const map = new Map({\r\n *       view: new View({\r\n *         center: [0, 0],\r\n *         zoom: 1,\r\n *       }),\r\n *       layers: [\r\n *         new TileLayer({\r\n *           source: new OSM(),\r\n *         }),\r\n *       ],\r\n *       target: 'map',\r\n *     });\r\n *\r\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\r\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\r\n * element with the id `map`.\r\n *\r\n * The constructor places a viewport container (with CSS class name\r\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\r\n * further elements within the viewport: one with CSS class name\r\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\r\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\r\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\r\n * itself is placed in a further element within the viewport.\r\n *\r\n * Layers are stored as a {@link module:ol/Collection~Collection} in\r\n * layerGroups. A top-level group is provided by the library. This is what is\r\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\r\n * options are added to this group, and `addLayer` and `removeLayer` change the\r\n * layer collection in the group. `getLayers` is a convenience function for\r\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\r\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\r\n * options or added with `addLayer` can be groups, which can contain further\r\n * groups, and so on.\r\n *\r\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\r\n * @fires import(\"./MapEvent.js\").MapEvent\r\n * @fires import(\"./render/Event.js\").default#precompose\r\n * @fires import(\"./render/Event.js\").default#postcompose\r\n * @fires import(\"./render/Event.js\").default#rendercomplete\r\n * @api\r\n */\nclass Map extends BaseObject {\n  /**\r\n   * @param {MapOptions} [options] Map options.\r\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /***\r\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\r\n     */\n    this.on;\n\n    /***\r\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\r\n     */\n    this.once;\n\n    /***\r\n     * @type {MapEventHandler<void>}\r\n     */\n    this.un;\n    const optionsInternal = createOptionsInternal(options);\n\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\n    this.renderComplete_;\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.loaded_ = true;\n\n    /** @private */\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\n    this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : DEVICE_PIXEL_RATIO;\n\n    /**\r\n     * @private\r\n     * @type {ReturnType<typeof setTimeout>}\r\n     */\n    this.postRenderTimeoutHandle_;\n\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n    this.animationDelayKey_;\n\n    /**\r\n     * @private\r\n     */\n    this.animationDelay_ = this.animationDelay_.bind(this);\n\n    /**\r\n     * @private\r\n     * @type {import(\"./transform.js\").Transform}\r\n     */\n    this.coordinateToPixelTransform_ = createTransform();\n\n    /**\r\n     * @private\r\n     * @type {import(\"./transform.js\").Transform}\r\n     */\n    this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.frameIndex_ = 0;\n\n    /**\r\n     * @private\r\n     * @type {?FrameState}\r\n     */\n    this.frameState_ = null;\n\n    /**\r\n     * The extent at the previous 'moveend' event.\r\n     * @private\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */\n    this.previousExtent_ = null;\n\n    /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\n    this.viewPropertyListenerKey_ = null;\n\n    /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\n    this.viewChangeListenerKey_ = null;\n\n    /**\r\n     * @private\r\n     * @type {?Array<import(\"./events.js\").EventsKey>}\r\n     */\n    this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n\n    /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.style.position = 'absolute';\n    this.overlayContainer_.style.zIndex = '0';\n    this.overlayContainer_.style.width = '100%';\n    this.overlayContainer_.style.height = '100%';\n    this.overlayContainer_.style.pointerEvents = 'none';\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n\n    /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.style.position = 'absolute';\n    this.overlayContainerStopEvent_.style.zIndex = '0';\n    this.overlayContainerStopEvent_.style.width = '100%';\n    this.overlayContainerStopEvent_.style.height = '100%';\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n\n    /**\r\n     * @private\r\n     * @type {MapBrowserEventHandler}\r\n     */\n    this.mapBrowserEventHandler_ = null;\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.moveTolerance_ = options.moveTolerance;\n\n    /**\r\n     * @private\r\n     * @type {HTMLElement|Document}\r\n     */\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\r\n     * @private\r\n     * @type {?Array<import(\"./events.js\").EventsKey>}\r\n     */\n    this.targetChangeHandlerKeys_ = null;\n\n    /**\r\n     * @private\r\n     * @type {HTMLElement|null}\r\n     */\n    this.targetElement_ = null;\n\n    /**\r\n     * @type {ResizeObserver}\r\n     */\n    this.resizeObserver_ = new ResizeObserver(() => this.updateSize());\n\n    /**\r\n     * @type {Collection<import(\"./control/Control.js\").default>}\r\n     * @protected\r\n     */\n    this.controls = optionsInternal.controls || defaultControls();\n\n    /**\r\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\r\n     * @protected\r\n     */\n    this.interactions = optionsInternal.interactions || defaultInteractions({\n      onFocusOnly: true\n    });\n\n    /**\r\n     * @type {Collection<import(\"./Overlay.js\").default>}\r\n     * @private\r\n     */\n    this.overlays_ = optionsInternal.overlays;\n\n    /**\r\n     * A lookup of overlays by id.\r\n     * @private\r\n     * @type {Object<string, import(\"./Overlay.js\").default>}\r\n     */\n    this.overlayIdIndex_ = {};\n\n    /**\r\n     * @type {import(\"./renderer/Map.js\").default|null}\r\n     * @private\r\n     */\n    this.renderer_ = null;\n\n    /**\r\n     * @private\r\n     * @type {!Array<PostRenderFunction>}\r\n     */\n    this.postRenderFunctions_ = [];\n\n    /**\r\n     * @private\r\n     * @type {TileQueue}\r\n     */\n    this.tileQueue_ = new TileQueue(this.getTilePriority.bind(this), this.handleTileChange_.bind(this));\n    this.addChangeListener(MapProperty.LAYERGROUP, this.handleLayerGroupChanged_);\n    this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);\n    this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);\n    this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    this.setProperties(optionsInternal.values);\n    const map = this;\n    if (options.view && !(options.view instanceof View)) {\n      options.view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n    this.controls.addEventListener(CollectionEventType.ADD,\n    /**\r\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\r\n     */\n    event => {\n      event.element.setMap(this);\n    });\n    this.controls.addEventListener(CollectionEventType.REMOVE,\n    /**\r\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\r\n     */\n    event => {\n      event.element.setMap(null);\n    });\n    this.interactions.addEventListener(CollectionEventType.ADD,\n    /**\r\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\r\n     */\n    event => {\n      event.element.setMap(this);\n    });\n    this.interactions.addEventListener(CollectionEventType.REMOVE,\n    /**\r\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\r\n     */\n    event => {\n      event.element.setMap(null);\n    });\n    this.overlays_.addEventListener(CollectionEventType.ADD,\n    /**\r\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\r\n     */\n    event => {\n      this.addOverlayInternal_(event.element);\n    });\n    this.overlays_.addEventListener(CollectionEventType.REMOVE,\n    /**\r\n     * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\r\n     */\n    event => {\n      const id = event.element.getId();\n      if (id !== undefined) {\n        delete this.overlayIdIndex_[id.toString()];\n      }\n      event.element.setMap(null);\n    });\n    this.controls.forEach(\n    /**\r\n     * @param {import(\"./control/Control.js\").default} control Control.\r\n     */\n    control => {\n      control.setMap(this);\n    });\n    this.interactions.forEach(\n    /**\r\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\r\n     */\n    interaction => {\n      interaction.setMap(this);\n    });\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n  }\n\n  /**\r\n   * Add the given control to the map.\r\n   * @param {import(\"./control/Control.js\").default} control Control.\r\n   * @api\r\n   */\n  addControl(control) {\n    this.getControls().push(control);\n  }\n\n  /**\r\n   * Add the given interaction to the map. If you want to add an interaction\r\n   * at another point of the collection use `getInteractions()` and the methods\r\n   * available on {@link module:ol/Collection~Collection}. This can be used to\r\n   * stop the event propagation from the handleEvent function. The interactions\r\n   * get to handle the events in the reverse order of this collection.\r\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\r\n   * @api\r\n   */\n  addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  }\n\n  /**\r\n   * Adds the given layer to the top of this map. If you want to add a layer\r\n   * elsewhere in the stack, use `getLayers()` and the methods available on\r\n   * {@link module:ol/Collection~Collection}.\r\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n   * @api\r\n   */\n  addLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  }\n\n  /**\r\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\r\n   * @private\r\n   */\n  handleLayerAdd_(event) {\n    setLayerMapProperty(event.layer, this);\n  }\n\n  /**\r\n   * Add the given overlay to the map.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @api\r\n   */\n  addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  }\n\n  /**\r\n   * This deals with map's overlay collection changes.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @private\r\n   */\n  addOverlayInternal_(overlay) {\n    const id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  }\n\n  /**\r\n   *\r\n   * Clean up.\r\n   */\n  disposeInternal() {\n    this.controls.clear();\n    this.interactions.clear();\n    this.overlays_.clear();\n    this.resizeObserver_.disconnect();\n    this.setTarget(null);\n    super.disposeInternal();\n  }\n\n  /**\r\n   * Detect features that intersect a pixel on the viewport, and execute a\r\n   * callback with each intersecting feature. Layers included in the detection can\r\n   * be configured through the `layerFilter` option in `options`.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\r\n   *     called with two arguments. The first argument is one\r\n   *     {@link module:ol/Feature~Feature feature} or\r\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\r\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\r\n   *     unmanaged layers. To stop detection, callback functions can return a\r\n   *     truthy value.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {T|undefined} Callback result, i.e. the return value of last\r\n   * callback execution, or the first truthy callback return value.\r\n   * @template T\r\n   * @api\r\n   */\n  forEachFeatureAtPixel(pixel, callback, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const layerFilter = options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n  }\n\n  /**\r\n   * Get all features that intersect a pixel on the viewport.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\r\n   * an empty array if none were found.\r\n   * @api\r\n   */\n  getFeaturesAtPixel(pixel, options) {\n    const features = [];\n    this.forEachFeatureAtPixel(pixel, function (feature) {\n      features.push(feature);\n    }, options);\n    return features;\n  }\n\n  /**\r\n   * Get all layers from all layer groups.\r\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\r\n   * @api\r\n   */\n  getAllLayers() {\n    const layers = [];\n    function addLayersFrom(layerGroup) {\n      layerGroup.forEach(function (layer) {\n        if (layer instanceof LayerGroup) {\n          addLayersFrom(layer.getLayers());\n        } else {\n          layers.push(layer);\n        }\n      });\n    }\n    addLayersFrom(this.getLayers());\n    return layers;\n  }\n\n  /**\r\n   * Detect if features intersect a pixel on the viewport. Layers included in the\r\n   * detection can be configured through the `layerFilter` option.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {boolean} Is there a feature at the given pixel?\r\n   * @api\r\n   */\n  hasFeatureAtPixel(pixel, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return false;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const layerFilter = options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n  }\n\n  /**\r\n   * Returns the coordinate in user projection for a browser event.\r\n   * @param {MouseEvent} event Event.\r\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n   * @api\r\n   */\n  getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  }\n\n  /**\r\n   * Returns the coordinate in view projection for a browser event.\r\n   * @param {MouseEvent} event Event.\r\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n   */\n  getEventCoordinateInternal(event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  }\n\n  /**\r\n   * Returns the map pixel position for a browser event relative to the viewport.\r\n   * @param {UIEvent|{clientX: number, clientY: number}} event Event.\r\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\r\n   * @api\r\n   */\n  getEventPixel(event) {\n    const viewport = this.viewport_;\n    const viewportPosition = viewport.getBoundingClientRect();\n    const viewportSize = this.getSize();\n    const scaleX = viewportPosition.width / viewportSize[0];\n    const scaleY = viewportPosition.height / viewportSize[1];\n    const eventPosition =\n    //FIXME Are we really calling this with a TouchEvent anywhere?\n    'changedTouches' in event ? /** @type {TouchEvent} */event.changedTouches[0] : ( /** @type {MouseEvent} */event);\n    return [(eventPosition.clientX - viewportPosition.left) / scaleX, (eventPosition.clientY - viewportPosition.top) / scaleY];\n  }\n\n  /**\r\n   * Get the target in which this map is rendered.\r\n   * Note that this returns what is entered as an option or in setTarget:\r\n   * if that was an element, it returns an element; if a string, it returns that.\r\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\r\n   *     map is rendered in.\r\n   * @observable\r\n   * @api\r\n   */\n  getTarget() {\n    return /** @type {HTMLElement|string|undefined} */(\n      this.get(MapProperty.TARGET)\n    );\n  }\n\n  /**\r\n   * Get the DOM element into which this map is rendered. In contrast to\r\n   * `getTarget` this method always return an `Element`, or `null` if the\r\n   * map has no target.\r\n   * @return {HTMLElement} The element that the map is rendered in.\r\n   * @api\r\n   */\n  getTargetElement() {\n    return this.targetElement_;\n  }\n\n  /**\r\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\r\n   * user projection.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\r\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\r\n   * @api\r\n   */\n  getCoordinateFromPixel(pixel) {\n    return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n  }\n\n  /**\r\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\r\n   * map view projection.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\r\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\r\n   */\n  getCoordinateFromPixelInternal(pixel) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    }\n    return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n  }\n\n  /**\r\n   * Get the map controls. Modifying this collection changes the controls\r\n   * associated with the map.\r\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\r\n   * @api\r\n   */\n  getControls() {\n    return this.controls;\n  }\n\n  /**\r\n   * Get the map overlays. Modifying this collection changes the overlays\r\n   * associated with the map.\r\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\r\n   * @api\r\n   */\n  getOverlays() {\n    return this.overlays_;\n  }\n\n  /**\r\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\r\n   * Note that the index treats string and numeric identifiers as the same. So\r\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\r\n   * @param {string|number} id Overlay identifier.\r\n   * @return {import(\"./Overlay.js\").default|null} Overlay.\r\n   * @api\r\n   */\n  getOverlayById(id) {\n    const overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  }\n\n  /**\r\n   * Get the map interactions. Modifying this collection changes the interactions\r\n   * associated with the map.\r\n   *\r\n   * Interactions are used for e.g. pan, zoom and rotate.\r\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\r\n   * @api\r\n   */\n  getInteractions() {\n    return this.interactions;\n  }\n\n  /**\r\n   * Get the layergroup associated with this map.\r\n   * @return {LayerGroup} A layer group containing the layers in this map.\r\n   * @observable\r\n   * @api\r\n   */\n  getLayerGroup() {\n    return /** @type {LayerGroup} */this.get(MapProperty.LAYERGROUP);\n  }\n\n  /**\r\n   * Clear any existing layers and add layers to the map.\r\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\r\n   * @api\r\n   */\n  setLayers(layers) {\n    const group = this.getLayerGroup();\n    if (layers instanceof Collection) {\n      group.setLayers(layers);\n      return;\n    }\n    const collection = group.getLayers();\n    collection.clear();\n    collection.extend(layers);\n  }\n\n  /**\r\n   * Get the collection of layers associated with this map.\r\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\r\n   * @api\r\n   */\n  getLayers() {\n    const layers = this.getLayerGroup().getLayers();\n    return layers;\n  }\n\n  /**\r\n   * @return {boolean} Layers have sources that are still loading.\r\n   */\n  getLoadingOrNotReady() {\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const state = layerStatesArray[i];\n      if (!state.visible) {\n        continue;\n      }\n      const renderer = state.layer.getRenderer();\n      if (renderer && !renderer.ready) {\n        return true;\n      }\n      const source = state.layer.getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\r\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\r\n   * projection and returns the corresponding pixel.\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\r\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\r\n   * @api\r\n   */\n  getPixelFromCoordinate(coordinate) {\n    const viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  }\n\n  /**\r\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\r\n   * projection and returns the corresponding pixel.\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\r\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\r\n   */\n  getPixelFromCoordinateInternal(coordinate) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    }\n    return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n  }\n\n  /**\r\n   * Get the map renderer.\r\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\r\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\r\n   * Get the size of this map.\r\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\r\n   * @observable\r\n   * @api\r\n   */\n  getSize() {\n    return /** @type {import(\"./size.js\").Size|undefined} */(\n      this.get(MapProperty.SIZE)\n    );\n  }\n\n  /**\r\n   * Get the view associated with this map. A view manages properties such as\r\n   * center and resolution.\r\n   * @return {View} The view that controls this map.\r\n   * @observable\r\n   * @api\r\n   */\n  getView() {\n    return /** @type {View} */this.get(MapProperty.VIEW);\n  }\n\n  /**\r\n   * Get the element that serves as the map viewport.\r\n   * @return {HTMLElement} Viewport.\r\n   * @api\r\n   */\n  getViewport() {\n    return this.viewport_;\n  }\n\n  /**\r\n   * Get the element that serves as the container for overlays.  Elements added to\r\n   * this container will let mousedown and touchstart events through to the map,\r\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\r\n   * events.\r\n   * @return {!HTMLElement} The map's overlay container.\r\n   */\n  getOverlayContainer() {\n    return this.overlayContainer_;\n  }\n\n  /**\r\n   * Get the element that serves as a container for overlays that don't allow\r\n   * event propagation. Elements added to this container won't let mousedown and\r\n   * touchstart events through to the map, so clicks and gestures on an overlay\r\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\r\n   * @return {!HTMLElement} The map's overlay container that stops events.\r\n   */\n  getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  }\n\n  /**\r\n   * @return {!Document} The document where the map is displayed.\r\n   */\n  getOwnerDocument() {\n    const targetElement = this.getTargetElement();\n    return targetElement ? targetElement.ownerDocument : document;\n  }\n\n  /**\r\n   * @param {import(\"./Tile.js\").default} tile Tile.\r\n   * @param {string} tileSourceKey Tile source key.\r\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\r\n   * @param {number} tileResolution Tile resolution.\r\n   * @return {number} Tile priority.\r\n   */\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);\n  }\n\n  /**\r\n   * @param {UIEvent} browserEvent Browser event.\r\n   * @param {string} [type] Type.\r\n   */\n  handleBrowserEvent(browserEvent, type) {\n    type = type || browserEvent.type;\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  }\n\n  /**\r\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\r\n   */\n  handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    const originalEvent = /** @type {PointerEvent} */\n    mapBrowserEvent.originalEvent;\n    const eventType = originalEvent.type;\n    if (eventType === PointerEventType.POINTERDOWN || eventType === EventType.WHEEL || eventType === EventType.KEYDOWN) {\n      const doc = this.getOwnerDocument();\n      const rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : doc;\n      const target = /** @type {Node} */originalEvent.target;\n      if (\n      // Abort if the target is a child of the container for elements whose events are not meant\n      // to be handled by map interactions.\n      this.overlayContainerStopEvent_.contains(target) ||\n      // Abort if the event target is a child of the container that is no longer in the page.\n      // It's possible for the target to no longer be in the page if it has been removed in an\n      // event listener, this might happen in a Control that recreates it's content based on\n      // user interaction either manually or via a render in something like https://reactjs.org/\n      !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) {\n        return;\n      }\n    }\n    mapBrowserEvent.frameState = this.frameState_;\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      const interactionsArray = this.getInteractions().getArray().slice();\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\n        const interaction = interactionsArray[i];\n        if (interaction.getMap() !== this || !interaction.getActive() || !this.getTargetElement()) {\n          continue;\n        }\n        const cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont || mapBrowserEvent.propagationStopped) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\r\n   * @protected\r\n   */\n  handlePostRender() {\n    const frameState = this.frameState_;\n\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    const tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      let maxTotalLoading = this.maxTilesLoading_;\n      let maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        const hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          const lowOnFrameBudget = Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n    if (frameState && this.renderer_ && !frameState.animate) {\n      if (this.renderComplete_ === true) {\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n          this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n        }\n        if (this.loaded_ === false) {\n          this.loaded_ = true;\n          this.dispatchEvent(new MapEvent(MapEventType.LOADEND, this, frameState));\n        }\n      } else if (this.loaded_ === true) {\n        this.loaded_ = false;\n        this.dispatchEvent(new MapEvent(MapEventType.LOADSTART, this, frameState));\n      }\n    }\n    const postRenderFunctions = this.postRenderFunctions_;\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  }\n\n  /**\r\n   * @private\r\n   */\n  handleSizeChanged_() {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n    this.render();\n  }\n\n  /**\r\n   * @private\r\n   */\n  handleTargetChanged_() {\n    if (this.mapBrowserEventHandler_) {\n      for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\n      }\n      this.targetChangeHandlerKeys_ = null;\n      this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);\n      this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    }\n    if (this.targetElement_) {\n      this.resizeObserver_.unobserve(this.targetElement_);\n      const rootNode = this.targetElement_.getRootNode();\n      if (rootNode instanceof ShadowRoot) {\n        this.resizeObserver_.unobserve(rootNode.host);\n      }\n      this.setSize(undefined);\n    }\n\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n    const target = this.getTarget();\n    const targetElement = typeof target === 'string' ? document.getElementById(target) : target;\n    this.targetElement_ = targetElement;\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderTimeoutHandle_ = undefined;\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      if (!this.renderer_) {\n        this.renderer_ = new CompositeMapRenderer(this);\n      }\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, this.moveTolerance_);\n      for (const key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], this.handleMapBrowserEvent.bind(this));\n      }\n      this.viewport_.addEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_, false);\n      this.viewport_.addEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_, PASSIVE_EVENT_LISTENERS ? {\n        passive: false\n      } : false);\n      const keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;\n      this.targetChangeHandlerKeys_ = [listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this), listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)];\n      const rootNode = targetElement.getRootNode();\n      if (rootNode instanceof ShadowRoot) {\n        this.resizeObserver_.observe(rootNode.host);\n      }\n      this.resizeObserver_.observe(targetElement);\n    }\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  }\n\n  /**\r\n   * @private\r\n   */\n  handleTileChange_() {\n    this.render();\n  }\n\n  /**\r\n   * @private\r\n   */\n  handleViewPropertyChanged_() {\n    this.render();\n  }\n\n  /**\r\n   * @private\r\n   */\n  handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    const view = this.getView();\n    if (view) {\n      this.updateViewportSize_(this.getSize());\n      this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n      this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n      view.resolveConstraints(0);\n    }\n    this.render();\n  }\n\n  /**\r\n   * @private\r\n   */\n  handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    const layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n      this.layerGroupPropertyListenerKeys_ = [listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this), listen(layerGroup, EventType.CHANGE, this.render, this), listen(layerGroup, 'addlayer', this.handleLayerAdd_, this), listen(layerGroup, 'removelayer', this.handleLayerRemove_, this)];\n    }\n    this.render();\n  }\n\n  /**\r\n   * @return {boolean} Is rendered.\r\n   */\n  isRendered() {\n    return !!this.frameState_;\n  }\n\n  /**\r\n   * @private\r\n   */\n  animationDelay_() {\n    this.animationDelayKey_ = undefined;\n    this.renderFrame_(Date.now());\n  }\n\n  /**\r\n   * Requests an immediate render in a synchronous manner.\r\n   * @api\r\n   */\n  renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  }\n\n  /**\r\n   * Redraws all text after new fonts have loaded\r\n   */\n  redrawText() {\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\n      const layer = layerStates[i].layer;\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  }\n\n  /**\r\n   * Request a map rendering (at the next animation frame).\r\n   * @api\r\n   */\n  render() {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  }\n\n  /**\r\n   * Remove the given control from the map.\r\n   * @param {import(\"./control/Control.js\").default} control Control.\r\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\r\n   *     if the control was not found).\r\n   * @api\r\n   */\n  removeControl(control) {\n    return this.getControls().remove(control);\n  }\n\n  /**\r\n   * Remove the given interaction from the map.\r\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\r\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\r\n   *     undefined if the interaction was not found).\r\n   * @api\r\n   */\n  removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  }\n\n  /**\r\n   * Removes the given layer from the map.\r\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\r\n   *     layer was not found).\r\n   * @api\r\n   */\n  removeLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  }\n\n  /**\r\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\r\n   * @private\r\n   */\n  handleLayerRemove_(event) {\n    removeLayerMapProperty(event.layer);\n  }\n\n  /**\r\n   * Remove the given overlay from the map.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\r\n   *     if the overlay was not found).\r\n   * @api\r\n   */\n  removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  }\n\n  /**\r\n   * @param {number} time Time.\r\n   * @private\r\n   */\n  renderFrame_(time) {\n    const size = this.getSize();\n    const view = this.getView();\n    const previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    let frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      const viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n      const viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutter: null,\n        extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n        mapId: getUid(this),\n        renderTargets: {}\n      };\n      if (viewState.nextCenter && viewState.nextResolution) {\n        const rotation = isNaN(viewState.nextRotation) ? viewState.rotation : viewState.nextRotation;\n        frameState.nextExtent = getForViewAndSize(viewState.nextCenter, viewState.nextResolution, rotation, size);\n      }\n    }\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n      if (previousFrameState) {\n        const moveStart = !this.previousExtent_ || !isEmpty(this.previousExtent_) && !equalsExtent(frameState.extent, this.previousExtent_);\n        if (moveStart) {\n          this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n      const idle = this.previousExtent_ && !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING] && !equalsExtent(frameState.extent, this.previousExtent_);\n      if (idle) {\n        this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n    this.renderComplete_ = this.hasListener(MapEventType.LOADSTART) || this.hasListener(MapEventType.LOADEND) || this.hasListener(RenderEventType.RENDERCOMPLETE) ? !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady() : undefined;\n    if (!this.postRenderTimeoutHandle_) {\n      this.postRenderTimeoutHandle_ = setTimeout(() => {\n        this.postRenderTimeoutHandle_ = undefined;\n        this.handlePostRender();\n      }, 0);\n    }\n  }\n\n  /**\r\n   * Sets the layergroup of this map.\r\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\r\n   * @observable\r\n   * @api\r\n   */\n  setLayerGroup(layerGroup) {\n    const oldLayerGroup = this.getLayerGroup();\n    if (oldLayerGroup) {\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n    }\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  }\n\n  /**\r\n   * Set the size of this map.\r\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\r\n   * @observable\r\n   * @api\r\n   */\n  setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  }\n\n  /**\r\n   * Set the target element to render this map into.\r\n   * @param {HTMLElement|string} [target] The Element or id of the Element\r\n   *     that the map is rendered in.\r\n   * @observable\r\n   * @api\r\n   */\n  setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  }\n\n  /**\r\n   * Set the view for this map.\r\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\r\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\r\n   * alternative allows view properties to be resolved by sources or other components that load\r\n   * view-related metadata.\r\n   * @observable\r\n   * @api\r\n   */\n  setView(view) {\n    if (!view || view instanceof View) {\n      this.set(MapProperty.VIEW, view);\n      return;\n    }\n    this.set(MapProperty.VIEW, new View());\n    const map = this;\n    view.then(function (viewOptions) {\n      map.setView(new View(viewOptions));\n    });\n  }\n\n  /**\r\n   * Force a recalculation of the map viewport size.  This should be called when\r\n   * third-party code changes the size of the map viewport.\r\n   * @api\r\n   */\n  updateSize() {\n    const targetElement = this.getTargetElement();\n    let size = undefined;\n    if (targetElement) {\n      const computedStyle = getComputedStyle(targetElement);\n      const width = targetElement.offsetWidth - parseFloat(computedStyle['borderLeftWidth']) - parseFloat(computedStyle['paddingLeft']) - parseFloat(computedStyle['paddingRight']) - parseFloat(computedStyle['borderRightWidth']);\n      const height = targetElement.offsetHeight - parseFloat(computedStyle['borderTopWidth']) - parseFloat(computedStyle['paddingTop']) - parseFloat(computedStyle['paddingBottom']) - parseFloat(computedStyle['borderBottomWidth']);\n      if (!isNaN(width) && !isNaN(height)) {\n        size = [width, height];\n        if (!hasArea(size) && !!(targetElement.offsetWidth || targetElement.offsetHeight || targetElement.getClientRects().length)) {\n          warn(\"No map visible because the map container's width or height are 0.\");\n        }\n      }\n    }\n    const oldSize = this.getSize();\n    if (size && (!oldSize || !equals(size, oldSize))) {\n      this.setSize(size);\n      this.updateViewportSize_(size);\n    }\n  }\n\n  /**\r\n   * Recomputes the viewport size and save it on the view object (if any)\r\n   * @param {import(\"./size.js\").Size|undefined} size The size.\r\n   * @private\r\n   */\n  updateViewportSize_(size) {\n    const view = this.getView();\n    if (view) {\n      view.setViewportSize(size);\n    }\n  }\n}\n\n/**\r\n * @param {MapOptions} options Map options.\r\n * @return {MapOptionsInternal} Internal map options.\r\n */\nfunction createOptionsInternal(options) {\n  /**\r\n   * @type {HTMLElement|Document}\r\n   */\n  let keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n  }\n\n  /**\r\n   * @type {Object<string, *>}\r\n   */\n  const values = {};\n  const layerGroup = options.layers && typeof ( /** @type {?} */options.layers.getLayers) === 'function' ? ( /** @type {LayerGroup} */options.layers) : new LayerGroup({\n    layers: ( /** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */\n    options.layers)\n  });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n  values[MapProperty.TARGET] = options.target;\n  values[MapProperty.VIEW] = options.view instanceof View ? options.view : new View();\n\n  /** @type {Collection<import(\"./control/Control.js\").default>} */\n  let controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(typeof ( /** @type {?} */options.controls.getArray) === 'function', 'Expected `controls` to be an array or an `ol/Collection.js`');\n      controls = options.controls;\n    }\n  }\n\n  /** @type {Collection<import(\"./interaction/Interaction\").default>} */\n  let interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(typeof ( /** @type {?} */options.interactions.getArray) === 'function', 'Expected `interactions` to be an array or an `ol/Collection.js`');\n      interactions = options.interactions;\n    }\n  }\n\n  /** @type {Collection<import(\"./Overlay.js\").default>} */\n  let overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(typeof ( /** @type {?} */options.overlays.getArray) === 'function', 'Expected `overlays` to be an array or an `ol/Collection.js`');\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n}\nexport default Map;","map":{"version":3,"names":["BaseObject","Collection","CollectionEventType","CompositeMapRenderer","EventType","Layer","LayerGroup","GroupEvent","MapBrowserEvent","MapBrowserEventHandler","MapBrowserEventType","MapEvent","MapEventType","MapProperty","ObjectEventType","PointerEventType","RenderEventType","TileQueue","getTilePriority","View","ViewHint","DEVICE_PIXEL_RATIO","PASSIVE_EVENT_LISTENERS","TRUE","apply","applyTransform","create","createTransform","assert","clone","createOrUpdateEmpty","equals","equalsExtent","getForViewAndSize","isEmpty","defaults","defaultControls","defaultInteractions","fromUserCoordinate","toUserCoordinate","getUid","hasArea","listen","unlistenByKey","removeNode","warn","removeLayerMapProperty","layer","setMapInternal","getLayers","forEach","setLayerMapProperty","map","layers","getArray","i","ii","length","Map","constructor","options","on","once","un","optionsInternal","createOptionsInternal","renderComplete_","loaded_","boundHandleBrowserEvent_","handleBrowserEvent","bind","maxTilesLoading_","maxTilesLoading","undefined","pixelRatio_","pixelRatio","postRenderTimeoutHandle_","animationDelayKey_","animationDelay_","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","document","createElement","className","window","style","position","overflow","width","height","overlayContainer_","zIndex","pointerEvents","appendChild","overlayContainerStopEvent_","mapBrowserEventHandler_","moveTolerance_","moveTolerance","keyboardEventTarget_","keyboardEventTarget","targetChangeHandlerKeys_","targetElement_","resizeObserver_","ResizeObserver","updateSize","controls","interactions","onFocusOnly","overlays_","overlays","overlayIdIndex_","renderer_","postRenderFunctions_","tileQueue_","handleTileChange_","addChangeListener","LAYERGROUP","handleLayerGroupChanged_","VIEW","handleViewChanged_","SIZE","handleSizeChanged_","TARGET","handleTargetChanged_","setProperties","values","view","then","viewOptions","setView","addEventListener","ADD","event","element","setMap","REMOVE","addOverlayInternal_","id","getId","toString","control","interaction","addControl","getControls","push","addInteraction","getInteractions","addLayer","getLayerGroup","handleLayerAdd_","addOverlay","overlay","getOverlays","disposeInternal","clear","disconnect","setTarget","forEachFeatureAtPixel","pixel","callback","coordinate","getCoordinateFromPixelInternal","hitTolerance","layerFilter","checkWrapped","forEachFeatureAtCoordinate","getFeaturesAtPixel","features","feature","getAllLayers","addLayersFrom","layerGroup","hasFeatureAtPixel","hasFeatureAtCoordinate","getEventCoordinate","getCoordinateFromPixel","getEventPixel","getEventCoordinateInternal","viewport","viewportPosition","getBoundingClientRect","viewportSize","getSize","scaleX","scaleY","eventPosition","changedTouches","clientX","left","clientY","top","getTarget","get","getTargetElement","getView","getProjection","frameState","pixelToCoordinateTransform","slice","getOverlayById","setLayers","group","collection","extend","getLoadingOrNotReady","layerStatesArray","getLayerStatesArray","state","visible","renderer","getRenderer","ready","source","getSource","loading","getPixelFromCoordinate","viewCoordinate","getPixelFromCoordinateInternal","coordinateToPixelTransform","getViewport","getOverlayContainer","getOverlayContainerStopEvent","getOwnerDocument","targetElement","ownerDocument","tile","tileSourceKey","tileCenter","tileResolution","browserEvent","type","mapBrowserEvent","handleMapBrowserEvent","originalEvent","eventType","POINTERDOWN","WHEEL","KEYDOWN","doc","rootNode","getRootNode","target","contains","documentElement","dispatchEvent","interactionsArray","getMap","getActive","cont","handleEvent","propagationStopped","handlePostRender","tileQueue","maxTotalLoading","maxNewLoads","hints","viewHints","ANIMATING","INTERACTING","lowOnFrameBudget","Date","now","time","getTilesLoading","reprioritize","loadMoreTiles","animate","hasListener","RENDERCOMPLETE","dispatchRenderEvent","LOADEND","LOADSTART","postRenderFunctions","getAnimating","resolveConstraints","render","removeEventListener","CONTEXTMENU","dispose","unobserve","ShadowRoot","host","setSize","getElementById","clearTimeout","cancelAnimationFrame","key","passive","KEYPRESS","observe","handleViewPropertyChanged_","updateViewportSize_","PROPERTYCHANGE","CHANGE","handleLayerRemove_","isRendered","renderFrame_","renderSync","redrawText","layerStates","hasRenderer","handleFontsChanged","requestAnimationFrame","removeControl","remove","removeInteraction","removeLayer","removeOverlay","size","previousFrameState","isDef","getHints","viewState","getState","declutter","extent","center","resolution","rotation","index","layerIndex","usedTiles","wantedTiles","mapId","renderTargets","nextCenter","nextResolution","isNaN","nextRotation","nextExtent","renderFrame","Array","prototype","moveStart","MOVESTART","idle","MOVEEND","POSTRENDER","getCount","setTimeout","setLayerGroup","oldLayerGroup","set","computedStyle","getComputedStyle","offsetWidth","parseFloat","offsetHeight","getClientRects","oldSize","setViewportSize","isArray"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/Map.js"],"sourcesContent":["/**\r\n * @module ol/Map\r\n */\r\nimport BaseObject from './Object.js';\r\nimport Collection from './Collection.js';\r\nimport CollectionEventType from './CollectionEventType.js';\r\nimport CompositeMapRenderer from './renderer/Composite.js';\r\nimport EventType from './events/EventType.js';\r\nimport Layer from './layer/Layer.js';\r\nimport LayerGroup, {GroupEvent} from './layer/Group.js';\r\nimport MapBrowserEvent from './MapBrowserEvent.js';\r\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\r\nimport MapBrowserEventType from './MapBrowserEventType.js';\r\nimport MapEvent from './MapEvent.js';\r\nimport MapEventType from './MapEventType.js';\r\nimport MapProperty from './MapProperty.js';\r\nimport ObjectEventType from './ObjectEventType.js';\r\nimport PointerEventType from './pointer/EventType.js';\r\nimport RenderEventType from './render/EventType.js';\r\nimport TileQueue, {getTilePriority} from './TileQueue.js';\r\nimport View from './View.js';\r\nimport ViewHint from './ViewHint.js';\r\nimport {DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS} from './has.js';\r\nimport {TRUE} from './functions.js';\r\nimport {\r\n  apply as applyTransform,\r\n  create as createTransform,\r\n} from './transform.js';\r\nimport {assert} from './asserts.js';\r\nimport {\r\n  clone,\r\n  createOrUpdateEmpty,\r\n  equals as equalsExtent,\r\n  getForViewAndSize,\r\n  isEmpty,\r\n} from './extent.js';\r\nimport {defaults as defaultControls} from './control/defaults.js';\r\nimport {defaults as defaultInteractions} from './interaction/defaults.js';\r\nimport {equals} from './array.js';\r\nimport {fromUserCoordinate, toUserCoordinate} from './proj.js';\r\nimport {getUid} from './util.js';\r\nimport {hasArea} from './size.js';\r\nimport {listen, unlistenByKey} from './events.js';\r\nimport {removeNode} from './dom.js';\r\nimport {warn} from './console.js';\r\n\r\n/**\r\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\r\n * be used in applications.\r\n * @typedef {Object} FrameState\r\n * @property {number} pixelRatio The pixel ratio of the frame.\r\n * @property {number} time The time when rendering of the frame was requested.\r\n * @property {import(\"./View.js\").State} viewState The state of the current view.\r\n * @property {boolean} animate Animate.\r\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\r\n * @property {Object<string, import(\"rbush\").default>|null} declutter Declutter trees by declutter group.\r\n * When null, no decluttering is needed because no layers have decluttering enabled.\r\n * @property {null|import(\"./extent.js\").Extent} extent Extent (in view projection coordinates).\r\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\r\n * @property {number} index Index.\r\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\r\n * @property {number} layerIndex LayerIndex.\r\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\r\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\r\n * @property {import(\"./size.js\").Size} size Size.\r\n * @property {TileQueue} tileQueue TileQueue.\r\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\r\n * @property {Array<number>} viewHints ViewHints.\r\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\r\n * @property {string} mapId The id of the map.\r\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\r\n */\r\n\r\n/**\r\n * @typedef {function(Map, ?FrameState): any} PostRenderFunction\r\n */\r\n\r\n/**\r\n * @typedef {Object} AtPixelOptions\r\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\r\n * function. The filter function will receive one argument, the\r\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\r\n * Only layers which are visible and for which this function returns `true`\r\n * will be tested for features. By default, all visible layers will be tested.\r\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\r\n * inside the radius around the given position will be checked for features.\r\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\r\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\r\n */\r\n\r\n/**\r\n * @typedef {Object} MapOptionsInternal\r\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\r\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\r\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\r\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\r\n * @property {Object<string, *>} values Values.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\r\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\r\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\r\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\r\n */\r\n\r\n/**\r\n * Object literal with config options for the map.\r\n * @typedef {Object} MapOptions\r\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\r\n * Controls initially added to the map. If not specified,\r\n * {@link module:ol/control/defaults.defaults} is used.\r\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\r\n * physical pixels and device-independent pixels (dips) on the device.\r\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\r\n * Interactions that are initially added to the map. If not specified,\r\n * {@link module:ol/interaction/defaults.defaults} is used.\r\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\r\n * listen to keyboard events on. This determines when the `KeyboardPan` and\r\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\r\n * `document` the keyboard interactions will always trigger. If this option is\r\n * not specified, the element the library listens to keyboard events on is the\r\n * map target (i.e. the user-provided div for the map). If this is not\r\n * `document`, the target element needs to be focused for key events to be\r\n * emitted, requiring that the target element has a `tabindex` attribute.\r\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\r\n * Layers. If this is not defined, a map with no layers will be rendered. Note\r\n * that layers are rendered in the order supplied, so if you want, for example,\r\n * a vector layer to appear on top of a tile layer, it must come after the tile\r\n * layer.\r\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\r\n * simultaneously.\r\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\r\n * cursor must move to be detected as a map move event instead of a click.\r\n * Increasing this value can make it easier to click on the map.\r\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\r\n * Overlays initially added to the map. By default, no overlays are added.\r\n * @property {HTMLElement|string} [target] The container for the map, either the\r\n * element itself or the `id` of the element. If not specified at construction\r\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\r\n * rendered. If passed by element, the container can be in a secondary document.\r\n * **Note:** CSS `transform` support for the target element is limited to `scale`.\r\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\r\n * fetched unless this is specified at construction time or through\r\n * {@link module:ol/Map~Map#setView}.\r\n */\r\n\r\n/**\r\n * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n */\r\nfunction removeLayerMapProperty(layer) {\r\n  if (layer instanceof Layer) {\r\n    layer.setMapInternal(null);\r\n    return;\r\n  }\r\n  if (layer instanceof LayerGroup) {\r\n    layer.getLayers().forEach(removeLayerMapProperty);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n * @param {Map} map Map.\r\n */\r\nfunction setLayerMapProperty(layer, map) {\r\n  if (layer instanceof Layer) {\r\n    layer.setMapInternal(map);\r\n    return;\r\n  }\r\n  if (layer instanceof LayerGroup) {\r\n    const layers = layer.getLayers().getArray();\r\n    for (let i = 0, ii = layers.length; i < ii; ++i) {\r\n      setLayerMapProperty(layers[i], map);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * The map is the core component of OpenLayers. For a map to render, a view,\r\n * one or more layers, and a target container are needed:\r\n *\r\n *     import Map from 'ol/Map.js';\r\n *     import View from 'ol/View.js';\r\n *     import TileLayer from 'ol/layer/Tile.js';\r\n *     import OSM from 'ol/source/OSM.js';\r\n *\r\n *     const map = new Map({\r\n *       view: new View({\r\n *         center: [0, 0],\r\n *         zoom: 1,\r\n *       }),\r\n *       layers: [\r\n *         new TileLayer({\r\n *           source: new OSM(),\r\n *         }),\r\n *       ],\r\n *       target: 'map',\r\n *     });\r\n *\r\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\r\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\r\n * element with the id `map`.\r\n *\r\n * The constructor places a viewport container (with CSS class name\r\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\r\n * further elements within the viewport: one with CSS class name\r\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\r\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\r\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\r\n * itself is placed in a further element within the viewport.\r\n *\r\n * Layers are stored as a {@link module:ol/Collection~Collection} in\r\n * layerGroups. A top-level group is provided by the library. This is what is\r\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\r\n * options are added to this group, and `addLayer` and `removeLayer` change the\r\n * layer collection in the group. `getLayers` is a convenience function for\r\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\r\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\r\n * options or added with `addLayer` can be groups, which can contain further\r\n * groups, and so on.\r\n *\r\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\r\n * @fires import(\"./MapEvent.js\").MapEvent\r\n * @fires import(\"./render/Event.js\").default#precompose\r\n * @fires import(\"./render/Event.js\").default#postcompose\r\n * @fires import(\"./render/Event.js\").default#rendercomplete\r\n * @api\r\n */\r\nclass Map extends BaseObject {\r\n  /**\r\n   * @param {MapOptions} [options] Map options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options || {};\r\n\r\n    /***\r\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {MapEventHandler<void>}\r\n     */\r\n    this.un;\r\n\r\n    const optionsInternal = createOptionsInternal(options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.renderComplete_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.loaded_ = true;\r\n\r\n    /** @private */\r\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.maxTilesLoading_ =\r\n      options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ =\r\n      options.pixelRatio !== undefined\r\n        ? options.pixelRatio\r\n        : DEVICE_PIXEL_RATIO;\r\n\r\n    /**\r\n     * @private\r\n     * @type {ReturnType<typeof setTimeout>}\r\n     */\r\n    this.postRenderTimeoutHandle_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.animationDelayKey_;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.animationDelay_ = this.animationDelay_.bind(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./transform.js\").Transform}\r\n     */\r\n    this.coordinateToPixelTransform_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./transform.js\").Transform}\r\n     */\r\n    this.pixelToCoordinateTransform_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.frameIndex_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?FrameState}\r\n     */\r\n    this.frameState_ = null;\r\n\r\n    /**\r\n     * The extent at the previous 'moveend' event.\r\n     * @private\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */\r\n    this.previousExtent_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\r\n    this.viewPropertyListenerKey_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\r\n    this.viewChangeListenerKey_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Array<import(\"./events.js\").EventsKey>}\r\n     */\r\n    this.layerGroupPropertyListenerKeys_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */\r\n    this.viewport_ = document.createElement('div');\r\n    this.viewport_.className =\r\n      'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\r\n    this.viewport_.style.position = 'relative';\r\n    this.viewport_.style.overflow = 'hidden';\r\n    this.viewport_.style.width = '100%';\r\n    this.viewport_.style.height = '100%';\r\n\r\n    /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */\r\n    this.overlayContainer_ = document.createElement('div');\r\n    this.overlayContainer_.style.position = 'absolute';\r\n    this.overlayContainer_.style.zIndex = '0';\r\n    this.overlayContainer_.style.width = '100%';\r\n    this.overlayContainer_.style.height = '100%';\r\n    this.overlayContainer_.style.pointerEvents = 'none';\r\n    this.overlayContainer_.className = 'ol-overlaycontainer';\r\n    this.viewport_.appendChild(this.overlayContainer_);\r\n\r\n    /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */\r\n    this.overlayContainerStopEvent_ = document.createElement('div');\r\n    this.overlayContainerStopEvent_.style.position = 'absolute';\r\n    this.overlayContainerStopEvent_.style.zIndex = '0';\r\n    this.overlayContainerStopEvent_.style.width = '100%';\r\n    this.overlayContainerStopEvent_.style.height = '100%';\r\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\r\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\r\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\r\n\r\n    /**\r\n     * @private\r\n     * @type {MapBrowserEventHandler}\r\n     */\r\n    this.mapBrowserEventHandler_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.moveTolerance_ = options.moveTolerance;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement|Document}\r\n     */\r\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Array<import(\"./events.js\").EventsKey>}\r\n     */\r\n    this.targetChangeHandlerKeys_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.targetElement_ = null;\r\n\r\n    /**\r\n     * @type {ResizeObserver}\r\n     */\r\n    this.resizeObserver_ = new ResizeObserver(() => this.updateSize());\r\n\r\n    /**\r\n     * @type {Collection<import(\"./control/Control.js\").default>}\r\n     * @protected\r\n     */\r\n    this.controls = optionsInternal.controls || defaultControls();\r\n\r\n    /**\r\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\r\n     * @protected\r\n     */\r\n    this.interactions =\r\n      optionsInternal.interactions ||\r\n      defaultInteractions({\r\n        onFocusOnly: true,\r\n      });\r\n\r\n    /**\r\n     * @type {Collection<import(\"./Overlay.js\").default>}\r\n     * @private\r\n     */\r\n    this.overlays_ = optionsInternal.overlays;\r\n\r\n    /**\r\n     * A lookup of overlays by id.\r\n     * @private\r\n     * @type {Object<string, import(\"./Overlay.js\").default>}\r\n     */\r\n    this.overlayIdIndex_ = {};\r\n\r\n    /**\r\n     * @type {import(\"./renderer/Map.js\").default|null}\r\n     * @private\r\n     */\r\n    this.renderer_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array<PostRenderFunction>}\r\n     */\r\n    this.postRenderFunctions_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {TileQueue}\r\n     */\r\n    this.tileQueue_ = new TileQueue(\r\n      this.getTilePriority.bind(this),\r\n      this.handleTileChange_.bind(this),\r\n    );\r\n\r\n    this.addChangeListener(\r\n      MapProperty.LAYERGROUP,\r\n      this.handleLayerGroupChanged_,\r\n    );\r\n    this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);\r\n    this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);\r\n    this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);\r\n\r\n    // setProperties will trigger the rendering of the map if the map\r\n    // is \"defined\" already.\r\n    this.setProperties(optionsInternal.values);\r\n\r\n    const map = this;\r\n    if (options.view && !(options.view instanceof View)) {\r\n      options.view.then(function (viewOptions) {\r\n        map.setView(new View(viewOptions));\r\n      });\r\n    }\r\n\r\n    this.controls.addEventListener(\r\n      CollectionEventType.ADD,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\r\n       */\r\n      (event) => {\r\n        event.element.setMap(this);\r\n      },\r\n    );\r\n\r\n    this.controls.addEventListener(\r\n      CollectionEventType.REMOVE,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\r\n       */\r\n      (event) => {\r\n        event.element.setMap(null);\r\n      },\r\n    );\r\n\r\n    this.interactions.addEventListener(\r\n      CollectionEventType.ADD,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\r\n       */\r\n      (event) => {\r\n        event.element.setMap(this);\r\n      },\r\n    );\r\n\r\n    this.interactions.addEventListener(\r\n      CollectionEventType.REMOVE,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\r\n       */\r\n      (event) => {\r\n        event.element.setMap(null);\r\n      },\r\n    );\r\n\r\n    this.overlays_.addEventListener(\r\n      CollectionEventType.ADD,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\r\n       */\r\n      (event) => {\r\n        this.addOverlayInternal_(event.element);\r\n      },\r\n    );\r\n\r\n    this.overlays_.addEventListener(\r\n      CollectionEventType.REMOVE,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\r\n       */\r\n      (event) => {\r\n        const id = event.element.getId();\r\n        if (id !== undefined) {\r\n          delete this.overlayIdIndex_[id.toString()];\r\n        }\r\n        event.element.setMap(null);\r\n      },\r\n    );\r\n\r\n    this.controls.forEach(\r\n      /**\r\n       * @param {import(\"./control/Control.js\").default} control Control.\r\n       */\r\n      (control) => {\r\n        control.setMap(this);\r\n      },\r\n    );\r\n\r\n    this.interactions.forEach(\r\n      /**\r\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\r\n       */\r\n      (interaction) => {\r\n        interaction.setMap(this);\r\n      },\r\n    );\r\n\r\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Add the given control to the map.\r\n   * @param {import(\"./control/Control.js\").default} control Control.\r\n   * @api\r\n   */\r\n  addControl(control) {\r\n    this.getControls().push(control);\r\n  }\r\n\r\n  /**\r\n   * Add the given interaction to the map. If you want to add an interaction\r\n   * at another point of the collection use `getInteractions()` and the methods\r\n   * available on {@link module:ol/Collection~Collection}. This can be used to\r\n   * stop the event propagation from the handleEvent function. The interactions\r\n   * get to handle the events in the reverse order of this collection.\r\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\r\n   * @api\r\n   */\r\n  addInteraction(interaction) {\r\n    this.getInteractions().push(interaction);\r\n  }\r\n\r\n  /**\r\n   * Adds the given layer to the top of this map. If you want to add a layer\r\n   * elsewhere in the stack, use `getLayers()` and the methods available on\r\n   * {@link module:ol/Collection~Collection}.\r\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n   * @api\r\n   */\r\n  addLayer(layer) {\r\n    const layers = this.getLayerGroup().getLayers();\r\n    layers.push(layer);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\r\n   * @private\r\n   */\r\n  handleLayerAdd_(event) {\r\n    setLayerMapProperty(event.layer, this);\r\n  }\r\n\r\n  /**\r\n   * Add the given overlay to the map.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @api\r\n   */\r\n  addOverlay(overlay) {\r\n    this.getOverlays().push(overlay);\r\n  }\r\n\r\n  /**\r\n   * This deals with map's overlay collection changes.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @private\r\n   */\r\n  addOverlayInternal_(overlay) {\r\n    const id = overlay.getId();\r\n    if (id !== undefined) {\r\n      this.overlayIdIndex_[id.toString()] = overlay;\r\n    }\r\n    overlay.setMap(this);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    this.controls.clear();\r\n    this.interactions.clear();\r\n    this.overlays_.clear();\r\n    this.resizeObserver_.disconnect();\r\n    this.setTarget(null);\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * Detect features that intersect a pixel on the viewport, and execute a\r\n   * callback with each intersecting feature. Layers included in the detection can\r\n   * be configured through the `layerFilter` option in `options`.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\r\n   *     called with two arguments. The first argument is one\r\n   *     {@link module:ol/Feature~Feature feature} or\r\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\r\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\r\n   *     unmanaged layers. To stop detection, callback functions can return a\r\n   *     truthy value.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {T|undefined} Callback result, i.e. the return value of last\r\n   * callback execution, or the first truthy callback return value.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeatureAtPixel(pixel, callback, options) {\r\n    if (!this.frameState_ || !this.renderer_) {\r\n      return;\r\n    }\r\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\r\n    options = options !== undefined ? options : {};\r\n    const hitTolerance =\r\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\r\n    const layerFilter =\r\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\r\n    const checkWrapped = options.checkWrapped !== false;\r\n    return this.renderer_.forEachFeatureAtCoordinate(\r\n      coordinate,\r\n      this.frameState_,\r\n      hitTolerance,\r\n      checkWrapped,\r\n      callback,\r\n      null,\r\n      layerFilter,\r\n      null,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get all features that intersect a pixel on the viewport.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\r\n   * an empty array if none were found.\r\n   * @api\r\n   */\r\n  getFeaturesAtPixel(pixel, options) {\r\n    const features = [];\r\n    this.forEachFeatureAtPixel(\r\n      pixel,\r\n      function (feature) {\r\n        features.push(feature);\r\n      },\r\n      options,\r\n    );\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Get all layers from all layer groups.\r\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\r\n   * @api\r\n   */\r\n  getAllLayers() {\r\n    const layers = [];\r\n    function addLayersFrom(layerGroup) {\r\n      layerGroup.forEach(function (layer) {\r\n        if (layer instanceof LayerGroup) {\r\n          addLayersFrom(layer.getLayers());\r\n        } else {\r\n          layers.push(layer);\r\n        }\r\n      });\r\n    }\r\n    addLayersFrom(this.getLayers());\r\n    return layers;\r\n  }\r\n\r\n  /**\r\n   * Detect if features intersect a pixel on the viewport. Layers included in the\r\n   * detection can be configured through the `layerFilter` option.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {boolean} Is there a feature at the given pixel?\r\n   * @api\r\n   */\r\n  hasFeatureAtPixel(pixel, options) {\r\n    if (!this.frameState_ || !this.renderer_) {\r\n      return false;\r\n    }\r\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\r\n    options = options !== undefined ? options : {};\r\n    const layerFilter =\r\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\r\n    const hitTolerance =\r\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\r\n    const checkWrapped = options.checkWrapped !== false;\r\n    return this.renderer_.hasFeatureAtCoordinate(\r\n      coordinate,\r\n      this.frameState_,\r\n      hitTolerance,\r\n      checkWrapped,\r\n      layerFilter,\r\n      null,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinate in user projection for a browser event.\r\n   * @param {MouseEvent} event Event.\r\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n   * @api\r\n   */\r\n  getEventCoordinate(event) {\r\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinate in view projection for a browser event.\r\n   * @param {MouseEvent} event Event.\r\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n   */\r\n  getEventCoordinateInternal(event) {\r\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\r\n  }\r\n\r\n  /**\r\n   * Returns the map pixel position for a browser event relative to the viewport.\r\n   * @param {UIEvent|{clientX: number, clientY: number}} event Event.\r\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\r\n   * @api\r\n   */\r\n  getEventPixel(event) {\r\n    const viewport = this.viewport_;\r\n    const viewportPosition = viewport.getBoundingClientRect();\r\n    const viewportSize = this.getSize();\r\n    const scaleX = viewportPosition.width / viewportSize[0];\r\n    const scaleY = viewportPosition.height / viewportSize[1];\r\n    const eventPosition =\r\n      //FIXME Are we really calling this with a TouchEvent anywhere?\r\n      'changedTouches' in event\r\n        ? /** @type {TouchEvent} */ (event).changedTouches[0]\r\n        : /** @type {MouseEvent} */ (event);\r\n\r\n    return [\r\n      (eventPosition.clientX - viewportPosition.left) / scaleX,\r\n      (eventPosition.clientY - viewportPosition.top) / scaleY,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get the target in which this map is rendered.\r\n   * Note that this returns what is entered as an option or in setTarget:\r\n   * if that was an element, it returns an element; if a string, it returns that.\r\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\r\n   *     map is rendered in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getTarget() {\r\n    return /** @type {HTMLElement|string|undefined} */ (\r\n      this.get(MapProperty.TARGET)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the DOM element into which this map is rendered. In contrast to\r\n   * `getTarget` this method always return an `Element`, or `null` if the\r\n   * map has no target.\r\n   * @return {HTMLElement} The element that the map is rendered in.\r\n   * @api\r\n   */\r\n  getTargetElement() {\r\n    return this.targetElement_;\r\n  }\r\n\r\n  /**\r\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\r\n   * user projection.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\r\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\r\n   * @api\r\n   */\r\n  getCoordinateFromPixel(pixel) {\r\n    return toUserCoordinate(\r\n      this.getCoordinateFromPixelInternal(pixel),\r\n      this.getView().getProjection(),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\r\n   * map view projection.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\r\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\r\n   */\r\n  getCoordinateFromPixelInternal(pixel) {\r\n    const frameState = this.frameState_;\r\n    if (!frameState) {\r\n      return null;\r\n    }\r\n    return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\r\n  }\r\n\r\n  /**\r\n   * Get the map controls. Modifying this collection changes the controls\r\n   * associated with the map.\r\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\r\n   * @api\r\n   */\r\n  getControls() {\r\n    return this.controls;\r\n  }\r\n\r\n  /**\r\n   * Get the map overlays. Modifying this collection changes the overlays\r\n   * associated with the map.\r\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\r\n   * @api\r\n   */\r\n  getOverlays() {\r\n    return this.overlays_;\r\n  }\r\n\r\n  /**\r\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\r\n   * Note that the index treats string and numeric identifiers as the same. So\r\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\r\n   * @param {string|number} id Overlay identifier.\r\n   * @return {import(\"./Overlay.js\").default|null} Overlay.\r\n   * @api\r\n   */\r\n  getOverlayById(id) {\r\n    const overlay = this.overlayIdIndex_[id.toString()];\r\n    return overlay !== undefined ? overlay : null;\r\n  }\r\n\r\n  /**\r\n   * Get the map interactions. Modifying this collection changes the interactions\r\n   * associated with the map.\r\n   *\r\n   * Interactions are used for e.g. pan, zoom and rotate.\r\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\r\n   * @api\r\n   */\r\n  getInteractions() {\r\n    return this.interactions;\r\n  }\r\n\r\n  /**\r\n   * Get the layergroup associated with this map.\r\n   * @return {LayerGroup} A layer group containing the layers in this map.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getLayerGroup() {\r\n    return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));\r\n  }\r\n\r\n  /**\r\n   * Clear any existing layers and add layers to the map.\r\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\r\n   * @api\r\n   */\r\n  setLayers(layers) {\r\n    const group = this.getLayerGroup();\r\n    if (layers instanceof Collection) {\r\n      group.setLayers(layers);\r\n      return;\r\n    }\r\n\r\n    const collection = group.getLayers();\r\n    collection.clear();\r\n    collection.extend(layers);\r\n  }\r\n\r\n  /**\r\n   * Get the collection of layers associated with this map.\r\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\r\n   * @api\r\n   */\r\n  getLayers() {\r\n    const layers = this.getLayerGroup().getLayers();\r\n    return layers;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Layers have sources that are still loading.\r\n   */\r\n  getLoadingOrNotReady() {\r\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\r\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\r\n      const state = layerStatesArray[i];\r\n      if (!state.visible) {\r\n        continue;\r\n      }\r\n      const renderer = state.layer.getRenderer();\r\n      if (renderer && !renderer.ready) {\r\n        return true;\r\n      }\r\n      const source = state.layer.getSource();\r\n      if (source && source.loading) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\r\n   * projection and returns the corresponding pixel.\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\r\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\r\n   * @api\r\n   */\r\n  getPixelFromCoordinate(coordinate) {\r\n    const viewCoordinate = fromUserCoordinate(\r\n      coordinate,\r\n      this.getView().getProjection(),\r\n    );\r\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\r\n  }\r\n\r\n  /**\r\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\r\n   * projection and returns the corresponding pixel.\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\r\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\r\n   */\r\n  getPixelFromCoordinateInternal(coordinate) {\r\n    const frameState = this.frameState_;\r\n    if (!frameState) {\r\n      return null;\r\n    }\r\n    return applyTransform(\r\n      frameState.coordinateToPixelTransform,\r\n      coordinate.slice(0, 2),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the map renderer.\r\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\r\n   */\r\n  getRenderer() {\r\n    return this.renderer_;\r\n  }\r\n\r\n  /**\r\n   * Get the size of this map.\r\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getSize() {\r\n    return /** @type {import(\"./size.js\").Size|undefined} */ (\r\n      this.get(MapProperty.SIZE)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the view associated with this map. A view manages properties such as\r\n   * center and resolution.\r\n   * @return {View} The view that controls this map.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getView() {\r\n    return /** @type {View} */ (this.get(MapProperty.VIEW));\r\n  }\r\n\r\n  /**\r\n   * Get the element that serves as the map viewport.\r\n   * @return {HTMLElement} Viewport.\r\n   * @api\r\n   */\r\n  getViewport() {\r\n    return this.viewport_;\r\n  }\r\n\r\n  /**\r\n   * Get the element that serves as the container for overlays.  Elements added to\r\n   * this container will let mousedown and touchstart events through to the map,\r\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\r\n   * events.\r\n   * @return {!HTMLElement} The map's overlay container.\r\n   */\r\n  getOverlayContainer() {\r\n    return this.overlayContainer_;\r\n  }\r\n\r\n  /**\r\n   * Get the element that serves as a container for overlays that don't allow\r\n   * event propagation. Elements added to this container won't let mousedown and\r\n   * touchstart events through to the map, so clicks and gestures on an overlay\r\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\r\n   * @return {!HTMLElement} The map's overlay container that stops events.\r\n   */\r\n  getOverlayContainerStopEvent() {\r\n    return this.overlayContainerStopEvent_;\r\n  }\r\n\r\n  /**\r\n   * @return {!Document} The document where the map is displayed.\r\n   */\r\n  getOwnerDocument() {\r\n    const targetElement = this.getTargetElement();\r\n    return targetElement ? targetElement.ownerDocument : document;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Tile.js\").default} tile Tile.\r\n   * @param {string} tileSourceKey Tile source key.\r\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\r\n   * @param {number} tileResolution Tile resolution.\r\n   * @return {number} Tile priority.\r\n   */\r\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\r\n    return getTilePriority(\r\n      this.frameState_,\r\n      tile,\r\n      tileSourceKey,\r\n      tileCenter,\r\n      tileResolution,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {UIEvent} browserEvent Browser event.\r\n   * @param {string} [type] Type.\r\n   */\r\n  handleBrowserEvent(browserEvent, type) {\r\n    type = type || browserEvent.type;\r\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\r\n    this.handleMapBrowserEvent(mapBrowserEvent);\r\n  }\r\n\r\n  /**\r\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\r\n   */\r\n  handleMapBrowserEvent(mapBrowserEvent) {\r\n    if (!this.frameState_) {\r\n      // With no view defined, we cannot translate pixels into geographical\r\n      // coordinates so interactions cannot be used.\r\n      return;\r\n    }\r\n    const originalEvent = /** @type {PointerEvent} */ (\r\n      mapBrowserEvent.originalEvent\r\n    );\r\n    const eventType = originalEvent.type;\r\n    if (\r\n      eventType === PointerEventType.POINTERDOWN ||\r\n      eventType === EventType.WHEEL ||\r\n      eventType === EventType.KEYDOWN\r\n    ) {\r\n      const doc = this.getOwnerDocument();\r\n      const rootNode = this.viewport_.getRootNode\r\n        ? this.viewport_.getRootNode()\r\n        : doc;\r\n      const target = /** @type {Node} */ (originalEvent.target);\r\n      if (\r\n        // Abort if the target is a child of the container for elements whose events are not meant\r\n        // to be handled by map interactions.\r\n        this.overlayContainerStopEvent_.contains(target) ||\r\n        // Abort if the event target is a child of the container that is no longer in the page.\r\n        // It's possible for the target to no longer be in the page if it has been removed in an\r\n        // event listener, this might happen in a Control that recreates it's content based on\r\n        // user interaction either manually or via a render in something like https://reactjs.org/\r\n        !(rootNode === doc ? doc.documentElement : rootNode).contains(target)\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n    mapBrowserEvent.frameState = this.frameState_;\r\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\r\n      const interactionsArray = this.getInteractions().getArray().slice();\r\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\r\n        const interaction = interactionsArray[i];\r\n        if (\r\n          interaction.getMap() !== this ||\r\n          !interaction.getActive() ||\r\n          !this.getTargetElement()\r\n        ) {\r\n          continue;\r\n        }\r\n        const cont = interaction.handleEvent(mapBrowserEvent);\r\n        if (!cont || mapBrowserEvent.propagationStopped) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handlePostRender() {\r\n    const frameState = this.frameState_;\r\n\r\n    // Manage the tile queue\r\n    // Image loads are expensive and a limited resource, so try to use them\r\n    // efficiently:\r\n    // * When the view is static we allow a large number of parallel tile loads\r\n    //   to complete the frame as quickly as possible.\r\n    // * When animating or interacting, image loads can cause janks, so we reduce\r\n    //   the maximum number of loads per frame and limit the number of parallel\r\n    //   tile loads to remain reactive to view changes and to reduce the chance of\r\n    //   loading tiles that will quickly disappear from view.\r\n    const tileQueue = this.tileQueue_;\r\n    if (!tileQueue.isEmpty()) {\r\n      let maxTotalLoading = this.maxTilesLoading_;\r\n      let maxNewLoads = maxTotalLoading;\r\n      if (frameState) {\r\n        const hints = frameState.viewHints;\r\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\r\n          const lowOnFrameBudget = Date.now() - frameState.time > 8;\r\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\r\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\r\n        }\r\n      }\r\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\r\n        tileQueue.reprioritize(); // FIXME only call if view has changed\r\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\r\n      }\r\n    }\r\n\r\n    if (frameState && this.renderer_ && !frameState.animate) {\r\n      if (this.renderComplete_ === true) {\r\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\r\n          this.renderer_.dispatchRenderEvent(\r\n            RenderEventType.RENDERCOMPLETE,\r\n            frameState,\r\n          );\r\n        }\r\n        if (this.loaded_ === false) {\r\n          this.loaded_ = true;\r\n          this.dispatchEvent(\r\n            new MapEvent(MapEventType.LOADEND, this, frameState),\r\n          );\r\n        }\r\n      } else if (this.loaded_ === true) {\r\n        this.loaded_ = false;\r\n        this.dispatchEvent(\r\n          new MapEvent(MapEventType.LOADSTART, this, frameState),\r\n        );\r\n      }\r\n    }\r\n\r\n    const postRenderFunctions = this.postRenderFunctions_;\r\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\r\n      postRenderFunctions[i](this, frameState);\r\n    }\r\n    postRenderFunctions.length = 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleSizeChanged_() {\r\n    if (this.getView() && !this.getView().getAnimating()) {\r\n      this.getView().resolveConstraints(0);\r\n    }\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleTargetChanged_() {\r\n    if (this.mapBrowserEventHandler_) {\r\n      for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\r\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\r\n      }\r\n      this.targetChangeHandlerKeys_ = null;\r\n      this.viewport_.removeEventListener(\r\n        EventType.CONTEXTMENU,\r\n        this.boundHandleBrowserEvent_,\r\n      );\r\n      this.viewport_.removeEventListener(\r\n        EventType.WHEEL,\r\n        this.boundHandleBrowserEvent_,\r\n      );\r\n      this.mapBrowserEventHandler_.dispose();\r\n      this.mapBrowserEventHandler_ = null;\r\n      removeNode(this.viewport_);\r\n    }\r\n\r\n    if (this.targetElement_) {\r\n      this.resizeObserver_.unobserve(this.targetElement_);\r\n      const rootNode = this.targetElement_.getRootNode();\r\n      if (rootNode instanceof ShadowRoot) {\r\n        this.resizeObserver_.unobserve(rootNode.host);\r\n      }\r\n      this.setSize(undefined);\r\n    }\r\n\r\n    // target may be undefined, null, a string or an Element.\r\n    // If it's a string we convert it to an Element before proceeding.\r\n    // If it's not now an Element we remove the viewport from the DOM.\r\n    // If it's an Element we append the viewport element to it.\r\n\r\n    const target = this.getTarget();\r\n    const targetElement =\r\n      typeof target === 'string' ? document.getElementById(target) : target;\r\n    this.targetElement_ = targetElement;\r\n    if (!targetElement) {\r\n      if (this.renderer_) {\r\n        clearTimeout(this.postRenderTimeoutHandle_);\r\n        this.postRenderTimeoutHandle_ = undefined;\r\n        this.postRenderFunctions_.length = 0;\r\n        this.renderer_.dispose();\r\n        this.renderer_ = null;\r\n      }\r\n      if (this.animationDelayKey_) {\r\n        cancelAnimationFrame(this.animationDelayKey_);\r\n        this.animationDelayKey_ = undefined;\r\n      }\r\n    } else {\r\n      targetElement.appendChild(this.viewport_);\r\n      if (!this.renderer_) {\r\n        this.renderer_ = new CompositeMapRenderer(this);\r\n      }\r\n\r\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(\r\n        this,\r\n        this.moveTolerance_,\r\n      );\r\n      for (const key in MapBrowserEventType) {\r\n        this.mapBrowserEventHandler_.addEventListener(\r\n          MapBrowserEventType[key],\r\n          this.handleMapBrowserEvent.bind(this),\r\n        );\r\n      }\r\n      this.viewport_.addEventListener(\r\n        EventType.CONTEXTMENU,\r\n        this.boundHandleBrowserEvent_,\r\n        false,\r\n      );\r\n      this.viewport_.addEventListener(\r\n        EventType.WHEEL,\r\n        this.boundHandleBrowserEvent_,\r\n        PASSIVE_EVENT_LISTENERS ? {passive: false} : false,\r\n      );\r\n\r\n      const keyboardEventTarget = !this.keyboardEventTarget_\r\n        ? targetElement\r\n        : this.keyboardEventTarget_;\r\n      this.targetChangeHandlerKeys_ = [\r\n        listen(\r\n          keyboardEventTarget,\r\n          EventType.KEYDOWN,\r\n          this.handleBrowserEvent,\r\n          this,\r\n        ),\r\n        listen(\r\n          keyboardEventTarget,\r\n          EventType.KEYPRESS,\r\n          this.handleBrowserEvent,\r\n          this,\r\n        ),\r\n      ];\r\n      const rootNode = targetElement.getRootNode();\r\n      if (rootNode instanceof ShadowRoot) {\r\n        this.resizeObserver_.observe(rootNode.host);\r\n      }\r\n      this.resizeObserver_.observe(targetElement);\r\n    }\r\n\r\n    this.updateSize();\r\n    // updateSize calls setSize, so no need to call this.render\r\n    // ourselves here.\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleTileChange_() {\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleViewPropertyChanged_() {\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleViewChanged_() {\r\n    if (this.viewPropertyListenerKey_) {\r\n      unlistenByKey(this.viewPropertyListenerKey_);\r\n      this.viewPropertyListenerKey_ = null;\r\n    }\r\n    if (this.viewChangeListenerKey_) {\r\n      unlistenByKey(this.viewChangeListenerKey_);\r\n      this.viewChangeListenerKey_ = null;\r\n    }\r\n    const view = this.getView();\r\n    if (view) {\r\n      this.updateViewportSize_(this.getSize());\r\n\r\n      this.viewPropertyListenerKey_ = listen(\r\n        view,\r\n        ObjectEventType.PROPERTYCHANGE,\r\n        this.handleViewPropertyChanged_,\r\n        this,\r\n      );\r\n      this.viewChangeListenerKey_ = listen(\r\n        view,\r\n        EventType.CHANGE,\r\n        this.handleViewPropertyChanged_,\r\n        this,\r\n      );\r\n\r\n      view.resolveConstraints(0);\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleLayerGroupChanged_() {\r\n    if (this.layerGroupPropertyListenerKeys_) {\r\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\r\n      this.layerGroupPropertyListenerKeys_ = null;\r\n    }\r\n    const layerGroup = this.getLayerGroup();\r\n    if (layerGroup) {\r\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\r\n      this.layerGroupPropertyListenerKeys_ = [\r\n        listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\r\n        listen(layerGroup, EventType.CHANGE, this.render, this),\r\n        listen(layerGroup, 'addlayer', this.handleLayerAdd_, this),\r\n        listen(layerGroup, 'removelayer', this.handleLayerRemove_, this),\r\n      ];\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is rendered.\r\n   */\r\n  isRendered() {\r\n    return !!this.frameState_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  animationDelay_() {\r\n    this.animationDelayKey_ = undefined;\r\n    this.renderFrame_(Date.now());\r\n  }\r\n\r\n  /**\r\n   * Requests an immediate render in a synchronous manner.\r\n   * @api\r\n   */\r\n  renderSync() {\r\n    if (this.animationDelayKey_) {\r\n      cancelAnimationFrame(this.animationDelayKey_);\r\n    }\r\n    this.animationDelay_();\r\n  }\r\n\r\n  /**\r\n   * Redraws all text after new fonts have loaded\r\n   */\r\n  redrawText() {\r\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\r\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\r\n      const layer = layerStates[i].layer;\r\n      if (layer.hasRenderer()) {\r\n        layer.getRenderer().handleFontsChanged();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request a map rendering (at the next animation frame).\r\n   * @api\r\n   */\r\n  render() {\r\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\r\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the given control from the map.\r\n   * @param {import(\"./control/Control.js\").default} control Control.\r\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\r\n   *     if the control was not found).\r\n   * @api\r\n   */\r\n  removeControl(control) {\r\n    return this.getControls().remove(control);\r\n  }\r\n\r\n  /**\r\n   * Remove the given interaction from the map.\r\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\r\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\r\n   *     undefined if the interaction was not found).\r\n   * @api\r\n   */\r\n  removeInteraction(interaction) {\r\n    return this.getInteractions().remove(interaction);\r\n  }\r\n\r\n  /**\r\n   * Removes the given layer from the map.\r\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\r\n   *     layer was not found).\r\n   * @api\r\n   */\r\n  removeLayer(layer) {\r\n    const layers = this.getLayerGroup().getLayers();\r\n    return layers.remove(layer);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\r\n   * @private\r\n   */\r\n  handleLayerRemove_(event) {\r\n    removeLayerMapProperty(event.layer);\r\n  }\r\n\r\n  /**\r\n   * Remove the given overlay from the map.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\r\n   *     if the overlay was not found).\r\n   * @api\r\n   */\r\n  removeOverlay(overlay) {\r\n    return this.getOverlays().remove(overlay);\r\n  }\r\n\r\n  /**\r\n   * @param {number} time Time.\r\n   * @private\r\n   */\r\n  renderFrame_(time) {\r\n    const size = this.getSize();\r\n    const view = this.getView();\r\n    const previousFrameState = this.frameState_;\r\n    /** @type {?FrameState} */\r\n    let frameState = null;\r\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\r\n      const viewHints = view.getHints(\r\n        this.frameState_ ? this.frameState_.viewHints : undefined,\r\n      );\r\n      const viewState = view.getState();\r\n      frameState = {\r\n        animate: false,\r\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\r\n        declutter: null,\r\n        extent: getForViewAndSize(\r\n          viewState.center,\r\n          viewState.resolution,\r\n          viewState.rotation,\r\n          size,\r\n        ),\r\n        index: this.frameIndex_++,\r\n        layerIndex: 0,\r\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\r\n        pixelRatio: this.pixelRatio_,\r\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\r\n        postRenderFunctions: [],\r\n        size: size,\r\n        tileQueue: this.tileQueue_,\r\n        time: time,\r\n        usedTiles: {},\r\n        viewState: viewState,\r\n        viewHints: viewHints,\r\n        wantedTiles: {},\r\n        mapId: getUid(this),\r\n        renderTargets: {},\r\n      };\r\n      if (viewState.nextCenter && viewState.nextResolution) {\r\n        const rotation = isNaN(viewState.nextRotation)\r\n          ? viewState.rotation\r\n          : viewState.nextRotation;\r\n\r\n        frameState.nextExtent = getForViewAndSize(\r\n          viewState.nextCenter,\r\n          viewState.nextResolution,\r\n          rotation,\r\n          size,\r\n        );\r\n      }\r\n    }\r\n\r\n    this.frameState_ = frameState;\r\n    this.renderer_.renderFrame(frameState);\r\n\r\n    if (frameState) {\r\n      if (frameState.animate) {\r\n        this.render();\r\n      }\r\n      Array.prototype.push.apply(\r\n        this.postRenderFunctions_,\r\n        frameState.postRenderFunctions,\r\n      );\r\n\r\n      if (previousFrameState) {\r\n        const moveStart =\r\n          !this.previousExtent_ ||\r\n          (!isEmpty(this.previousExtent_) &&\r\n            !equalsExtent(frameState.extent, this.previousExtent_));\r\n        if (moveStart) {\r\n          this.dispatchEvent(\r\n            new MapEvent(MapEventType.MOVESTART, this, previousFrameState),\r\n          );\r\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\r\n        }\r\n      }\r\n\r\n      const idle =\r\n        this.previousExtent_ &&\r\n        !frameState.viewHints[ViewHint.ANIMATING] &&\r\n        !frameState.viewHints[ViewHint.INTERACTING] &&\r\n        !equalsExtent(frameState.extent, this.previousExtent_);\r\n\r\n      if (idle) {\r\n        this.dispatchEvent(\r\n          new MapEvent(MapEventType.MOVEEND, this, frameState),\r\n        );\r\n        clone(frameState.extent, this.previousExtent_);\r\n      }\r\n    }\r\n\r\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\r\n\r\n    this.renderComplete_ =\r\n      this.hasListener(MapEventType.LOADSTART) ||\r\n      this.hasListener(MapEventType.LOADEND) ||\r\n      this.hasListener(RenderEventType.RENDERCOMPLETE)\r\n        ? !this.tileQueue_.getTilesLoading() &&\r\n          !this.tileQueue_.getCount() &&\r\n          !this.getLoadingOrNotReady()\r\n        : undefined;\r\n\r\n    if (!this.postRenderTimeoutHandle_) {\r\n      this.postRenderTimeoutHandle_ = setTimeout(() => {\r\n        this.postRenderTimeoutHandle_ = undefined;\r\n        this.handlePostRender();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the layergroup of this map.\r\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setLayerGroup(layerGroup) {\r\n    const oldLayerGroup = this.getLayerGroup();\r\n    if (oldLayerGroup) {\r\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\r\n    }\r\n    this.set(MapProperty.LAYERGROUP, layerGroup);\r\n  }\r\n\r\n  /**\r\n   * Set the size of this map.\r\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setSize(size) {\r\n    this.set(MapProperty.SIZE, size);\r\n  }\r\n\r\n  /**\r\n   * Set the target element to render this map into.\r\n   * @param {HTMLElement|string} [target] The Element or id of the Element\r\n   *     that the map is rendered in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setTarget(target) {\r\n    this.set(MapProperty.TARGET, target);\r\n  }\r\n\r\n  /**\r\n   * Set the view for this map.\r\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\r\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\r\n   * alternative allows view properties to be resolved by sources or other components that load\r\n   * view-related metadata.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setView(view) {\r\n    if (!view || view instanceof View) {\r\n      this.set(MapProperty.VIEW, view);\r\n      return;\r\n    }\r\n    this.set(MapProperty.VIEW, new View());\r\n\r\n    const map = this;\r\n    view.then(function (viewOptions) {\r\n      map.setView(new View(viewOptions));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Force a recalculation of the map viewport size.  This should be called when\r\n   * third-party code changes the size of the map viewport.\r\n   * @api\r\n   */\r\n  updateSize() {\r\n    const targetElement = this.getTargetElement();\r\n\r\n    let size = undefined;\r\n    if (targetElement) {\r\n      const computedStyle = getComputedStyle(targetElement);\r\n      const width =\r\n        targetElement.offsetWidth -\r\n        parseFloat(computedStyle['borderLeftWidth']) -\r\n        parseFloat(computedStyle['paddingLeft']) -\r\n        parseFloat(computedStyle['paddingRight']) -\r\n        parseFloat(computedStyle['borderRightWidth']);\r\n      const height =\r\n        targetElement.offsetHeight -\r\n        parseFloat(computedStyle['borderTopWidth']) -\r\n        parseFloat(computedStyle['paddingTop']) -\r\n        parseFloat(computedStyle['paddingBottom']) -\r\n        parseFloat(computedStyle['borderBottomWidth']);\r\n      if (!isNaN(width) && !isNaN(height)) {\r\n        size = [width, height];\r\n        if (\r\n          !hasArea(size) &&\r\n          !!(\r\n            targetElement.offsetWidth ||\r\n            targetElement.offsetHeight ||\r\n            targetElement.getClientRects().length\r\n          )\r\n        ) {\r\n          warn(\r\n            \"No map visible because the map container's width or height are 0.\",\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    const oldSize = this.getSize();\r\n    if (size && (!oldSize || !equals(size, oldSize))) {\r\n      this.setSize(size);\r\n      this.updateViewportSize_(size);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recomputes the viewport size and save it on the view object (if any)\r\n   * @param {import(\"./size.js\").Size|undefined} size The size.\r\n   * @private\r\n   */\r\n  updateViewportSize_(size) {\r\n    const view = this.getView();\r\n    if (view) {\r\n      view.setViewportSize(size);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {MapOptions} options Map options.\r\n * @return {MapOptionsInternal} Internal map options.\r\n */\r\nfunction createOptionsInternal(options) {\r\n  /**\r\n   * @type {HTMLElement|Document}\r\n   */\r\n  let keyboardEventTarget = null;\r\n  if (options.keyboardEventTarget !== undefined) {\r\n    keyboardEventTarget =\r\n      typeof options.keyboardEventTarget === 'string'\r\n        ? document.getElementById(options.keyboardEventTarget)\r\n        : options.keyboardEventTarget;\r\n  }\r\n\r\n  /**\r\n   * @type {Object<string, *>}\r\n   */\r\n  const values = {};\r\n\r\n  const layerGroup =\r\n    options.layers &&\r\n    typeof (/** @type {?} */ (options.layers).getLayers) === 'function'\r\n      ? /** @type {LayerGroup} */ (options.layers)\r\n      : new LayerGroup({\r\n          layers:\r\n            /** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */ (\r\n              options.layers\r\n            ),\r\n        });\r\n  values[MapProperty.LAYERGROUP] = layerGroup;\r\n\r\n  values[MapProperty.TARGET] = options.target;\r\n\r\n  values[MapProperty.VIEW] =\r\n    options.view instanceof View ? options.view : new View();\r\n\r\n  /** @type {Collection<import(\"./control/Control.js\").default>} */\r\n  let controls;\r\n  if (options.controls !== undefined) {\r\n    if (Array.isArray(options.controls)) {\r\n      controls = new Collection(options.controls.slice());\r\n    } else {\r\n      assert(\r\n        typeof (/** @type {?} */ (options.controls).getArray) === 'function',\r\n        'Expected `controls` to be an array or an `ol/Collection.js`',\r\n      );\r\n      controls = options.controls;\r\n    }\r\n  }\r\n\r\n  /** @type {Collection<import(\"./interaction/Interaction\").default>} */\r\n  let interactions;\r\n  if (options.interactions !== undefined) {\r\n    if (Array.isArray(options.interactions)) {\r\n      interactions = new Collection(options.interactions.slice());\r\n    } else {\r\n      assert(\r\n        typeof (/** @type {?} */ (options.interactions).getArray) ===\r\n          'function',\r\n        'Expected `interactions` to be an array or an `ol/Collection.js`',\r\n      );\r\n      interactions = options.interactions;\r\n    }\r\n  }\r\n\r\n  /** @type {Collection<import(\"./Overlay.js\").default>} */\r\n  let overlays;\r\n  if (options.overlays !== undefined) {\r\n    if (Array.isArray(options.overlays)) {\r\n      overlays = new Collection(options.overlays.slice());\r\n    } else {\r\n      assert(\r\n        typeof (/** @type {?} */ (options.overlays).getArray) === 'function',\r\n        'Expected `overlays` to be an array or an `ol/Collection.js`',\r\n      );\r\n      overlays = options.overlays;\r\n    }\r\n  } else {\r\n    overlays = new Collection();\r\n  }\r\n\r\n  return {\r\n    controls: controls,\r\n    interactions: interactions,\r\n    keyboardEventTarget: keyboardEventTarget,\r\n    overlays: overlays,\r\n    values: values,\r\n  };\r\n}\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}