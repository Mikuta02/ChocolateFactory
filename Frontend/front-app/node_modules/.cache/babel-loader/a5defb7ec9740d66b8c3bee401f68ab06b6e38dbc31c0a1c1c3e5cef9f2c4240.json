{"ast":null,"code":"/**\r\n * @module ol/math\r\n */\n\n/**\r\n * Takes a number and clamps it to within the provided bounds.\r\n * @param {number} value The input number.\r\n * @param {number} min The minimum value to return.\r\n * @param {number} max The maximum value to return.\r\n * @return {number} The input number if it is within bounds, or the nearest\r\n *     number within the bounds.\r\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\r\n * Returns the square of the closest distance between the point (x, y) and the\r\n * line segment (x1, y1) to (x2, y2).\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {number} x1 X1.\r\n * @param {number} y1 Y1.\r\n * @param {number} x2 X2.\r\n * @param {number} y2 Y2.\r\n * @return {number} Squared distance.\r\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\r\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\r\n * @param {number} x1 X1.\r\n * @param {number} y1 Y1.\r\n * @param {number} x2 X2.\r\n * @param {number} y2 Y2.\r\n * @return {number} Squared distance.\r\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\r\n * Solves system of linear equations using Gaussian elimination method.\r\n *\r\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\r\n *                                     in row-major order.\r\n * @return {Array<number>|null} The resulting vector.\r\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\r\n * Converts radians to to degrees.\r\n *\r\n * @param {number} angleInRadians Angle in radians.\r\n * @return {number} Angle in degrees.\r\n */\nexport function toDegrees(angleInRadians) {\n  return angleInRadians * 180 / Math.PI;\n}\n\n/**\r\n * Converts degrees to radians.\r\n *\r\n * @param {number} angleInDegrees Angle in degrees.\r\n * @return {number} Angle in radians.\r\n */\nexport function toRadians(angleInDegrees) {\n  return angleInDegrees * Math.PI / 180;\n}\n\n/**\r\n * Returns the modulo of a / b, depending on the sign of b.\r\n *\r\n * @param {number} a Dividend.\r\n * @param {number} b Divisor.\r\n * @return {number} Modulo.\r\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\r\n * Calculates the linearly interpolated value of x between a and b.\r\n *\r\n * @param {number} a Number\r\n * @param {number} b Number\r\n * @param {number} x Value to be interpolated.\r\n * @return {number} Interpolated value.\r\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n/**\r\n * Returns a number with a limited number of decimal digits.\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The input number with a limited number of decimal digits.\r\n */\nexport function toFixed(n, decimals) {\n  const factor = Math.pow(10, decimals);\n  return Math.round(n * factor) / factor;\n}\n\n/**\r\n * Rounds a number to the nearest integer value considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The nearest integer.\r\n */\nexport function round(n, decimals) {\n  return Math.round(toFixed(n, decimals));\n}\n\n/**\r\n * Rounds a number to the next smaller integer considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The next smaller integer.\r\n */\nexport function floor(n, decimals) {\n  return Math.floor(toFixed(n, decimals));\n}\n\n/**\r\n * Rounds a number to the next bigger integer considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The next bigger integer.\r\n */\nexport function ceil(n, decimals) {\n  return Math.ceil(toFixed(n, decimals));\n}","map":{"version":3,"names":["clamp","value","min","max","Math","squaredSegmentDistance","x","y","x1","y1","x2","y2","dx","dy","t","squaredDistance","solveLinearSystem","mat","n","length","i","maxRow","maxEl","abs","r","absValue","tmp","j","coef","k","Array","l","m","toDegrees","angleInRadians","PI","toRadians","angleInDegrees","modulo","a","b","lerp","toFixed","decimals","factor","pow","round","floor","ceil"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/math.js"],"sourcesContent":["/**\r\n * @module ol/math\r\n */\r\n\r\n/**\r\n * Takes a number and clamps it to within the provided bounds.\r\n * @param {number} value The input number.\r\n * @param {number} min The minimum value to return.\r\n * @param {number} max The maximum value to return.\r\n * @return {number} The input number if it is within bounds, or the nearest\r\n *     number within the bounds.\r\n */\r\nexport function clamp(value, min, max) {\r\n  return Math.min(Math.max(value, min), max);\r\n}\r\n\r\n/**\r\n * Returns the square of the closest distance between the point (x, y) and the\r\n * line segment (x1, y1) to (x2, y2).\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {number} x1 X1.\r\n * @param {number} y1 Y1.\r\n * @param {number} x2 X2.\r\n * @param {number} y2 Y2.\r\n * @return {number} Squared distance.\r\n */\r\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  if (dx !== 0 || dy !== 0) {\r\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\r\n    if (t > 1) {\r\n      x1 = x2;\r\n      y1 = y2;\r\n    } else if (t > 0) {\r\n      x1 += dx * t;\r\n      y1 += dy * t;\r\n    }\r\n  }\r\n  return squaredDistance(x, y, x1, y1);\r\n}\r\n\r\n/**\r\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\r\n * @param {number} x1 X1.\r\n * @param {number} y1 Y1.\r\n * @param {number} x2 X2.\r\n * @param {number} y2 Y2.\r\n * @return {number} Squared distance.\r\n */\r\nexport function squaredDistance(x1, y1, x2, y2) {\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * Solves system of linear equations using Gaussian elimination method.\r\n *\r\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\r\n *                                     in row-major order.\r\n * @return {Array<number>|null} The resulting vector.\r\n */\r\nexport function solveLinearSystem(mat) {\r\n  const n = mat.length;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    // Find max in the i-th column (ignoring i - 1 first rows)\r\n    let maxRow = i;\r\n    let maxEl = Math.abs(mat[i][i]);\r\n    for (let r = i + 1; r < n; r++) {\r\n      const absValue = Math.abs(mat[r][i]);\r\n      if (absValue > maxEl) {\r\n        maxEl = absValue;\r\n        maxRow = r;\r\n      }\r\n    }\r\n\r\n    if (maxEl === 0) {\r\n      return null; // matrix is singular\r\n    }\r\n\r\n    // Swap max row with i-th (current) row\r\n    const tmp = mat[maxRow];\r\n    mat[maxRow] = mat[i];\r\n    mat[i] = tmp;\r\n\r\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\r\n    for (let j = i + 1; j < n; j++) {\r\n      const coef = -mat[j][i] / mat[i][i];\r\n      for (let k = i; k < n + 1; k++) {\r\n        if (i == k) {\r\n          mat[j][k] = 0;\r\n        } else {\r\n          mat[j][k] += coef * mat[i][k];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Solve Ax=b for upper triangular matrix A (mat)\r\n  const x = new Array(n);\r\n  for (let l = n - 1; l >= 0; l--) {\r\n    x[l] = mat[l][n] / mat[l][l];\r\n    for (let m = l - 1; m >= 0; m--) {\r\n      mat[m][n] -= mat[m][l] * x[l];\r\n    }\r\n  }\r\n  return x;\r\n}\r\n\r\n/**\r\n * Converts radians to to degrees.\r\n *\r\n * @param {number} angleInRadians Angle in radians.\r\n * @return {number} Angle in degrees.\r\n */\r\nexport function toDegrees(angleInRadians) {\r\n  return (angleInRadians * 180) / Math.PI;\r\n}\r\n\r\n/**\r\n * Converts degrees to radians.\r\n *\r\n * @param {number} angleInDegrees Angle in degrees.\r\n * @return {number} Angle in radians.\r\n */\r\nexport function toRadians(angleInDegrees) {\r\n  return (angleInDegrees * Math.PI) / 180;\r\n}\r\n\r\n/**\r\n * Returns the modulo of a / b, depending on the sign of b.\r\n *\r\n * @param {number} a Dividend.\r\n * @param {number} b Divisor.\r\n * @return {number} Modulo.\r\n */\r\nexport function modulo(a, b) {\r\n  const r = a % b;\r\n  return r * b < 0 ? r + b : r;\r\n}\r\n\r\n/**\r\n * Calculates the linearly interpolated value of x between a and b.\r\n *\r\n * @param {number} a Number\r\n * @param {number} b Number\r\n * @param {number} x Value to be interpolated.\r\n * @return {number} Interpolated value.\r\n */\r\nexport function lerp(a, b, x) {\r\n  return a + x * (b - a);\r\n}\r\n\r\n/**\r\n * Returns a number with a limited number of decimal digits.\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The input number with a limited number of decimal digits.\r\n */\r\nexport function toFixed(n, decimals) {\r\n  const factor = Math.pow(10, decimals);\r\n  return Math.round(n * factor) / factor;\r\n}\r\n\r\n/**\r\n * Rounds a number to the nearest integer value considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The nearest integer.\r\n */\r\nexport function round(n, decimals) {\r\n  return Math.round(toFixed(n, decimals));\r\n}\r\n\r\n/**\r\n * Rounds a number to the next smaller integer considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The next smaller integer.\r\n */\r\nexport function floor(n, decimals) {\r\n  return Math.floor(toFixed(n, decimals));\r\n}\r\n\r\n/**\r\n * Rounds a number to the next bigger integer considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The next bigger integer.\r\n */\r\nexport function ceil(n, decimals) {\r\n  return Math.ceil(toFixed(n, decimals));\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}