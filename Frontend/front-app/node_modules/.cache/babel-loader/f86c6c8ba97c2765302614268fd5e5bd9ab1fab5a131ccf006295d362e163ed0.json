{"ast":null,"code":"/**\r\n * @module ol/tilegrid/TileGrid\r\n */\nimport TileRange, { createOrUpdate as createOrUpdateTileRange } from '../TileRange.js';\nimport { DEFAULT_TILE_SIZE } from './common.js';\nimport { assert } from '../asserts.js';\nimport { ceil, clamp, floor } from '../math.js';\nimport { createOrUpdate, getTopLeft } from '../extent.js';\nimport { createOrUpdate as createOrUpdateTileCoord } from '../tilecoord.js';\nimport { intersectsLinearRing } from '../geom/flat/intersectsextent.js';\nimport { isSorted, linearFindNearest } from '../array.js';\nimport { toSize } from '../size.js';\n\n/**\r\n * @private\r\n * @type {import(\"../tilecoord.js\").TileCoord}\r\n */\nconst tmpTileCoord = [0, 0, 0];\n\n/**\r\n * Number of decimal digits to consider in integer values when rounding.\r\n * @type {number}\r\n */\nconst DECIMALS = 5;\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\r\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\r\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\r\n * @property {number} [minZoom=0] Minimum zoom.\r\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\r\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\r\n * specified, `extent` or `origins` must be provided.\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\r\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\r\n * `origin` must be provided.\r\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\r\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\r\n * array will have a length of `maxZoom + 1`.\r\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\r\n * of the grid for each zoom level. If specified the values\r\n * define each zoom level's extent together with the `origin` or `origins`.\r\n * A grid `extent` can be configured in addition, and will further limit the extent\r\n * for which tile requests are made by sources. If the bottom-left corner of\r\n * an extent is used as `origin` or `origins`, then the `y` value must be\r\n * negative because OpenLayers tile coordinates use the top left as the origin.\r\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\r\n * Default is `[256, 256]`.\r\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * tile size.\r\n */\n\n/**\r\n * @classdesc\r\n * Base class for setting the grid pattern for sources accessing tiled-image\r\n * servers.\r\n * @api\r\n */\nclass TileGrid {\n  /**\r\n   * @param {Options} options Tile grid options.\r\n   */\n  constructor(options) {\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\r\n     * @private\r\n     * @type {!Array<number>}\r\n     */\n    this.resolutions_ = options.resolutions;\n    assert(isSorted(this.resolutions_,\n    /**\r\n     * @param {number} a First resolution\r\n     * @param {number} b Second resolution\r\n     * @return {number} Comparison result\r\n     */\n    (a, b) => b - a, true), '`resolutions` must be sorted in descending order');\n\n    // check if we've got a consistent zoom factor and origin\n    let zoomFactor;\n    if (!options.origins) {\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\r\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 'Number of `origins` and `resolutions` must be equal');\n    }\n    const extent = options.extent;\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n    assert(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 'Either `origin` or `origins` must be configured, never both');\n\n    /**\r\n     * @private\r\n     * @type {Array<number|import(\"../size.js\").Size>}\r\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 'Number of `tileSizes` and `resolutions` must be equal');\n    }\n\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\n    this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;\n    assert(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 'Either `tileSize` or `tileSizes` must be configured, never both');\n\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../TileRange.js\").default>}\r\n     */\n    this.fullTileRanges_ = null;\n\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\n    this.tmpSize_ = [0, 0];\n\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map((size, z) => {\n        const tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n        if (extent) {\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      });\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\r\n   * Call a function with each tile coordinate for a given extent and zoom level.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} zoom Integer zoom level.\r\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\r\n   * @api\r\n   */\n  forEachTileCoord(extent, zoom, callback) {\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  }\n\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {boolean} Callback succeeded.\r\n   */\n  forEachTileCoordParentTileRange(tileCoord, callback, tempTileRange, tempExtent) {\n    let tileRange, x, y;\n    let tileCoordExtent = null;\n    let z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\n    }\n    while (z >= this.minZoom) {\n      if (x !== undefined && y !== undefined) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, tempTileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  }\n\n  /**\r\n   * Get the extent for this tile grid, if it was configured.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\r\n   * Get the maximum zoom level for the grid.\r\n   * @return {number} Max zoom.\r\n   * @api\r\n   */\n  getMaxZoom() {\n    return this.maxZoom;\n  }\n\n  /**\r\n   * Get the minimum zoom level for the grid.\r\n   * @return {number} Min zoom.\r\n   * @api\r\n   */\n  getMinZoom() {\n    return this.minZoom;\n  }\n\n  /**\r\n   * Get the origin for the grid at the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\r\n   * @api\r\n   */\n  getOrigin(z) {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    return this.origins_[z];\n  }\n\n  /**\r\n   * Get the resolution for the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {number} Resolution.\r\n   * @api\r\n   */\n  getResolution(z) {\n    return this.resolutions_[z];\n  }\n\n  /**\r\n   * Get the list of resolutions for the tile grid.\r\n   * @return {Array<number>} Resolutions.\r\n   * @api\r\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */\n  getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        const minX = tileCoord[1] * 2;\n        const minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, tempTileRange);\n      }\n      const tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent || this.tmpExtent_);\n      return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, tempTileRange);\n    }\n    return null;\n  }\n\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */\n  getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n    const tileCoordZ = tileCoord[0];\n    const tileCoordX = tileCoord[1];\n    const tileCoordY = tileCoord[2];\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(tileCoordX, tileCoordY, tileCoordX, tileCoordY, tempTileRange);\n    }\n    if (this.zoomFactor_) {\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      const minX = Math.floor(tileCoordX * factor);\n      const minY = Math.floor(tileCoordY * factor);\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, tempTileRange);\n      }\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n    }\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n  }\n\n  /**\r\n   * Get a tile range for the given extent and integer zoom level.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\r\n   * @return {import(\"../TileRange.js\").default} Tile range.\r\n   */\n  getTileRangeForExtentAndZ(extent, z, tempTileRange) {\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);\n    const minX = tmpTileCoord[1];\n    const minY = tmpTileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);\n    const maxX = tmpTileCoord[1];\n    const maxY = tmpTileCoord[2];\n    return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n  }\n\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\r\n   */\n  getTileCoordCenter(tileCoord) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution, origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution];\n  }\n\n  /**\r\n   * Get the extent of a tile coordinate.\r\n   *\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\n  getTileCoordExtent(tileCoord, tempExtent) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    const maxX = minX + tileSize[0] * resolution;\n    const maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\n  }\n\n  /**\r\n   * Get the tile coordinate for the given map coordinate and resolution.  This\r\n   * method considers that coordinates that intersect tile boundaries should be\r\n   * assigned the higher tile coordinate.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n  }\n\n  /**\r\n   * Note that this method should not be called for resolutions that correspond\r\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {number} resolution Resolution (for a non-integer zoom level).\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */\n  getTileCoordForXYAndResolution_(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n    const z = this.getZForResolution(resolution);\n    const scale = resolution / this.getResolution(z);\n    const origin = this.getOrigin(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    let tileCoordX = scale * (x - origin[0]) / resolution / tileSize[0];\n    let tileCoordY = scale * (origin[1] - y) / resolution / tileSize[1];\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\r\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\r\n   * they should have separate implementations.  This method is for integer zoom\r\n   * levels.  The other method should only be called for resolutions corresponding\r\n   * to non-integer zoom levels.\r\n   * @param {number} x Map x coordinate.\r\n   * @param {number} y Map y coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\r\n   * Get a tile coordinate given a map coordinate and zoom level.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} z Integer zoom level, e.g. the result of a `getZForResolution()` method call\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n  }\n\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {number} Tile resolution.\r\n   */\n  getTileCoordResolution(tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  }\n\n  /**\r\n   * Get the tile size for a zoom level. The type of the return value matches the\r\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\r\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\r\n   * @param {number} z Z.\r\n   * @return {number|import(\"../size.js\").Size} Tile size.\r\n   * @api\r\n   */\n  getTileSize(z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    return this.tileSizes_[z];\n  }\n\n  /**\r\n   * @param {number} z Zoom level.\r\n   * @return {import(\"../TileRange.js\").default|null} Extent tile range for the specified zoom level.\r\n   */\n  getFullTileRange(z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;\n    }\n    return this.fullTileRanges_[z];\n  }\n\n  /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\r\n   *     If 0, the nearest resolution will be used.\r\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\r\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\r\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\r\n   *\r\n   * For example to change tile Z at the midpoint of zoom levels\r\n   * ```js\r\n   * function(value, high, low) {\r\n   *   return value - low * Math.sqrt(high / low);\r\n   * }\r\n   * ```\r\n   * @return {number} Z.\r\n   * @api\r\n   */\n  getZForResolution(resolution, opt_direction) {\n    const z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n    return clamp(z, this.minZoom, this.maxZoom);\n  }\n\n  /**\r\n   * The tile with the provided tile coordinate intersects the given viewport.\r\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\r\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\r\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\r\n   */\n  tileCoordIntersectsViewport(tileCoord, viewport) {\n    return intersectsLinearRing(viewport, 0, viewport.length, 2, this.getTileCoordExtent(tileCoord));\n  }\n\n  /**\r\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\r\n   * @private\r\n   */\n  calculateTileRanges_(extent) {\n    const length = this.resolutions_.length;\n    const fullTileRanges = new Array(length);\n    for (let z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  }\n}\nexport default TileGrid;","map":{"version":3,"names":["TileRange","createOrUpdate","createOrUpdateTileRange","DEFAULT_TILE_SIZE","assert","ceil","clamp","floor","getTopLeft","createOrUpdateTileCoord","intersectsLinearRing","isSorted","linearFindNearest","toSize","tmpTileCoord","DECIMALS","TileGrid","constructor","options","minZoom","undefined","resolutions_","resolutions","a","b","zoomFactor","origins","i","ii","length","zoomFactor_","maxZoom","origin_","origin","origins_","extent","tileSizes_","tileSizes","tileSize_","tileSize","extent_","fullTileRanges_","tmpSize_","tmpExtent_","sizes","map","size","z","tileRange","Math","min","max","restrictedTileRange","getTileRangeForExtentAndZ","minX","maxX","minY","maxY","calculateTileRanges_","forEachTileCoord","zoom","callback","j","jj","forEachTileCoordParentTileRange","tileCoord","tempTileRange","tempExtent","x","y","tileCoordExtent","getTileCoordExtent","getExtent","getMaxZoom","getMinZoom","getOrigin","getResolution","getResolutions","getTileCoordChildTileRange","getTileRangeForTileCoordAndZ","tileCoordZ","tileCoordX","tileCoordY","factor","pow","getTileCoordForXYAndZ_","getTileCoordCenter","resolution","getTileSize","getTileCoordForCoordAndResolution","coordinate","opt_tileCoord","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","getZForResolution","scale","getTileCoordForCoordAndZ","getTileCoordResolution","getFullTileRange","opt_direction","tileCoordIntersectsViewport","viewport","fullTileRanges","Array"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/tilegrid/TileGrid.js"],"sourcesContent":["/**\r\n * @module ol/tilegrid/TileGrid\r\n */\r\nimport TileRange, {\r\n  createOrUpdate as createOrUpdateTileRange,\r\n} from '../TileRange.js';\r\nimport {DEFAULT_TILE_SIZE} from './common.js';\r\nimport {assert} from '../asserts.js';\r\nimport {ceil, clamp, floor} from '../math.js';\r\nimport {createOrUpdate, getTopLeft} from '../extent.js';\r\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\r\nimport {intersectsLinearRing} from '../geom/flat/intersectsextent.js';\r\nimport {isSorted, linearFindNearest} from '../array.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @private\r\n * @type {import(\"../tilecoord.js\").TileCoord}\r\n */\r\nconst tmpTileCoord = [0, 0, 0];\r\n\r\n/**\r\n * Number of decimal digits to consider in integer values when rounding.\r\n * @type {number}\r\n */\r\nconst DECIMALS = 5;\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\r\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\r\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\r\n * @property {number} [minZoom=0] Minimum zoom.\r\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\r\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\r\n * specified, `extent` or `origins` must be provided.\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\r\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\r\n * `origin` must be provided.\r\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\r\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\r\n * array will have a length of `maxZoom + 1`.\r\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\r\n * of the grid for each zoom level. If specified the values\r\n * define each zoom level's extent together with the `origin` or `origins`.\r\n * A grid `extent` can be configured in addition, and will further limit the extent\r\n * for which tile requests are made by sources. If the bottom-left corner of\r\n * an extent is used as `origin` or `origins`, then the `y` value must be\r\n * negative because OpenLayers tile coordinates use the top left as the origin.\r\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\r\n * Default is `[256, 256]`.\r\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * tile size.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class for setting the grid pattern for sources accessing tiled-image\r\n * servers.\r\n * @api\r\n */\r\nclass TileGrid {\r\n  /**\r\n   * @param {Options} options Tile grid options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array<number>}\r\n     */\r\n    this.resolutions_ = options.resolutions;\r\n    assert(\r\n      isSorted(\r\n        this.resolutions_,\r\n        /**\r\n         * @param {number} a First resolution\r\n         * @param {number} b Second resolution\r\n         * @return {number} Comparison result\r\n         */\r\n        (a, b) => b - a,\r\n        true,\r\n      ),\r\n      '`resolutions` must be sorted in descending order',\r\n    );\r\n\r\n    // check if we've got a consistent zoom factor and origin\r\n    let zoomFactor;\r\n    if (!options.origins) {\r\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\r\n        if (!zoomFactor) {\r\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\r\n        } else {\r\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\r\n            zoomFactor = undefined;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.zoomFactor_ = zoomFactor;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.maxZoom = this.resolutions_.length - 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */\r\n    this.origin_ = options.origin !== undefined ? options.origin : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\r\n     */\r\n    this.origins_ = null;\r\n    if (options.origins !== undefined) {\r\n      this.origins_ = options.origins;\r\n      assert(\r\n        this.origins_.length == this.resolutions_.length,\r\n        'Number of `origins` and `resolutions` must be equal',\r\n      );\r\n    }\r\n\r\n    const extent = options.extent;\r\n\r\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\r\n      this.origin_ = getTopLeft(extent);\r\n    }\r\n\r\n    assert(\r\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\r\n      'Either `origin` or `origins` must be configured, never both',\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number|import(\"../size.js\").Size>}\r\n     */\r\n    this.tileSizes_ = null;\r\n    if (options.tileSizes !== undefined) {\r\n      this.tileSizes_ = options.tileSizes;\r\n      assert(\r\n        this.tileSizes_.length == this.resolutions_.length,\r\n        'Number of `tileSizes` and `resolutions` must be equal',\r\n      );\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\r\n    this.tileSize_ =\r\n      options.tileSize !== undefined\r\n        ? options.tileSize\r\n        : !this.tileSizes_\r\n          ? DEFAULT_TILE_SIZE\r\n          : null;\r\n    assert(\r\n      (!this.tileSize_ && this.tileSizes_) ||\r\n        (this.tileSize_ && !this.tileSizes_),\r\n      'Either `tileSize` or `tileSizes` must be configured, never both',\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.extent_ = extent !== undefined ? extent : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../TileRange.js\").default>}\r\n     */\r\n    this.fullTileRanges_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.tmpSize_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.tmpExtent_ = [0, 0, 0, 0];\r\n\r\n    if (options.sizes !== undefined) {\r\n      this.fullTileRanges_ = options.sizes.map((size, z) => {\r\n        const tileRange = new TileRange(\r\n          Math.min(0, size[0]),\r\n          Math.max(size[0] - 1, -1),\r\n          Math.min(0, size[1]),\r\n          Math.max(size[1] - 1, -1),\r\n        );\r\n        if (extent) {\r\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\r\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\r\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\r\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\r\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\r\n        }\r\n        return tileRange;\r\n      });\r\n    } else if (extent) {\r\n      this.calculateTileRanges_(extent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call a function with each tile coordinate for a given extent and zoom level.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} zoom Integer zoom level.\r\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\r\n   * @api\r\n   */\r\n  forEachTileCoord(extent, zoom, callback) {\r\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\r\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\r\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\r\n        callback([zoom, i, j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {boolean} Callback succeeded.\r\n   */\r\n  forEachTileCoordParentTileRange(\r\n    tileCoord,\r\n    callback,\r\n    tempTileRange,\r\n    tempExtent,\r\n  ) {\r\n    let tileRange, x, y;\r\n    let tileCoordExtent = null;\r\n    let z = tileCoord[0] - 1;\r\n    if (this.zoomFactor_ === 2) {\r\n      x = tileCoord[1];\r\n      y = tileCoord[2];\r\n    } else {\r\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\r\n    }\r\n    while (z >= this.minZoom) {\r\n      if (x !== undefined && y !== undefined) {\r\n        x = Math.floor(x / 2);\r\n        y = Math.floor(y / 2);\r\n        tileRange = createOrUpdateTileRange(x, x, y, y, tempTileRange);\r\n      } else {\r\n        tileRange = this.getTileRangeForExtentAndZ(\r\n          tileCoordExtent,\r\n          z,\r\n          tempTileRange,\r\n        );\r\n      }\r\n      if (callback(z, tileRange)) {\r\n        return true;\r\n      }\r\n      --z;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get the extent for this tile grid, if it was configured.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent() {\r\n    return this.extent_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum zoom level for the grid.\r\n   * @return {number} Max zoom.\r\n   * @api\r\n   */\r\n  getMaxZoom() {\r\n    return this.maxZoom;\r\n  }\r\n\r\n  /**\r\n   * Get the minimum zoom level for the grid.\r\n   * @return {number} Min zoom.\r\n   * @api\r\n   */\r\n  getMinZoom() {\r\n    return this.minZoom;\r\n  }\r\n\r\n  /**\r\n   * Get the origin for the grid at the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\r\n   * @api\r\n   */\r\n  getOrigin(z) {\r\n    if (this.origin_) {\r\n      return this.origin_;\r\n    }\r\n    return this.origins_[z];\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {number} Resolution.\r\n   * @api\r\n   */\r\n  getResolution(z) {\r\n    return this.resolutions_[z];\r\n  }\r\n\r\n  /**\r\n   * Get the list of resolutions for the tile grid.\r\n   * @return {Array<number>} Resolutions.\r\n   * @api\r\n   */\r\n  getResolutions() {\r\n    return this.resolutions_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */\r\n  getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\r\n    if (tileCoord[0] < this.maxZoom) {\r\n      if (this.zoomFactor_ === 2) {\r\n        const minX = tileCoord[1] * 2;\r\n        const minY = tileCoord[2] * 2;\r\n        return createOrUpdateTileRange(\r\n          minX,\r\n          minX + 1,\r\n          minY,\r\n          minY + 1,\r\n          tempTileRange,\r\n        );\r\n      }\r\n      const tileCoordExtent = this.getTileCoordExtent(\r\n        tileCoord,\r\n        tempExtent || this.tmpExtent_,\r\n      );\r\n      return this.getTileRangeForExtentAndZ(\r\n        tileCoordExtent,\r\n        tileCoord[0] + 1,\r\n        tempTileRange,\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */\r\n  getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\r\n    if (z > this.maxZoom || z < this.minZoom) {\r\n      return null;\r\n    }\r\n\r\n    const tileCoordZ = tileCoord[0];\r\n    const tileCoordX = tileCoord[1];\r\n    const tileCoordY = tileCoord[2];\r\n\r\n    if (z === tileCoordZ) {\r\n      return createOrUpdateTileRange(\r\n        tileCoordX,\r\n        tileCoordY,\r\n        tileCoordX,\r\n        tileCoordY,\r\n        tempTileRange,\r\n      );\r\n    }\r\n\r\n    if (this.zoomFactor_) {\r\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\r\n      const minX = Math.floor(tileCoordX * factor);\r\n      const minY = Math.floor(tileCoordY * factor);\r\n      if (z < tileCoordZ) {\r\n        return createOrUpdateTileRange(minX, minX, minY, minY, tempTileRange);\r\n      }\r\n\r\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\r\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\r\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\r\n    }\r\n\r\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\r\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\r\n  }\r\n\r\n  /**\r\n   * Get a tile range for the given extent and integer zoom level.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\r\n   * @return {import(\"../TileRange.js\").default} Tile range.\r\n   */\r\n  getTileRangeForExtentAndZ(extent, z, tempTileRange) {\r\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);\r\n    const minX = tmpTileCoord[1];\r\n    const minY = tmpTileCoord[2];\r\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);\r\n    const maxX = tmpTileCoord[1];\r\n    const maxY = tmpTileCoord[2];\r\n    return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\r\n   */\r\n  getTileCoordCenter(tileCoord) {\r\n    const origin = this.getOrigin(tileCoord[0]);\r\n    const resolution = this.getResolution(tileCoord[0]);\r\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\r\n    return [\r\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\r\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get the extent of a tile coordinate.\r\n   *\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getTileCoordExtent(tileCoord, tempExtent) {\r\n    const origin = this.getOrigin(tileCoord[0]);\r\n    const resolution = this.getResolution(tileCoord[0]);\r\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\r\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\r\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\r\n    const maxX = minX + tileSize[0] * resolution;\r\n    const maxY = minY + tileSize[1] * resolution;\r\n    return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\r\n  }\r\n\r\n  /**\r\n   * Get the tile coordinate for the given map coordinate and resolution.  This\r\n   * method considers that coordinates that intersect tile boundaries should be\r\n   * assigned the higher tile coordinate.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\r\n    return this.getTileCoordForXYAndResolution_(\r\n      coordinate[0],\r\n      coordinate[1],\r\n      resolution,\r\n      false,\r\n      opt_tileCoord,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Note that this method should not be called for resolutions that correspond\r\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {number} resolution Resolution (for a non-integer zoom level).\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */\r\n  getTileCoordForXYAndResolution_(\r\n    x,\r\n    y,\r\n    resolution,\r\n    reverseIntersectionPolicy,\r\n    opt_tileCoord,\r\n  ) {\r\n    const z = this.getZForResolution(resolution);\r\n    const scale = resolution / this.getResolution(z);\r\n    const origin = this.getOrigin(z);\r\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\r\n\r\n    let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];\r\n    let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];\r\n\r\n    if (reverseIntersectionPolicy) {\r\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\r\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\r\n    } else {\r\n      tileCoordX = floor(tileCoordX, DECIMALS);\r\n      tileCoordY = floor(tileCoordY, DECIMALS);\r\n    }\r\n\r\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\r\n  }\r\n\r\n  /**\r\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\r\n   * they should have separate implementations.  This method is for integer zoom\r\n   * levels.  The other method should only be called for resolutions corresponding\r\n   * to non-integer zoom levels.\r\n   * @param {number} x Map x coordinate.\r\n   * @param {number} y Map y coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */\r\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\r\n    const origin = this.getOrigin(z);\r\n    const resolution = this.getResolution(z);\r\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\r\n\r\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\r\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\r\n\r\n    if (reverseIntersectionPolicy) {\r\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\r\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\r\n    } else {\r\n      tileCoordX = floor(tileCoordX, DECIMALS);\r\n      tileCoordY = floor(tileCoordY, DECIMALS);\r\n    }\r\n\r\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\r\n  }\r\n\r\n  /**\r\n   * Get a tile coordinate given a map coordinate and zoom level.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} z Integer zoom level, e.g. the result of a `getZForResolution()` method call\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\r\n    return this.getTileCoordForXYAndZ_(\r\n      coordinate[0],\r\n      coordinate[1],\r\n      z,\r\n      false,\r\n      opt_tileCoord,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {number} Tile resolution.\r\n   */\r\n  getTileCoordResolution(tileCoord) {\r\n    return this.resolutions_[tileCoord[0]];\r\n  }\r\n\r\n  /**\r\n   * Get the tile size for a zoom level. The type of the return value matches the\r\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\r\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\r\n   * @param {number} z Z.\r\n   * @return {number|import(\"../size.js\").Size} Tile size.\r\n   * @api\r\n   */\r\n  getTileSize(z) {\r\n    if (this.tileSize_) {\r\n      return this.tileSize_;\r\n    }\r\n    return this.tileSizes_[z];\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Zoom level.\r\n   * @return {import(\"../TileRange.js\").default|null} Extent tile range for the specified zoom level.\r\n   */\r\n  getFullTileRange(z) {\r\n    if (!this.fullTileRanges_) {\r\n      return this.extent_\r\n        ? this.getTileRangeForExtentAndZ(this.extent_, z)\r\n        : null;\r\n    }\r\n    return this.fullTileRanges_[z];\r\n  }\r\n\r\n  /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\r\n   *     If 0, the nearest resolution will be used.\r\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\r\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\r\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\r\n   *\r\n   * For example to change tile Z at the midpoint of zoom levels\r\n   * ```js\r\n   * function(value, high, low) {\r\n   *   return value - low * Math.sqrt(high / low);\r\n   * }\r\n   * ```\r\n   * @return {number} Z.\r\n   * @api\r\n   */\r\n  getZForResolution(resolution, opt_direction) {\r\n    const z = linearFindNearest(\r\n      this.resolutions_,\r\n      resolution,\r\n      opt_direction || 0,\r\n    );\r\n    return clamp(z, this.minZoom, this.maxZoom);\r\n  }\r\n\r\n  /**\r\n   * The tile with the provided tile coordinate intersects the given viewport.\r\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\r\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\r\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\r\n   */\r\n  tileCoordIntersectsViewport(tileCoord, viewport) {\r\n    return intersectsLinearRing(\r\n      viewport,\r\n      0,\r\n      viewport.length,\r\n      2,\r\n      this.getTileCoordExtent(tileCoord),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\r\n   * @private\r\n   */\r\n  calculateTileRanges_(extent) {\r\n    const length = this.resolutions_.length;\r\n    const fullTileRanges = new Array(length);\r\n    for (let z = this.minZoom; z < length; ++z) {\r\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\r\n    }\r\n    this.fullTileRanges_ = fullTileRanges;\r\n  }\r\n}\r\n\r\nexport default TileGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}