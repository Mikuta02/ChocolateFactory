{"ast":null,"code":"/**\r\n * @module ol/TileCache\r\n */\nimport LRUCache from './structs/LRUCache.js';\nimport { fromKey, getKey } from './tilecoord.js';\nclass TileCache extends LRUCache {\n  clear() {\n    while (this.getCount() > 0) {\n      this.pop().release();\n    }\n    super.clear();\n  }\n\n  /**\r\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\r\n   */\n  expireCache(usedTiles) {\n    while (this.canExpireCache()) {\n      const tile = this.peekLast();\n      if (tile.getKey() in usedTiles) {\n        break;\n      } else {\n        this.pop().release();\n      }\n    }\n  }\n\n  /**\r\n   * Prune all tiles from the cache that don't have the same z as the newest tile.\r\n   */\n  pruneExceptNewestZ() {\n    if (this.getCount() === 0) {\n      return;\n    }\n    const key = this.peekFirstKey();\n    const tileCoord = fromKey(key);\n    const z = tileCoord[0];\n    this.forEach(tile => {\n      if (tile.tileCoord[0] !== z) {\n        this.remove(getKey(tile.tileCoord));\n        tile.release();\n      }\n    });\n  }\n}\nexport default TileCache;","map":{"version":3,"names":["LRUCache","fromKey","getKey","TileCache","clear","getCount","pop","release","expireCache","usedTiles","canExpireCache","tile","peekLast","pruneExceptNewestZ","key","peekFirstKey","tileCoord","z","forEach","remove"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/TileCache.js"],"sourcesContent":["/**\r\n * @module ol/TileCache\r\n */\r\nimport LRUCache from './structs/LRUCache.js';\r\nimport {fromKey, getKey} from './tilecoord.js';\r\n\r\nclass TileCache extends LRUCache {\r\n  clear() {\r\n    while (this.getCount() > 0) {\r\n      this.pop().release();\r\n    }\r\n    super.clear();\r\n  }\r\n\r\n  /**\r\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\r\n   */\r\n  expireCache(usedTiles) {\r\n    while (this.canExpireCache()) {\r\n      const tile = this.peekLast();\r\n      if (tile.getKey() in usedTiles) {\r\n        break;\r\n      } else {\r\n        this.pop().release();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prune all tiles from the cache that don't have the same z as the newest tile.\r\n   */\r\n  pruneExceptNewestZ() {\r\n    if (this.getCount() === 0) {\r\n      return;\r\n    }\r\n    const key = this.peekFirstKey();\r\n    const tileCoord = fromKey(key);\r\n    const z = tileCoord[0];\r\n    this.forEach((tile) => {\r\n      if (tile.tileCoord[0] !== z) {\r\n        this.remove(getKey(tile.tileCoord));\r\n        tile.release();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default TileCache;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,uBAAuB;AAC5C,SAAQC,OAAO,EAAEC,MAAM,QAAO,gBAAgB;AAE9C,MAAMC,SAAS,SAASH,QAAQ,CAAC;EAC/BI,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE;MAC1B,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACtB;IACA,KAAK,CAACH,KAAK,CAAC,CAAC;EACf;;EAEA;AACF;AACA;EACEI,WAAWA,CAACC,SAAS,EAAE;IACrB,OAAO,IAAI,CAACC,cAAc,CAAC,CAAC,EAAE;MAC5B,MAAMC,IAAI,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;MAC5B,IAAID,IAAI,CAACT,MAAM,CAAC,CAAC,IAAIO,SAAS,EAAE;QAC9B;MACF,CAAC,MAAM;QACL,IAAI,CAACH,GAAG,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MACtB;IACF;EACF;;EAEA;AACF;AACA;EACEM,kBAAkBA,CAAA,EAAG;IACnB,IAAI,IAAI,CAACR,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE;MACzB;IACF;IACA,MAAMS,GAAG,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;IAC/B,MAAMC,SAAS,GAAGf,OAAO,CAACa,GAAG,CAAC;IAC9B,MAAMG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC;IACtB,IAAI,CAACE,OAAO,CAAEP,IAAI,IAAK;MACrB,IAAIA,IAAI,CAACK,SAAS,CAAC,CAAC,CAAC,KAAKC,CAAC,EAAE;QAC3B,IAAI,CAACE,MAAM,CAACjB,MAAM,CAACS,IAAI,CAACK,SAAS,CAAC,CAAC;QACnCL,IAAI,CAACJ,OAAO,CAAC,CAAC;MAChB;IACF,CAAC,CAAC;EACJ;AACF;AAEA,eAAeJ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}