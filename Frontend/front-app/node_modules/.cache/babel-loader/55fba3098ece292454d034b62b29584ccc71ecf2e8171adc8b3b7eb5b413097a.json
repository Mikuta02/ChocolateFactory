{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @module ol/geom/flat/geodesic\r\n */\nimport { get as getProjection, getTransform } from '../../proj.js';\nimport { squaredSegmentDistance, toDegrees, toRadians } from '../../math.js';\n\n/**\r\n * @param {function(number): import(\"../../coordinate.js\").Coordinate} interpolate Interpolate function.\r\n * @param {import(\"../../proj.js\").TransformFunction} transform Transform from longitude/latitude to\r\n *     projected coordinates.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\nfunction line(interpolate, transform, squaredTolerance) {\n  // FIXME reduce garbage generation\n  // FIXME optimize stack operations\n\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  let geoA = interpolate(0);\n  let geoB = interpolate(1);\n  let a = transform(geoA);\n  let b = transform(geoB);\n\n  /** @type {Array<import(\"../../coordinate.js\").Coordinate>} */\n  const geoStack = [geoB, geoA];\n  /** @type {Array<import(\"../../coordinate.js\").Coordinate>} */\n  const stack = [b, a];\n  /** @type {Array<number>} */\n  const fractionStack = [1, 0];\n\n  /** @type {!Object<string, boolean>} */\n  const fractions = {};\n  let maxIterations = 1e5;\n  let geoM, m, fracA, fracB, fracM, key;\n  while (--maxIterations > 0 && fractionStack.length > 0) {\n    // Pop the a coordinate off the stack\n    fracA = fractionStack.pop();\n    geoA = geoStack.pop();\n    a = stack.pop();\n    // Add the a coordinate if it has not been added yet\n    key = fracA.toString();\n    if (!(key in fractions)) {\n      flatCoordinates.push(a[0], a[1]);\n      fractions[key] = true;\n    }\n    // Pop the b coordinate off the stack\n    fracB = fractionStack.pop();\n    geoB = geoStack.pop();\n    b = stack.pop();\n    // Find the m point between the a and b coordinates\n    fracM = (fracA + fracB) / 2;\n    geoM = interpolate(fracM);\n    m = transform(geoM);\n    if (squaredSegmentDistance(m[0], m[1], a[0], a[1], b[0], b[1]) < squaredTolerance) {\n      // If the m point is sufficiently close to the straight line, then we\n      // discard it.  Just use the b coordinate and move on to the next line\n      // segment.\n      flatCoordinates.push(b[0], b[1]);\n      key = fracB.toString();\n      fractions[key] = true;\n    } else {\n      // Otherwise, we need to subdivide the current line segment.  Split it\n      // into two and push the two line segments onto the stack.\n      fractionStack.push(fracB, fracM, fracM, fracA);\n      stack.push(b, m, m, a);\n      geoStack.push(geoB, geoM, geoM, geoA);\n    }\n  }\n  return flatCoordinates;\n}\n\n/**\r\n * Generate a great-circle arcs between two lat/lon points.\r\n * @param {number} lon1 Longitude 1 in degrees.\r\n * @param {number} lat1 Latitude 1 in degrees.\r\n * @param {number} lon2 Longitude 2 in degrees.\r\n * @param {number} lat2 Latitude 2 in degrees.\r\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\nexport function greatCircleArc(lon1, lat1, lon2, lat2, projection, squaredTolerance) {\n  const geoProjection = getProjection('EPSG:4326');\n  const cosLat1 = Math.cos(toRadians(lat1));\n  const sinLat1 = Math.sin(toRadians(lat1));\n  const cosLat2 = Math.cos(toRadians(lat2));\n  const sinLat2 = Math.sin(toRadians(lat2));\n  const cosDeltaLon = Math.cos(toRadians(lon2 - lon1));\n  const sinDeltaLon = Math.sin(toRadians(lon2 - lon1));\n  const d = sinLat1 * sinLat2 + cosLat1 * cosLat2 * cosDeltaLon;\n  return line(\n  /**\r\n   * @param {number} frac Fraction.\r\n   * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\r\n   */\n  function (frac) {\n    if (1 <= d) {\n      return [lon2, lat2];\n    }\n    const D = frac * Math.acos(d);\n    const cosD = Math.cos(D);\n    const sinD = Math.sin(D);\n    const y = sinDeltaLon * cosLat2;\n    const x = cosLat1 * sinLat2 - sinLat1 * cosLat2 * cosDeltaLon;\n    const theta = Math.atan2(y, x);\n    const lat = Math.asin(sinLat1 * cosD + cosLat1 * sinD * Math.cos(theta));\n    const lon = toRadians(lon1) + Math.atan2(Math.sin(theta) * sinD * cosLat1, cosD - sinLat1 * Math.sin(lat));\n    return [toDegrees(lon), toDegrees(lat)];\n  }, getTransform(geoProjection, projection), squaredTolerance);\n}\n\n/**\r\n * Generate a meridian (line at constant longitude).\r\n * @param {number} lon Longitude.\r\n * @param {number} lat1 Latitude 1.\r\n * @param {number} lat2 Latitude 2.\r\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\nexport function meridian(lon, lat1, lat2, projection, squaredTolerance) {\n  const epsg4326Projection = getProjection('EPSG:4326');\n  return line(\n  /**\r\n   * @param {number} frac Fraction.\r\n   * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\r\n   */\n  function (frac) {\n    return [lon, lat1 + (lat2 - lat1) * frac];\n  }, getTransform(epsg4326Projection, projection), squaredTolerance);\n}\n\n/**\r\n * Generate a parallel (line at constant latitude).\r\n * @param {number} lat Latitude.\r\n * @param {number} lon1 Longitude 1.\r\n * @param {number} lon2 Longitude 2.\r\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\nexport function parallel(lat, lon1, lon2, projection, squaredTolerance) {\n  const epsg4326Projection = getProjection('EPSG:4326');\n  return line(\n  /**\r\n   * @param {number} frac Fraction.\r\n   * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\r\n   */\n  function (frac) {\n    return [lon1 + (lon2 - lon1) * frac, lat];\n  }, getTransform(epsg4326Projection, projection), squaredTolerance);\n}","map":{"version":3,"names":["get","getProjection","getTransform","squaredSegmentDistance","toDegrees","toRadians","line","interpolate","transform","squaredTolerance","flatCoordinates","geoA","geoB","a","b","geoStack","stack","fractionStack","fractions","maxIterations","geoM","m","fracA","fracB","fracM","key","length","pop","toString","push","greatCircleArc","lon1","lat1","lon2","lat2","projection","geoProjection","cosLat1","Math","cos","sinLat1","sin","cosLat2","sinLat2","cosDeltaLon","sinDeltaLon","d","frac","D","acos","cosD","sinD","y","x","theta","atan2","lat","asin","lon","meridian","epsg4326Projection","parallel"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/geom/flat/geodesic.js"],"sourcesContent":["/**\r\n * @module ol/geom/flat/geodesic\r\n */\r\nimport {get as getProjection, getTransform} from '../../proj.js';\r\nimport {squaredSegmentDistance, toDegrees, toRadians} from '../../math.js';\r\n\r\n/**\r\n * @param {function(number): import(\"../../coordinate.js\").Coordinate} interpolate Interpolate function.\r\n * @param {import(\"../../proj.js\").TransformFunction} transform Transform from longitude/latitude to\r\n *     projected coordinates.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nfunction line(interpolate, transform, squaredTolerance) {\r\n  // FIXME reduce garbage generation\r\n  // FIXME optimize stack operations\r\n\r\n  /** @type {Array<number>} */\r\n  const flatCoordinates = [];\r\n\r\n  let geoA = interpolate(0);\r\n  let geoB = interpolate(1);\r\n\r\n  let a = transform(geoA);\r\n  let b = transform(geoB);\r\n\r\n  /** @type {Array<import(\"../../coordinate.js\").Coordinate>} */\r\n  const geoStack = [geoB, geoA];\r\n  /** @type {Array<import(\"../../coordinate.js\").Coordinate>} */\r\n  const stack = [b, a];\r\n  /** @type {Array<number>} */\r\n  const fractionStack = [1, 0];\r\n\r\n  /** @type {!Object<string, boolean>} */\r\n  const fractions = {};\r\n\r\n  let maxIterations = 1e5;\r\n  let geoM, m, fracA, fracB, fracM, key;\r\n\r\n  while (--maxIterations > 0 && fractionStack.length > 0) {\r\n    // Pop the a coordinate off the stack\r\n    fracA = fractionStack.pop();\r\n    geoA = geoStack.pop();\r\n    a = stack.pop();\r\n    // Add the a coordinate if it has not been added yet\r\n    key = fracA.toString();\r\n    if (!(key in fractions)) {\r\n      flatCoordinates.push(a[0], a[1]);\r\n      fractions[key] = true;\r\n    }\r\n    // Pop the b coordinate off the stack\r\n    fracB = fractionStack.pop();\r\n    geoB = geoStack.pop();\r\n    b = stack.pop();\r\n    // Find the m point between the a and b coordinates\r\n    fracM = (fracA + fracB) / 2;\r\n    geoM = interpolate(fracM);\r\n    m = transform(geoM);\r\n    if (\r\n      squaredSegmentDistance(m[0], m[1], a[0], a[1], b[0], b[1]) <\r\n      squaredTolerance\r\n    ) {\r\n      // If the m point is sufficiently close to the straight line, then we\r\n      // discard it.  Just use the b coordinate and move on to the next line\r\n      // segment.\r\n      flatCoordinates.push(b[0], b[1]);\r\n      key = fracB.toString();\r\n      fractions[key] = true;\r\n    } else {\r\n      // Otherwise, we need to subdivide the current line segment.  Split it\r\n      // into two and push the two line segments onto the stack.\r\n      fractionStack.push(fracB, fracM, fracM, fracA);\r\n      stack.push(b, m, m, a);\r\n      geoStack.push(geoB, geoM, geoM, geoA);\r\n    }\r\n  }\r\n\r\n  return flatCoordinates;\r\n}\r\n\r\n/**\r\n * Generate a great-circle arcs between two lat/lon points.\r\n * @param {number} lon1 Longitude 1 in degrees.\r\n * @param {number} lat1 Latitude 1 in degrees.\r\n * @param {number} lon2 Longitude 2 in degrees.\r\n * @param {number} lat2 Latitude 2 in degrees.\r\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nexport function greatCircleArc(\r\n  lon1,\r\n  lat1,\r\n  lon2,\r\n  lat2,\r\n  projection,\r\n  squaredTolerance,\r\n) {\r\n  const geoProjection = getProjection('EPSG:4326');\r\n\r\n  const cosLat1 = Math.cos(toRadians(lat1));\r\n  const sinLat1 = Math.sin(toRadians(lat1));\r\n  const cosLat2 = Math.cos(toRadians(lat2));\r\n  const sinLat2 = Math.sin(toRadians(lat2));\r\n  const cosDeltaLon = Math.cos(toRadians(lon2 - lon1));\r\n  const sinDeltaLon = Math.sin(toRadians(lon2 - lon1));\r\n  const d = sinLat1 * sinLat2 + cosLat1 * cosLat2 * cosDeltaLon;\r\n\r\n  return line(\r\n    /**\r\n     * @param {number} frac Fraction.\r\n     * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\r\n     */\r\n    function (frac) {\r\n      if (1 <= d) {\r\n        return [lon2, lat2];\r\n      }\r\n      const D = frac * Math.acos(d);\r\n      const cosD = Math.cos(D);\r\n      const sinD = Math.sin(D);\r\n      const y = sinDeltaLon * cosLat2;\r\n      const x = cosLat1 * sinLat2 - sinLat1 * cosLat2 * cosDeltaLon;\r\n      const theta = Math.atan2(y, x);\r\n      const lat = Math.asin(sinLat1 * cosD + cosLat1 * sinD * Math.cos(theta));\r\n      const lon =\r\n        toRadians(lon1) +\r\n        Math.atan2(\r\n          Math.sin(theta) * sinD * cosLat1,\r\n          cosD - sinLat1 * Math.sin(lat),\r\n        );\r\n      return [toDegrees(lon), toDegrees(lat)];\r\n    },\r\n    getTransform(geoProjection, projection),\r\n    squaredTolerance,\r\n  );\r\n}\r\n\r\n/**\r\n * Generate a meridian (line at constant longitude).\r\n * @param {number} lon Longitude.\r\n * @param {number} lat1 Latitude 1.\r\n * @param {number} lat2 Latitude 2.\r\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nexport function meridian(lon, lat1, lat2, projection, squaredTolerance) {\r\n  const epsg4326Projection = getProjection('EPSG:4326');\r\n  return line(\r\n    /**\r\n     * @param {number} frac Fraction.\r\n     * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\r\n     */\r\n    function (frac) {\r\n      return [lon, lat1 + (lat2 - lat1) * frac];\r\n    },\r\n    getTransform(epsg4326Projection, projection),\r\n    squaredTolerance,\r\n  );\r\n}\r\n\r\n/**\r\n * Generate a parallel (line at constant latitude).\r\n * @param {number} lat Latitude.\r\n * @param {number} lon1 Longitude 1.\r\n * @param {number} lon2 Longitude 2.\r\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nexport function parallel(lat, lon1, lon2, projection, squaredTolerance) {\r\n  const epsg4326Projection = getProjection('EPSG:4326');\r\n  return line(\r\n    /**\r\n     * @param {number} frac Fraction.\r\n     * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\r\n     */\r\n    function (frac) {\r\n      return [lon1 + (lon2 - lon1) * frac, lat];\r\n    },\r\n    getTransform(epsg4326Projection, projection),\r\n    squaredTolerance,\r\n  );\r\n}\r\n"],"mappings":";AAAA;AACA;AACA;AACA,SAAQA,GAAG,IAAIC,aAAa,EAAEC,YAAY,QAAO,eAAe;AAChE,SAAQC,sBAAsB,EAAEC,SAAS,EAAEC,SAAS,QAAO,eAAe;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACC,WAAW,EAAEC,SAAS,EAAEC,gBAAgB,EAAE;EACtD;EACA;;EAEA;EACA,MAAMC,eAAe,GAAG,EAAE;EAE1B,IAAIC,IAAI,GAAGJ,WAAW,CAAC,CAAC,CAAC;EACzB,IAAIK,IAAI,GAAGL,WAAW,CAAC,CAAC,CAAC;EAEzB,IAAIM,CAAC,GAAGL,SAAS,CAACG,IAAI,CAAC;EACvB,IAAIG,CAAC,GAAGN,SAAS,CAACI,IAAI,CAAC;;EAEvB;EACA,MAAMG,QAAQ,GAAG,CAACH,IAAI,EAAED,IAAI,CAAC;EAC7B;EACA,MAAMK,KAAK,GAAG,CAACF,CAAC,EAAED,CAAC,CAAC;EACpB;EACA,MAAMI,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;EAE5B;EACA,MAAMC,SAAS,GAAG,CAAC,CAAC;EAEpB,IAAIC,aAAa,GAAG,GAAG;EACvB,IAAIC,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,GAAG;EAErC,OAAO,EAAEN,aAAa,GAAG,CAAC,IAAIF,aAAa,CAACS,MAAM,GAAG,CAAC,EAAE;IACtD;IACAJ,KAAK,GAAGL,aAAa,CAACU,GAAG,CAAC,CAAC;IAC3BhB,IAAI,GAAGI,QAAQ,CAACY,GAAG,CAAC,CAAC;IACrBd,CAAC,GAAGG,KAAK,CAACW,GAAG,CAAC,CAAC;IACf;IACAF,GAAG,GAAGH,KAAK,CAACM,QAAQ,CAAC,CAAC;IACtB,IAAI,EAAEH,GAAG,IAAIP,SAAS,CAAC,EAAE;MACvBR,eAAe,CAACmB,IAAI,CAAChB,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC;MAChCK,SAAS,CAACO,GAAG,CAAC,GAAG,IAAI;IACvB;IACA;IACAF,KAAK,GAAGN,aAAa,CAACU,GAAG,CAAC,CAAC;IAC3Bf,IAAI,GAAGG,QAAQ,CAACY,GAAG,CAAC,CAAC;IACrBb,CAAC,GAAGE,KAAK,CAACW,GAAG,CAAC,CAAC;IACf;IACAH,KAAK,GAAG,CAACF,KAAK,GAAGC,KAAK,IAAI,CAAC;IAC3BH,IAAI,GAAGb,WAAW,CAACiB,KAAK,CAAC;IACzBH,CAAC,GAAGb,SAAS,CAACY,IAAI,CAAC;IACnB,IACEjB,sBAAsB,CAACkB,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAER,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,GAC1DL,gBAAgB,EAChB;MACA;MACA;MACA;MACAC,eAAe,CAACmB,IAAI,CAACf,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC;MAChCW,GAAG,GAAGF,KAAK,CAACK,QAAQ,CAAC,CAAC;MACtBV,SAAS,CAACO,GAAG,CAAC,GAAG,IAAI;IACvB,CAAC,MAAM;MACL;MACA;MACAR,aAAa,CAACY,IAAI,CAACN,KAAK,EAAEC,KAAK,EAAEA,KAAK,EAAEF,KAAK,CAAC;MAC9CN,KAAK,CAACa,IAAI,CAACf,CAAC,EAAEO,CAAC,EAAEA,CAAC,EAAER,CAAC,CAAC;MACtBE,QAAQ,CAACc,IAAI,CAACjB,IAAI,EAAEQ,IAAI,EAAEA,IAAI,EAAET,IAAI,CAAC;IACvC;EACF;EAEA,OAAOD,eAAe;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASoB,cAAcA,CAC5BC,IAAI,EACJC,IAAI,EACJC,IAAI,EACJC,IAAI,EACJC,UAAU,EACV1B,gBAAgB,EAChB;EACA,MAAM2B,aAAa,GAAGnC,aAAa,CAAC,WAAW,CAAC;EAEhD,MAAMoC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAClC,SAAS,CAAC2B,IAAI,CAAC,CAAC;EACzC,MAAMQ,OAAO,GAAGF,IAAI,CAACG,GAAG,CAACpC,SAAS,CAAC2B,IAAI,CAAC,CAAC;EACzC,MAAMU,OAAO,GAAGJ,IAAI,CAACC,GAAG,CAAClC,SAAS,CAAC6B,IAAI,CAAC,CAAC;EACzC,MAAMS,OAAO,GAAGL,IAAI,CAACG,GAAG,CAACpC,SAAS,CAAC6B,IAAI,CAAC,CAAC;EACzC,MAAMU,WAAW,GAAGN,IAAI,CAACC,GAAG,CAAClC,SAAS,CAAC4B,IAAI,GAAGF,IAAI,CAAC,CAAC;EACpD,MAAMc,WAAW,GAAGP,IAAI,CAACG,GAAG,CAACpC,SAAS,CAAC4B,IAAI,GAAGF,IAAI,CAAC,CAAC;EACpD,MAAMe,CAAC,GAAGN,OAAO,GAAGG,OAAO,GAAGN,OAAO,GAAGK,OAAO,GAAGE,WAAW;EAE7D,OAAOtC,IAAI;EACT;AACJ;AACA;AACA;EACI,UAAUyC,IAAI,EAAE;IACd,IAAI,CAAC,IAAID,CAAC,EAAE;MACV,OAAO,CAACb,IAAI,EAAEC,IAAI,CAAC;IACrB;IACA,MAAMc,CAAC,GAAGD,IAAI,GAAGT,IAAI,CAACW,IAAI,CAACH,CAAC,CAAC;IAC7B,MAAMI,IAAI,GAAGZ,IAAI,CAACC,GAAG,CAACS,CAAC,CAAC;IACxB,MAAMG,IAAI,GAAGb,IAAI,CAACG,GAAG,CAACO,CAAC,CAAC;IACxB,MAAMI,CAAC,GAAGP,WAAW,GAAGH,OAAO;IAC/B,MAAMW,CAAC,GAAGhB,OAAO,GAAGM,OAAO,GAAGH,OAAO,GAAGE,OAAO,GAAGE,WAAW;IAC7D,MAAMU,KAAK,GAAGhB,IAAI,CAACiB,KAAK,CAACH,CAAC,EAAEC,CAAC,CAAC;IAC9B,MAAMG,GAAG,GAAGlB,IAAI,CAACmB,IAAI,CAACjB,OAAO,GAAGU,IAAI,GAAGb,OAAO,GAAGc,IAAI,GAAGb,IAAI,CAACC,GAAG,CAACe,KAAK,CAAC,CAAC;IACxE,MAAMI,GAAG,GACPrD,SAAS,CAAC0B,IAAI,CAAC,GACfO,IAAI,CAACiB,KAAK,CACRjB,IAAI,CAACG,GAAG,CAACa,KAAK,CAAC,GAAGH,IAAI,GAAGd,OAAO,EAChCa,IAAI,GAAGV,OAAO,GAAGF,IAAI,CAACG,GAAG,CAACe,GAAG,CAC/B,CAAC;IACH,OAAO,CAACpD,SAAS,CAACsD,GAAG,CAAC,EAAEtD,SAAS,CAACoD,GAAG,CAAC,CAAC;EACzC,CAAC,EACDtD,YAAY,CAACkC,aAAa,EAAED,UAAU,CAAC,EACvC1B,gBACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkD,QAAQA,CAACD,GAAG,EAAE1B,IAAI,EAAEE,IAAI,EAAEC,UAAU,EAAE1B,gBAAgB,EAAE;EACtE,MAAMmD,kBAAkB,GAAG3D,aAAa,CAAC,WAAW,CAAC;EACrD,OAAOK,IAAI;EACT;AACJ;AACA;AACA;EACI,UAAUyC,IAAI,EAAE;IACd,OAAO,CAACW,GAAG,EAAE1B,IAAI,GAAG,CAACE,IAAI,GAAGF,IAAI,IAAIe,IAAI,CAAC;EAC3C,CAAC,EACD7C,YAAY,CAAC0D,kBAAkB,EAAEzB,UAAU,CAAC,EAC5C1B,gBACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASoD,QAAQA,CAACL,GAAG,EAAEzB,IAAI,EAAEE,IAAI,EAAEE,UAAU,EAAE1B,gBAAgB,EAAE;EACtE,MAAMmD,kBAAkB,GAAG3D,aAAa,CAAC,WAAW,CAAC;EACrD,OAAOK,IAAI;EACT;AACJ;AACA;AACA;EACI,UAAUyC,IAAI,EAAE;IACd,OAAO,CAAChB,IAAI,GAAG,CAACE,IAAI,GAAGF,IAAI,IAAIgB,IAAI,EAAES,GAAG,CAAC;EAC3C,CAAC,EACDtD,YAAY,CAAC0D,kBAAkB,EAAEzB,UAAU,CAAC,EAC5C1B,gBACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}