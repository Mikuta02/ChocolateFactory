{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @module ol/VectorRenderTile\r\n */\nimport Tile from './Tile.js';\nimport { createCanvasContext2D, releaseCanvas } from './dom.js';\nimport { getUid } from './util.js';\n\n/**\r\n * @typedef {Object} ReplayState\r\n * @property {boolean} dirty Dirty.\r\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\r\n * @property {number} renderedTileRevision RenderedTileRevision.\r\n * @property {number} renderedResolution RenderedResolution.\r\n * @property {number} renderedRevision RenderedRevision.\r\n * @property {number} renderedTileResolution RenderedTileResolution.\r\n * @property {number} renderedTileZ RenderedTileZ.\r\n */\n\n/**\r\n * @type {Array<HTMLCanvasElement>}\r\n */\nconst canvasPool = [];\nclass VectorRenderTile extends Tile {\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\r\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\r\n   * to get source tiles for this tile.\r\n   */\n  constructor(tileCoord, state, urlTileCoord, getSourceTiles) {\n    super(tileCoord, state, {\n      transition: 0\n    });\n\n    /**\r\n     * @private\r\n     * @type {!Object<string, CanvasRenderingContext2D>}\r\n     */\n    this.context_ = {};\n\n    /**\r\n     * Executor groups by layer uid. Entries are read/written by the renderer.\r\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\r\n     */\n    this.executorGroups = {};\n\n    /**\r\n     * Number of loading source tiles. Read/written by the source.\r\n     * @type {number}\r\n     */\n    this.loadingSourceTiles = 0;\n\n    /**\r\n     * @type {Object<number, ImageData>}\r\n     */\n    this.hitDetectionImageData = {};\n\n    /**\r\n     * @private\r\n     * @type {!Object<string, ReplayState>}\r\n     */\n    this.replayState_ = {};\n\n    /**\r\n     * @type {Array<import(\"./VectorTile.js\").default>}\r\n     */\n    this.sourceTiles = [];\n\n    /**\r\n     * @type {Object<string, boolean>}\r\n     */\n    this.errorTileKeys = {};\n\n    /**\r\n     * @type {number}\r\n     */\n    this.wantedResolution;\n\n    /**\r\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\r\n     */\n    this.getSourceTiles = getSourceTiles.bind(undefined, this);\n\n    /**\r\n     * @type {import(\"./tilecoord.js\").TileCoord}\r\n     */\n    this.wrappedTileCoord = urlTileCoord;\n  }\n\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {CanvasRenderingContext2D} The rendering context.\r\n   */\n  getContext(layer) {\n    const key = getUid(layer);\n    if (!(key in this.context_)) {\n      this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n    }\n    return this.context_[key];\n  }\n\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {boolean} Tile has a rendering context for the given layer.\r\n   */\n  hasContext(layer) {\n    return getUid(layer) in this.context_;\n  }\n\n  /**\r\n   * Get the Canvas for this tile.\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   */\n  getImage(layer) {\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n  }\n\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {ReplayState} The replay state.\r\n   */\n  getReplayState(layer) {\n    const key = getUid(layer);\n    if (!(key in this.replayState_)) {\n      this.replayState_[key] = {\n        dirty: false,\n        renderedRenderOrder: null,\n        renderedResolution: NaN,\n        renderedRevision: -1,\n        renderedTileResolution: NaN,\n        renderedTileRevision: -1,\n        renderedTileZ: -1\n      };\n    }\n    return this.replayState_[key];\n  }\n\n  /**\r\n   * Load the tile.\r\n   */\n  load() {\n    this.getSourceTiles();\n  }\n\n  /**\r\n   * Remove from the cache due to expiry\r\n   */\n  release() {\n    for (const key in this.context_) {\n      const context = this.context_[key];\n      releaseCanvas(context);\n      canvasPool.push(context.canvas);\n      delete this.context_[key];\n    }\n    super.release();\n  }\n}\nexport default VectorRenderTile;","map":{"version":3,"names":["Tile","createCanvasContext2D","releaseCanvas","getUid","canvasPool","VectorRenderTile","constructor","tileCoord","state","urlTileCoord","getSourceTiles","transition","context_","executorGroups","loadingSourceTiles","hitDetectionImageData","replayState_","sourceTiles","errorTileKeys","wantedResolution","bind","undefined","wrappedTileCoord","getContext","layer","key","hasContext","getImage","canvas","getReplayState","dirty","renderedRenderOrder","renderedResolution","NaN","renderedRevision","renderedTileResolution","renderedTileRevision","renderedTileZ","load","release","context","push"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/VectorRenderTile.js"],"sourcesContent":["/**\r\n * @module ol/VectorRenderTile\r\n */\r\nimport Tile from './Tile.js';\r\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\r\nimport {getUid} from './util.js';\r\n\r\n/**\r\n * @typedef {Object} ReplayState\r\n * @property {boolean} dirty Dirty.\r\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\r\n * @property {number} renderedTileRevision RenderedTileRevision.\r\n * @property {number} renderedResolution RenderedResolution.\r\n * @property {number} renderedRevision RenderedRevision.\r\n * @property {number} renderedTileResolution RenderedTileResolution.\r\n * @property {number} renderedTileZ RenderedTileZ.\r\n */\r\n\r\n/**\r\n * @type {Array<HTMLCanvasElement>}\r\n */\r\nconst canvasPool = [];\r\n\r\nclass VectorRenderTile extends Tile {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\r\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\r\n   * to get source tiles for this tile.\r\n   */\r\n  constructor(tileCoord, state, urlTileCoord, getSourceTiles) {\r\n    super(tileCoord, state, {transition: 0});\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, CanvasRenderingContext2D>}\r\n     */\r\n    this.context_ = {};\r\n\r\n    /**\r\n     * Executor groups by layer uid. Entries are read/written by the renderer.\r\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\r\n     */\r\n    this.executorGroups = {};\r\n\r\n    /**\r\n     * Number of loading source tiles. Read/written by the source.\r\n     * @type {number}\r\n     */\r\n    this.loadingSourceTiles = 0;\r\n\r\n    /**\r\n     * @type {Object<number, ImageData>}\r\n     */\r\n    this.hitDetectionImageData = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, ReplayState>}\r\n     */\r\n    this.replayState_ = {};\r\n\r\n    /**\r\n     * @type {Array<import(\"./VectorTile.js\").default>}\r\n     */\r\n    this.sourceTiles = [];\r\n\r\n    /**\r\n     * @type {Object<string, boolean>}\r\n     */\r\n    this.errorTileKeys = {};\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.wantedResolution;\r\n\r\n    /**\r\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\r\n     */\r\n    this.getSourceTiles = getSourceTiles.bind(undefined, this);\r\n\r\n    /**\r\n     * @type {import(\"./tilecoord.js\").TileCoord}\r\n     */\r\n    this.wrappedTileCoord = urlTileCoord;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {CanvasRenderingContext2D} The rendering context.\r\n   */\r\n  getContext(layer) {\r\n    const key = getUid(layer);\r\n    if (!(key in this.context_)) {\r\n      this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\r\n    }\r\n    return this.context_[key];\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {boolean} Tile has a rendering context for the given layer.\r\n   */\r\n  hasContext(layer) {\r\n    return getUid(layer) in this.context_;\r\n  }\r\n\r\n  /**\r\n   * Get the Canvas for this tile.\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   */\r\n  getImage(layer) {\r\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {ReplayState} The replay state.\r\n   */\r\n  getReplayState(layer) {\r\n    const key = getUid(layer);\r\n    if (!(key in this.replayState_)) {\r\n      this.replayState_[key] = {\r\n        dirty: false,\r\n        renderedRenderOrder: null,\r\n        renderedResolution: NaN,\r\n        renderedRevision: -1,\r\n        renderedTileResolution: NaN,\r\n        renderedTileRevision: -1,\r\n        renderedTileZ: -1,\r\n      };\r\n    }\r\n    return this.replayState_[key];\r\n  }\r\n\r\n  /**\r\n   * Load the tile.\r\n   */\r\n  load() {\r\n    this.getSourceTiles();\r\n  }\r\n\r\n  /**\r\n   * Remove from the cache due to expiry\r\n   */\r\n  release() {\r\n    for (const key in this.context_) {\r\n      const context = this.context_[key];\r\n      releaseCanvas(context);\r\n      canvasPool.push(context.canvas);\r\n      delete this.context_[key];\r\n    }\r\n    super.release();\r\n  }\r\n}\r\n\r\nexport default VectorRenderTile;\r\n"],"mappings":";AAAA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,WAAW;AAC5B,SAAQC,qBAAqB,EAAEC,aAAa,QAAO,UAAU;AAC7D,SAAQC,MAAM,QAAO,WAAW;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,EAAE;AAErB,MAAMC,gBAAgB,SAASL,IAAI,CAAC;EAClC;AACF;AACA;AACA;AACA;AACA;AACA;EACEM,WAAWA,CAACC,SAAS,EAAEC,KAAK,EAAEC,YAAY,EAAEC,cAAc,EAAE;IAC1D,KAAK,CAACH,SAAS,EAAEC,KAAK,EAAE;MAACG,UAAU,EAAE;IAAC,CAAC,CAAC;;IAExC;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;;IAElB;AACJ;AACA;AACA;IACI,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC;;IAExB;AACJ;AACA;AACA;IACI,IAAI,CAACC,kBAAkB,GAAG,CAAC;;IAE3B;AACJ;AACA;IACI,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAC;;IAE/B;AACJ;AACA;AACA;IACI,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;;IAEtB;AACJ;AACA;IACI,IAAI,CAACC,WAAW,GAAG,EAAE;;IAErB;AACJ;AACA;IACI,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;;IAEvB;AACJ;AACA;IACI,IAAI,CAACC,gBAAgB;;IAErB;AACJ;AACA;IACI,IAAI,CAACT,cAAc,GAAGA,cAAc,CAACU,IAAI,CAACC,SAAS,EAAE,IAAI,CAAC;;IAE1D;AACJ;AACA;IACI,IAAI,CAACC,gBAAgB,GAAGb,YAAY;EACtC;;EAEA;AACF;AACA;AACA;EACEc,UAAUA,CAACC,KAAK,EAAE;IAChB,MAAMC,GAAG,GAAGtB,MAAM,CAACqB,KAAK,CAAC;IACzB,IAAI,EAAEC,GAAG,IAAI,IAAI,CAACb,QAAQ,CAAC,EAAE;MAC3B,IAAI,CAACA,QAAQ,CAACa,GAAG,CAAC,GAAGxB,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAEG,UAAU,CAAC;IAC9D;IACA,OAAO,IAAI,CAACQ,QAAQ,CAACa,GAAG,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;EACEC,UAAUA,CAACF,KAAK,EAAE;IAChB,OAAOrB,MAAM,CAACqB,KAAK,CAAC,IAAI,IAAI,CAACZ,QAAQ;EACvC;;EAEA;AACF;AACA;AACA;AACA;EACEe,QAAQA,CAACH,KAAK,EAAE;IACd,OAAO,IAAI,CAACE,UAAU,CAACF,KAAK,CAAC,GAAG,IAAI,CAACD,UAAU,CAACC,KAAK,CAAC,CAACI,MAAM,GAAG,IAAI;EACtE;;EAEA;AACF;AACA;AACA;EACEC,cAAcA,CAACL,KAAK,EAAE;IACpB,MAAMC,GAAG,GAAGtB,MAAM,CAACqB,KAAK,CAAC;IACzB,IAAI,EAAEC,GAAG,IAAI,IAAI,CAACT,YAAY,CAAC,EAAE;MAC/B,IAAI,CAACA,YAAY,CAACS,GAAG,CAAC,GAAG;QACvBK,KAAK,EAAE,KAAK;QACZC,mBAAmB,EAAE,IAAI;QACzBC,kBAAkB,EAAEC,GAAG;QACvBC,gBAAgB,EAAE,CAAC,CAAC;QACpBC,sBAAsB,EAAEF,GAAG;QAC3BG,oBAAoB,EAAE,CAAC,CAAC;QACxBC,aAAa,EAAE,CAAC;MAClB,CAAC;IACH;IACA,OAAO,IAAI,CAACrB,YAAY,CAACS,GAAG,CAAC;EAC/B;;EAEA;AACF;AACA;EACEa,IAAIA,CAAA,EAAG;IACL,IAAI,CAAC5B,cAAc,CAAC,CAAC;EACvB;;EAEA;AACF;AACA;EACE6B,OAAOA,CAAA,EAAG;IACR,KAAK,MAAMd,GAAG,IAAI,IAAI,CAACb,QAAQ,EAAE;MAC/B,MAAM4B,OAAO,GAAG,IAAI,CAAC5B,QAAQ,CAACa,GAAG,CAAC;MAClCvB,aAAa,CAACsC,OAAO,CAAC;MACtBpC,UAAU,CAACqC,IAAI,CAACD,OAAO,CAACZ,MAAM,CAAC;MAC/B,OAAO,IAAI,CAAChB,QAAQ,CAACa,GAAG,CAAC;IAC3B;IACA,KAAK,CAACc,OAAO,CAAC,CAAC;EACjB;AACF;AAEA,eAAelC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}