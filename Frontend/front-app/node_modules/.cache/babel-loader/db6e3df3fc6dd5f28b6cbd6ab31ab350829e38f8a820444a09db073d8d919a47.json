{"ast":null,"code":"/**\r\n * @module ol/source/Source\r\n */\nimport BaseObject from '../Object.js';\nimport { get as getProjection } from '../proj.js';\n\n/**\r\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\r\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\r\n */\n\n/**\r\n * A function that takes a {@link import(\"../View.js\").ViewStateLayerStateExtent} and returns a string or\r\n * an array of strings representing source attributions.\r\n *\r\n * @typedef {function(import(\"../View.js\").ViewStateLayerStateExtent): (string|Array<string>)} Attribution\r\n */\n\n/**\r\n * A type that can be used to provide attribution information for data sources.\r\n *\r\n * It represents either\r\n * * a simple string (e.g. `'© Acme Inc.'`)\r\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\r\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\r\n *\r\n * @typedef {string|Array<string>|Attribution} AttributionLike\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {import(\"./Source.js\").State} [state='ready'] State.\r\n * @property {boolean} [wrapX=false] WrapX.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\n\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\r\n *\r\n * A generic `change` event is triggered when the state of the source changes.\r\n * @abstract\r\n * @api\r\n */\nclass Source extends BaseObject {\n  /**\r\n   * @param {Options} options Source options.\r\n   */\n  constructor(options) {\n    super();\n\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|null}\r\n     */\n    this.projection = getProjection(options.projection);\n\n    /**\r\n     * @private\r\n     * @type {?Attribution}\r\n     */\n    this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ? options.attributionsCollapsible : true;\n\n    /**\r\n     * This source is currently loading data. Sources that defer loading to the\r\n     * map's tile queue never set this to `true`.\r\n     * @type {boolean}\r\n     */\n    this.loading = false;\n\n    /**\r\n     * @private\r\n     * @type {import(\"./Source.js\").State}\r\n     */\n    this.state_ = options.state !== undefined ? options.state : 'ready';\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.interpolate_ = !!options.interpolate;\n\n    /**\r\n     * @protected\r\n     * @type {function(import(\"../View.js\").ViewOptions):void}\r\n     */\n    this.viewResolver = null;\n\n    /**\r\n     * @protected\r\n     * @type {function(Error):void}\r\n     */\n    this.viewRejector = null;\n    const self = this;\n    /**\r\n     * @private\r\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\r\n     */\n    this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n  }\n\n  /**\r\n   * Get the attribution function for the source.\r\n   * @return {?Attribution} Attribution function.\r\n   * @api\r\n   */\n  getAttributions() {\n    return this.attributions_;\n  }\n\n  /**\r\n   * @return {boolean} Attributions are collapsible.\r\n   * @api\r\n   */\n  getAttributionsCollapsible() {\n    return this.attributionsCollapsible_;\n  }\n\n  /**\r\n   * Get the projection of the source.\r\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\r\n   * @api\r\n   */\n  getProjection() {\n    return this.projection;\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   */\n  getResolutions(projection) {\n    return null;\n  }\n\n  /**\r\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\r\n   */\n  getView() {\n    return this.viewPromise_;\n  }\n\n  /**\r\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\r\n   * @return {import(\"./Source.js\").State} State.\r\n   * @api\r\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\r\n   * @return {boolean|undefined} Wrap X.\r\n   */\n  getWrapX() {\n    return this.wrapX_;\n  }\n\n  /**\r\n   * @return {boolean} Use linear interpolation when resampling.\r\n   */\n  getInterpolate() {\n    return this.interpolate_;\n  }\n\n  /**\r\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\r\n   * @api\r\n   */\n  refresh() {\n    this.changed();\n  }\n\n  /**\r\n   * Set the attributions of the source.\r\n   * @param {AttributionLike|undefined} attributions Attributions.\r\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\r\n   *     or `undefined`.\r\n   * @api\r\n   */\n  setAttributions(attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  }\n\n  /**\r\n   * Set the state of the source.\r\n   * @param {import(\"./Source.js\").State} state State.\r\n   */\n  setState(state) {\n    this.state_ = state;\n    this.changed();\n  }\n}\n\n/**\r\n * Turns the attributions option into an attributions function.\r\n * @param {AttributionLike|undefined} attributionLike The attribution option.\r\n * @return {Attribution|null} An attribution function (or null).\r\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\nexport default Source;","map":{"version":3,"names":["BaseObject","get","getProjection","Source","constructor","options","projection","attributions_","adaptAttributions","attributions","attributionsCollapsible_","attributionsCollapsible","undefined","loading","state_","state","wrapX_","wrapX","interpolate_","interpolate","viewResolver","viewRejector","self","viewPromise_","Promise","resolve","reject","getAttributions","getAttributionsCollapsible","getResolutions","getView","getState","getWrapX","getInterpolate","refresh","changed","setAttributions","setState","attributionLike","Array","isArray","frameState"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/source/Source.js"],"sourcesContent":["/**\r\n * @module ol/source/Source\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {get as getProjection} from '../proj.js';\r\n\r\n/**\r\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\r\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\r\n */\r\n\r\n/**\r\n * A function that takes a {@link import(\"../View.js\").ViewStateLayerStateExtent} and returns a string or\r\n * an array of strings representing source attributions.\r\n *\r\n * @typedef {function(import(\"../View.js\").ViewStateLayerStateExtent): (string|Array<string>)} Attribution\r\n */\r\n\r\n/**\r\n * A type that can be used to provide attribution information for data sources.\r\n *\r\n * It represents either\r\n * * a simple string (e.g. `'© Acme Inc.'`)\r\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\r\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\r\n *\r\n * @typedef {string|Array<string>|Attribution} AttributionLike\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {import(\"./Source.js\").State} [state='ready'] State.\r\n * @property {boolean} [wrapX=false] WrapX.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\r\n *\r\n * A generic `change` event is triggered when the state of the source changes.\r\n * @abstract\r\n * @api\r\n */\r\nclass Source extends BaseObject {\r\n  /**\r\n   * @param {Options} options Source options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|null}\r\n     */\r\n    this.projection = getProjection(options.projection);\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Attribution}\r\n     */\r\n    this.attributions_ = adaptAttributions(options.attributions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.attributionsCollapsible_ =\r\n      options.attributionsCollapsible !== undefined\r\n        ? options.attributionsCollapsible\r\n        : true;\r\n\r\n    /**\r\n     * This source is currently loading data. Sources that defer loading to the\r\n     * map's tile queue never set this to `true`.\r\n     * @type {boolean}\r\n     */\r\n    this.loading = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Source.js\").State}\r\n     */\r\n    this.state_ = options.state !== undefined ? options.state : 'ready';\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.interpolate_ = !!options.interpolate;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {function(import(\"../View.js\").ViewOptions):void}\r\n     */\r\n    this.viewResolver = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {function(Error):void}\r\n     */\r\n    this.viewRejector = null;\r\n\r\n    const self = this;\r\n    /**\r\n     * @private\r\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\r\n     */\r\n    this.viewPromise_ = new Promise(function (resolve, reject) {\r\n      self.viewResolver = resolve;\r\n      self.viewRejector = reject;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the attribution function for the source.\r\n   * @return {?Attribution} Attribution function.\r\n   * @api\r\n   */\r\n  getAttributions() {\r\n    return this.attributions_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Attributions are collapsible.\r\n   * @api\r\n   */\r\n  getAttributionsCollapsible() {\r\n    return this.attributionsCollapsible_;\r\n  }\r\n\r\n  /**\r\n   * Get the projection of the source.\r\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\r\n   * @api\r\n   */\r\n  getProjection() {\r\n    return this.projection;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   */\r\n  getResolutions(projection) {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\r\n   */\r\n  getView() {\r\n    return this.viewPromise_;\r\n  }\r\n\r\n  /**\r\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\r\n   * @return {import(\"./Source.js\").State} State.\r\n   * @api\r\n   */\r\n  getState() {\r\n    return this.state_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean|undefined} Wrap X.\r\n   */\r\n  getWrapX() {\r\n    return this.wrapX_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Use linear interpolation when resampling.\r\n   */\r\n  getInterpolate() {\r\n    return this.interpolate_;\r\n  }\r\n\r\n  /**\r\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\r\n   * @api\r\n   */\r\n  refresh() {\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the attributions of the source.\r\n   * @param {AttributionLike|undefined} attributions Attributions.\r\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\r\n   *     or `undefined`.\r\n   * @api\r\n   */\r\n  setAttributions(attributions) {\r\n    this.attributions_ = adaptAttributions(attributions);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the state of the source.\r\n   * @param {import(\"./Source.js\").State} state State.\r\n   */\r\n  setState(state) {\r\n    this.state_ = state;\r\n    this.changed();\r\n  }\r\n}\r\n\r\n/**\r\n * Turns the attributions option into an attributions function.\r\n * @param {AttributionLike|undefined} attributionLike The attribution option.\r\n * @return {Attribution|null} An attribution function (or null).\r\n */\r\nfunction adaptAttributions(attributionLike) {\r\n  if (!attributionLike) {\r\n    return null;\r\n  }\r\n  if (Array.isArray(attributionLike)) {\r\n    return function (frameState) {\r\n      return attributionLike;\r\n    };\r\n  }\r\n\r\n  if (typeof attributionLike === 'function') {\r\n    return attributionLike;\r\n  }\r\n\r\n  return function (frameState) {\r\n    return [attributionLike];\r\n  };\r\n}\r\n\r\nexport default Source;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}