{"ast":null,"code":"/**\r\n * @module ol/events/condition\r\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { MAC, WEBKIT } from '../has.js';\nimport { assert } from '../asserts.js';\n\n/**\r\n * A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * `{boolean}`. If the condition is met, true should be returned.\r\n *\r\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\r\n */\n\n/**\r\n * Creates a condition function that passes when all provided conditions pass.\r\n * @param {...Condition} var_args Conditions to check.\r\n * @return {Condition} Condition function.\r\n */\nexport function all(var_args) {\n  const conditions = arguments;\n  /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\r\n   * @return {boolean} All conditions passed.\r\n   */\n  return function (event) {\n    let pass = true;\n    for (let i = 0, ii = conditions.length; i < ii; ++i) {\n      pass = pass && conditions[i](event);\n      if (!pass) {\n        break;\n      }\n    }\n    return pass;\n  };\n}\n\n/**\r\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\r\n * additionally the shift-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the alt key is pressed.\r\n * @api\r\n */\nexport const altKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n\n/**\r\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\r\n * (e.g. when additionally the platform-modifier-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the alt and shift keys are pressed.\r\n * @api\r\n */\nexport const altShiftKeysOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\n\n/**\r\n * Return `true` if the map has the focus. This condition requires a map target\r\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\r\n * @return {boolean} The map has the focus.\r\n * @api\r\n */\nexport const focus = function (event) {\n  const targetElement = event.map.getTargetElement();\n  const activeElement = event.map.getOwnerDocument().activeElement;\n  return targetElement.contains(activeElement);\n};\n\n/**\r\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\r\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\r\n */\nexport const focusWithTabindex = function (event) {\n  return event.map.getTargetElement().hasAttribute('tabindex') ? focus(event) : true;\n};\n\n/**\r\n * Return always true.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True.\r\n * @api\r\n */\nexport const always = TRUE;\n\n/**\r\n * Return `true` if the event is a `click` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `click` event.\r\n * @api\r\n */\nexport const click = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n\n/**\r\n * Return `true` if the event has an \"action\"-producing mouse button.\r\n *\r\n * By definition, this includes left-click on windows/linux, and left-click\r\n * without the ctrl key on Macs.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} The result.\r\n */\nexport const mouseActionButton = function (mapBrowserEvent) {\n  const originalEvent = /** @type {MouseEvent} */\n  mapBrowserEvent.originalEvent;\n  return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);\n};\n\n/**\r\n * Return always false.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} False.\r\n * @api\r\n */\nexport const never = FALSE;\n\n/**\r\n * Return `true` if the browser event is a `pointermove` event, `false`\r\n * otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the browser event is a `pointermove` event.\r\n * @api\r\n */\nexport const pointerMove = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == 'pointermove';\n};\n\n/**\r\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `singleclick` event.\r\n * @api\r\n */\nexport const singleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n\n/**\r\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `dblclick` event.\r\n * @api\r\n */\nexport const doubleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n\n/**\r\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\r\n * pressed.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True only if there no modifier keys are pressed.\r\n * @api\r\n */\nexport const noModifierKeys = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n\n/**\r\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\r\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\r\n * the shift-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the platform modifier key is pressed.\r\n * @api\r\n */\nexport const platformModifierKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n\n/**\r\n * Return `true` if the platform-modifier-key (the meta-key on Mac,\r\n * ctrl-key otherwise) is pressed.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the platform modifier key is pressed.\r\n * @api\r\n */\nexport const platformModifierKey = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return MAC ? originalEvent.metaKey : originalEvent.ctrlKey;\n};\n\n/**\r\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\r\n * additionally the alt-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the shift key is pressed.\r\n * @api\r\n */\nexport const shiftKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\n\n/**\r\n * Return `true` if the target element is not editable, i.e. not an `input`,\r\n * `select`, or `textarea` element and no `contenteditable` attribute is\r\n * set or inherited, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True only if the target element is not editable.\r\n * @api\r\n */\nexport const targetNotEditable = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  const tagName = /** @type {Element} */originalEvent.target.tagName;\n  return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA' &&\n  // `isContentEditable` is only available on `HTMLElement`, but it may also be a\n  // different type like `SVGElement`.\n  // @ts-ignore\n  !originalEvent.target.isContentEditable;\n};\n\n/**\r\n * Return `true` if the event originates from a mouse device.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a mouse device.\r\n * @api\r\n */\nexport const mouseOnly = function (mapBrowserEvent) {\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */mapBrowserEvent.originalEvent;\n  assert(pointerEvent !== undefined, 'mapBrowserEvent must originate from a pointer event');\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvent.pointerType == 'mouse';\n};\n\n/**\r\n * Return `true` if the event originates from a touchable device.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a touchable device.\r\n * @api\r\n */\nexport const touchOnly = function (mapBrowserEvent) {\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */mapBrowserEvent.originalEvent;\n  assert(pointerEvt !== undefined, 'mapBrowserEvent must originate from a pointer event');\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvt.pointerType === 'touch';\n};\n\n/**\r\n * Return `true` if the event originates from a digital pen.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a digital pen.\r\n * @api\r\n */\nexport const penOnly = function (mapBrowserEvent) {\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */mapBrowserEvent.originalEvent;\n  assert(pointerEvt !== undefined, 'mapBrowserEvent must originate from a pointer event');\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvt.pointerType === 'pen';\n};\n\n/**\r\n * Return `true` if the event originates from a primary pointer in\r\n * contact with the surface or if the left mouse button is pressed.\r\n * See https://www.w3.org/TR/pointerevents/#button-states.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a primary pointer.\r\n * @api\r\n */\nexport const primaryAction = function (mapBrowserEvent) {\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */mapBrowserEvent.originalEvent;\n  assert(pointerEvent !== undefined, 'mapBrowserEvent must originate from a pointer event');\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\n};","map":{"version":3,"names":["MapBrowserEventType","FALSE","TRUE","MAC","WEBKIT","assert","all","var_args","conditions","arguments","event","pass","i","ii","length","altKeyOnly","mapBrowserEvent","originalEvent","altKey","metaKey","ctrlKey","shiftKey","altShiftKeysOnly","focus","targetElement","map","getTargetElement","activeElement","getOwnerDocument","contains","focusWithTabindex","hasAttribute","always","click","type","CLICK","mouseActionButton","button","never","pointerMove","singleClick","SINGLECLICK","doubleClick","DBLCLICK","noModifierKeys","platformModifierKeyOnly","platformModifierKey","shiftKeyOnly","targetNotEditable","tagName","target","isContentEditable","mouseOnly","pointerEvent","undefined","pointerType","touchOnly","pointerEvt","penOnly","primaryAction","isPrimary"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/events/condition.js"],"sourcesContent":["/**\r\n * @module ol/events/condition\r\n */\r\nimport MapBrowserEventType from '../MapBrowserEventType.js';\r\nimport {FALSE, TRUE} from '../functions.js';\r\nimport {MAC, WEBKIT} from '../has.js';\r\nimport {assert} from '../asserts.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * `{boolean}`. If the condition is met, true should be returned.\r\n *\r\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\r\n */\r\n\r\n/**\r\n * Creates a condition function that passes when all provided conditions pass.\r\n * @param {...Condition} var_args Conditions to check.\r\n * @return {Condition} Condition function.\r\n */\r\nexport function all(var_args) {\r\n  const conditions = arguments;\r\n  /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\r\n   * @return {boolean} All conditions passed.\r\n   */\r\n  return function (event) {\r\n    let pass = true;\r\n    for (let i = 0, ii = conditions.length; i < ii; ++i) {\r\n      pass = pass && conditions[i](event);\r\n      if (!pass) {\r\n        break;\r\n      }\r\n    }\r\n    return pass;\r\n  };\r\n}\r\n\r\n/**\r\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\r\n * additionally the shift-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the alt key is pressed.\r\n * @api\r\n */\r\nexport const altKeyOnly = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return (\r\n    originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\r\n * (e.g. when additionally the platform-modifier-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the alt and shift keys are pressed.\r\n * @api\r\n */\r\nexport const altShiftKeysOnly = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return (\r\n    originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the map has the focus. This condition requires a map target\r\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\r\n * @return {boolean} The map has the focus.\r\n * @api\r\n */\r\nexport const focus = function (event) {\r\n  const targetElement = event.map.getTargetElement();\r\n  const activeElement = event.map.getOwnerDocument().activeElement;\r\n  return targetElement.contains(activeElement);\r\n};\r\n\r\n/**\r\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\r\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\r\n */\r\nexport const focusWithTabindex = function (event) {\r\n  return event.map.getTargetElement().hasAttribute('tabindex')\r\n    ? focus(event)\r\n    : true;\r\n};\r\n\r\n/**\r\n * Return always true.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True.\r\n * @api\r\n */\r\nexport const always = TRUE;\r\n\r\n/**\r\n * Return `true` if the event is a `click` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `click` event.\r\n * @api\r\n */\r\nexport const click = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\r\n};\r\n\r\n/**\r\n * Return `true` if the event has an \"action\"-producing mouse button.\r\n *\r\n * By definition, this includes left-click on windows/linux, and left-click\r\n * without the ctrl key on Macs.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} The result.\r\n */\r\nexport const mouseActionButton = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {MouseEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);\r\n};\r\n\r\n/**\r\n * Return always false.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} False.\r\n * @api\r\n */\r\nexport const never = FALSE;\r\n\r\n/**\r\n * Return `true` if the browser event is a `pointermove` event, `false`\r\n * otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the browser event is a `pointermove` event.\r\n * @api\r\n */\r\nexport const pointerMove = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == 'pointermove';\r\n};\r\n\r\n/**\r\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `singleclick` event.\r\n * @api\r\n */\r\nexport const singleClick = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\r\n};\r\n\r\n/**\r\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `dblclick` event.\r\n * @api\r\n */\r\nexport const doubleClick = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\r\n};\r\n\r\n/**\r\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\r\n * pressed.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True only if there no modifier keys are pressed.\r\n * @api\r\n */\r\nexport const noModifierKeys = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return (\r\n    !originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\r\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\r\n * the shift-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the platform modifier key is pressed.\r\n * @api\r\n */\r\nexport const platformModifierKeyOnly = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return (\r\n    !originalEvent.altKey &&\r\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the platform-modifier-key (the meta-key on Mac,\r\n * ctrl-key otherwise) is pressed.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the platform modifier key is pressed.\r\n * @api\r\n */\r\nexport const platformModifierKey = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return MAC ? originalEvent.metaKey : originalEvent.ctrlKey;\r\n};\r\n\r\n/**\r\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\r\n * additionally the alt-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the shift key is pressed.\r\n * @api\r\n */\r\nexport const shiftKeyOnly = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return (\r\n    !originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the target element is not editable, i.e. not an `input`,\r\n * `select`, or `textarea` element and no `contenteditable` attribute is\r\n * set or inherited, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True only if the target element is not editable.\r\n * @api\r\n */\r\nexport const targetNotEditable = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  const tagName = /** @type {Element} */ (originalEvent.target).tagName;\r\n  return (\r\n    tagName !== 'INPUT' &&\r\n    tagName !== 'SELECT' &&\r\n    tagName !== 'TEXTAREA' &&\r\n    // `isContentEditable` is only available on `HTMLElement`, but it may also be a\r\n    // different type like `SVGElement`.\r\n    // @ts-ignore\r\n    !originalEvent.target.isContentEditable\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a mouse device.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a mouse device.\r\n * @api\r\n */\r\nexport const mouseOnly = function (mapBrowserEvent) {\r\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (\r\n    mapBrowserEvent\r\n  ).originalEvent;\r\n  assert(\r\n    pointerEvent !== undefined,\r\n    'mapBrowserEvent must originate from a pointer event',\r\n  );\r\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\r\n  return pointerEvent.pointerType == 'mouse';\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a touchable device.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a touchable device.\r\n * @api\r\n */\r\nexport const touchOnly = function (mapBrowserEvent) {\r\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (\r\n    mapBrowserEvent\r\n  ).originalEvent;\r\n  assert(\r\n    pointerEvt !== undefined,\r\n    'mapBrowserEvent must originate from a pointer event',\r\n  );\r\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\r\n  return pointerEvt.pointerType === 'touch';\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a digital pen.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a digital pen.\r\n * @api\r\n */\r\nexport const penOnly = function (mapBrowserEvent) {\r\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (\r\n    mapBrowserEvent\r\n  ).originalEvent;\r\n  assert(\r\n    pointerEvt !== undefined,\r\n    'mapBrowserEvent must originate from a pointer event',\r\n  );\r\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\r\n  return pointerEvt.pointerType === 'pen';\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a primary pointer in\r\n * contact with the surface or if the left mouse button is pressed.\r\n * See https://www.w3.org/TR/pointerevents/#button-states.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a primary pointer.\r\n * @api\r\n */\r\nexport const primaryAction = function (mapBrowserEvent) {\r\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (\r\n    mapBrowserEvent\r\n  ).originalEvent;\r\n  assert(\r\n    pointerEvent !== undefined,\r\n    'mapBrowserEvent must originate from a pointer event',\r\n  );\r\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}