{"ast":null,"code":"/**\r\n * @module ol/style/Circle\r\n */\n\nimport RegularShape from './RegularShape.js';\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} radius Circle radius.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {Array<number>} [displacement=[0,0]] displacement\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\r\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\r\n * @property {number} [rotation=0] Rotation in radians\r\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\r\n * (meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode\r\n */\n\n/**\r\n * @classdesc\r\n * Set circle style for vector features.\r\n * @api\r\n */\nclass CircleStyle extends RegularShape {\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\n  constructor(options) {\n    options = options ? options : {\n      radius: 5\n    };\n    super({\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      scale: options.scale !== undefined ? options.scale : 1,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode\n    });\n  }\n\n  /**\r\n   * Clones the style.\r\n   * @return {CircleStyle} The cloned style.\r\n   * @api\r\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode()\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\r\n   * Set the circle radius.\r\n   *\r\n   * @param {number} radius Circle radius.\r\n   * @api\r\n   */\n  setRadius(radius) {\n    this.radius_ = radius;\n    this.render();\n  }\n}\nexport default CircleStyle;","map":{"version":3,"names":["RegularShape","CircleStyle","constructor","options","radius","points","Infinity","fill","stroke","scale","undefined","rotation","rotateWithView","displacement","declutterMode","clone","getScale","style","getFill","getStroke","getRadius","Array","isArray","slice","getRotation","getRotateWithView","getDisplacement","getDeclutterMode","setOpacity","getOpacity","setRadius","radius_","render"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/style/Circle.js"],"sourcesContent":["/**\r\n * @module ol/style/Circle\r\n */\r\n\r\nimport RegularShape from './RegularShape.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} radius Circle radius.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {Array<number>} [displacement=[0,0]] displacement\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\r\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\r\n * @property {number} [rotation=0] Rotation in radians\r\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\r\n * (meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set circle style for vector features.\r\n * @api\r\n */\r\nclass CircleStyle extends RegularShape {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {radius: 5};\r\n\r\n    super({\r\n      points: Infinity,\r\n      fill: options.fill,\r\n      radius: options.radius,\r\n      stroke: options.stroke,\r\n      scale: options.scale !== undefined ? options.scale : 1,\r\n      rotation: options.rotation !== undefined ? options.rotation : 0,\r\n      rotateWithView:\r\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n      declutterMode: options.declutterMode,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {CircleStyle} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    const style = new CircleStyle({\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      radius: this.getRadius(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n    style.setOpacity(this.getOpacity());\r\n    return style;\r\n  }\r\n\r\n  /**\r\n   * Set the circle radius.\r\n   *\r\n   * @param {number} radius Circle radius.\r\n   * @api\r\n   */\r\n  setRadius(radius) {\r\n    this.radius_ = radius;\r\n    this.render();\r\n  }\r\n}\r\n\r\nexport default CircleStyle;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAOA,YAAY,MAAM,mBAAmB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASD,YAAY,CAAC;EACrC;AACF;AACA;EACEE,WAAWA,CAACC,OAAO,EAAE;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG;MAACC,MAAM,EAAE;IAAC,CAAC;IAEzC,KAAK,CAAC;MACJC,MAAM,EAAEC,QAAQ;MAChBC,IAAI,EAAEJ,OAAO,CAACI,IAAI;MAClBH,MAAM,EAAED,OAAO,CAACC,MAAM;MACtBI,MAAM,EAAEL,OAAO,CAACK,MAAM;MACtBC,KAAK,EAAEN,OAAO,CAACM,KAAK,KAAKC,SAAS,GAAGP,OAAO,CAACM,KAAK,GAAG,CAAC;MACtDE,QAAQ,EAAER,OAAO,CAACQ,QAAQ,KAAKD,SAAS,GAAGP,OAAO,CAACQ,QAAQ,GAAG,CAAC;MAC/DC,cAAc,EACZT,OAAO,CAACS,cAAc,KAAKF,SAAS,GAAGP,OAAO,CAACS,cAAc,GAAG,KAAK;MACvEC,YAAY,EACVV,OAAO,CAACU,YAAY,KAAKH,SAAS,GAAGP,OAAO,CAACU,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MACpEC,aAAa,EAAEX,OAAO,CAACW;IACzB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEC,KAAKA,CAAA,EAAG;IACN,MAAMN,KAAK,GAAG,IAAI,CAACO,QAAQ,CAAC,CAAC;IAC7B,MAAMC,KAAK,GAAG,IAAIhB,WAAW,CAAC;MAC5BM,IAAI,EAAE,IAAI,CAACW,OAAO,CAAC,CAAC,GAAG,IAAI,CAACA,OAAO,CAAC,CAAC,CAACH,KAAK,CAAC,CAAC,GAAGL,SAAS;MACzDF,MAAM,EAAE,IAAI,CAACW,SAAS,CAAC,CAAC,GAAG,IAAI,CAACA,SAAS,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC,GAAGL,SAAS;MAC/DN,MAAM,EAAE,IAAI,CAACgB,SAAS,CAAC,CAAC;MACxBX,KAAK,EAAEY,KAAK,CAACC,OAAO,CAACb,KAAK,CAAC,GAAGA,KAAK,CAACc,KAAK,CAAC,CAAC,GAAGd,KAAK;MACnDE,QAAQ,EAAE,IAAI,CAACa,WAAW,CAAC,CAAC;MAC5BZ,cAAc,EAAE,IAAI,CAACa,iBAAiB,CAAC,CAAC;MACxCZ,YAAY,EAAE,IAAI,CAACa,eAAe,CAAC,CAAC,CAACH,KAAK,CAAC,CAAC;MAC5CT,aAAa,EAAE,IAAI,CAACa,gBAAgB,CAAC;IACvC,CAAC,CAAC;IACFV,KAAK,CAACW,UAAU,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC;IACnC,OAAOZ,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEa,SAASA,CAAC1B,MAAM,EAAE;IAChB,IAAI,CAAC2B,OAAO,GAAG3B,MAAM;IACrB,IAAI,CAAC4B,MAAM,CAAC,CAAC;EACf;AACF;AAEA,eAAe/B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}