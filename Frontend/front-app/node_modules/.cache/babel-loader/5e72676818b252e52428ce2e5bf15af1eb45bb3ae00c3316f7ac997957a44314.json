{"ast":null,"code":"/**\r\n * @module ol/featureloader\r\n */\nimport { VOID } from './functions.js';\n\n/**\r\n *\r\n * @type {boolean}\r\n * @private\r\n */\nlet withCredentials = false;\n\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * load features.\r\n *\r\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\r\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\r\n * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get\r\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\r\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\r\n * `'featuresloaderror'` events. `this` within the function is bound to the\r\n * {@link module:ol/source/Vector~VectorSource} it's called from.\r\n *\r\n * The function is responsible for loading the features and adding them to the\r\n * source.\r\n *\r\n * @template {import(\"./Feature.js\").FeatureLike} [FeatureType=import(\"./Feature.js\").default]\r\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\r\n *           import(\"./extent.js\").Extent,\r\n *           number,\r\n *           import(\"./proj/Projection.js\").default,\r\n *           function(Array<FeatureType>): void=,\r\n *           function(): void=): void} FeatureLoader\r\n * @api\r\n */\n\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * get the url to load features from.\r\n *\r\n * This function takes an {@link module:ol/extent~Extent} representing the area\r\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\r\n * and an {@link module:ol/proj/Projection~Projection} for the projection  as\r\n * arguments and returns a `{string}` representing the URL.\r\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\r\n * @api\r\n */\n\n/**\r\n * @template {import(\"./Feature.js\").FeatureLike} [FeatureType=import(\"./Feature.js\").FeatureLike]\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default<import('./format/Feature.js').FeatureToFeatureClass<FeatureType>>} format Feature format.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @param {function(Array<FeatureType>, import(\"./proj/Projection.js\").default): void} success Success\r\n *      Function called with the loaded features and optionally with the data projection.\r\n * @param {function(): void} failure Failure\r\n *      Function called when loading failed.\r\n */\nexport function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n  if (format.getType() == 'arraybuffer') {\n    xhr.responseType = 'arraybuffer';\n  }\n  xhr.withCredentials = withCredentials;\n  /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\n  xhr.onload = function (event) {\n    // status will be 0 for file:// urls\n    if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n      const type = format.getType();\n      try {\n        /** @type {Document|Node|Object|string|undefined} */\n        let source;\n        if (type == 'text' || type == 'json') {\n          source = xhr.responseText;\n        } else if (type == 'xml') {\n          source = xhr.responseXML || xhr.responseText;\n        } else if (type == 'arraybuffer') {\n          source = /** @type {ArrayBuffer} */xhr.response;\n        }\n        if (source) {\n          success( /** @type {Array<FeatureType>} */\n\n          format.readFeatures(source, {\n            extent: extent,\n            featureProjection: projection\n          }), format.readProjection(source));\n        } else {\n          failure();\n        }\n      } catch {\n        failure();\n      }\n    } else {\n      failure();\n    }\n  };\n  /**\r\n   * @private\r\n   */\n  xhr.onerror = failure;\n  xhr.send();\n}\n\n/**\r\n * Create an XHR feature loader for a `url` and `format`. The feature loader\r\n * loads features (with XHR), parses the features, and adds them to the\r\n * vector source.\r\n * @template {import(\"./Feature.js\").FeatureLike} [FeatureType=import(\"./Feature.js\").FeatureLike]\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default<import('./format/Feature.js').FeatureToFeatureClass<FeatureType>>} format Feature format.\r\n * @return {FeatureLoader<FeatureType>} The feature loader.\r\n * @api\r\n */\nexport function xhr(url, format) {\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n   * @param {function(Array<FeatureType>): void} [success] Success\r\n   *      Function called when loading succeeded.\r\n   * @param {function(): void} [failure] Failure\r\n   *      Function called when loading failed.\r\n   */\n  return function (extent, resolution, projection, success, failure) {\n    const source = /** @type {import(\"./source/Vector\").default<FeatureType>} */this;\n    loadFeaturesXhr(url, format, extent, resolution, projection,\n    /**\r\n     * @param {Array<FeatureType>} features The loaded features.\r\n     * @param {import(\"./proj/Projection.js\").default} dataProjection Data\r\n     * projection.\r\n     */\n    function (features, dataProjection) {\n      source.addFeatures(features);\n      if (success !== undefined) {\n        success(features);\n      }\n    }, /* FIXME handle error */failure ? failure : VOID);\n  };\n}\n\n/**\r\n * Setter for the withCredentials configuration for the XHR.\r\n *\r\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\r\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\r\n * @api\r\n */\nexport function setWithCredentials(xhrWithCredentials) {\n  withCredentials = xhrWithCredentials;\n}","map":{"version":3,"names":["VOID","withCredentials","loadFeaturesXhr","url","format","extent","resolution","projection","success","failure","xhr","XMLHttpRequest","open","getType","responseType","onload","event","status","type","source","responseText","responseXML","response","readFeatures","featureProjection","readProjection","onerror","send","features","dataProjection","addFeatures","undefined","setWithCredentials","xhrWithCredentials"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/featureloader.js"],"sourcesContent":["/**\r\n * @module ol/featureloader\r\n */\r\nimport {VOID} from './functions.js';\r\n\r\n/**\r\n *\r\n * @type {boolean}\r\n * @private\r\n */\r\nlet withCredentials = false;\r\n\r\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * load features.\r\n *\r\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\r\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\r\n * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get\r\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\r\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\r\n * `'featuresloaderror'` events. `this` within the function is bound to the\r\n * {@link module:ol/source/Vector~VectorSource} it's called from.\r\n *\r\n * The function is responsible for loading the features and adding them to the\r\n * source.\r\n *\r\n * @template {import(\"./Feature.js\").FeatureLike} [FeatureType=import(\"./Feature.js\").default]\r\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\r\n *           import(\"./extent.js\").Extent,\r\n *           number,\r\n *           import(\"./proj/Projection.js\").default,\r\n *           function(Array<FeatureType>): void=,\r\n *           function(): void=): void} FeatureLoader\r\n * @api\r\n */\r\n\r\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * get the url to load features from.\r\n *\r\n * This function takes an {@link module:ol/extent~Extent} representing the area\r\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\r\n * and an {@link module:ol/proj/Projection~Projection} for the projection  as\r\n * arguments and returns a `{string}` representing the URL.\r\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @template {import(\"./Feature.js\").FeatureLike} [FeatureType=import(\"./Feature.js\").FeatureLike]\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default<import('./format/Feature.js').FeatureToFeatureClass<FeatureType>>} format Feature format.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @param {function(Array<FeatureType>, import(\"./proj/Projection.js\").default): void} success Success\r\n *      Function called with the loaded features and optionally with the data projection.\r\n * @param {function(): void} failure Failure\r\n *      Function called when loading failed.\r\n */\r\nexport function loadFeaturesXhr(\r\n  url,\r\n  format,\r\n  extent,\r\n  resolution,\r\n  projection,\r\n  success,\r\n  failure,\r\n) {\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open(\r\n    'GET',\r\n    typeof url === 'function' ? url(extent, resolution, projection) : url,\r\n    true,\r\n  );\r\n  if (format.getType() == 'arraybuffer') {\r\n    xhr.responseType = 'arraybuffer';\r\n  }\r\n  xhr.withCredentials = withCredentials;\r\n  /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\r\n  xhr.onload = function (event) {\r\n    // status will be 0 for file:// urls\r\n    if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\r\n      const type = format.getType();\r\n      try {\r\n        /** @type {Document|Node|Object|string|undefined} */\r\n        let source;\r\n        if (type == 'text' || type == 'json') {\r\n          source = xhr.responseText;\r\n        } else if (type == 'xml') {\r\n          source = xhr.responseXML || xhr.responseText;\r\n        } else if (type == 'arraybuffer') {\r\n          source = /** @type {ArrayBuffer} */ (xhr.response);\r\n        }\r\n        if (source) {\r\n          success(\r\n            /** @type {Array<FeatureType>} */\r\n            (\r\n              format.readFeatures(source, {\r\n                extent: extent,\r\n                featureProjection: projection,\r\n              })\r\n            ),\r\n            format.readProjection(source),\r\n          );\r\n        } else {\r\n          failure();\r\n        }\r\n      } catch {\r\n        failure();\r\n      }\r\n    } else {\r\n      failure();\r\n    }\r\n  };\r\n  /**\r\n   * @private\r\n   */\r\n  xhr.onerror = failure;\r\n  xhr.send();\r\n}\r\n\r\n/**\r\n * Create an XHR feature loader for a `url` and `format`. The feature loader\r\n * loads features (with XHR), parses the features, and adds them to the\r\n * vector source.\r\n * @template {import(\"./Feature.js\").FeatureLike} [FeatureType=import(\"./Feature.js\").FeatureLike]\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default<import('./format/Feature.js').FeatureToFeatureClass<FeatureType>>} format Feature format.\r\n * @return {FeatureLoader<FeatureType>} The feature loader.\r\n * @api\r\n */\r\nexport function xhr(url, format) {\r\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n   * @param {function(Array<FeatureType>): void} [success] Success\r\n   *      Function called when loading succeeded.\r\n   * @param {function(): void} [failure] Failure\r\n   *      Function called when loading failed.\r\n   */\r\n  return function (extent, resolution, projection, success, failure) {\r\n    const source =\r\n      /** @type {import(\"./source/Vector\").default<FeatureType>} */ (this);\r\n    loadFeaturesXhr(\r\n      url,\r\n      format,\r\n      extent,\r\n      resolution,\r\n      projection,\r\n      /**\r\n       * @param {Array<FeatureType>} features The loaded features.\r\n       * @param {import(\"./proj/Projection.js\").default} dataProjection Data\r\n       * projection.\r\n       */\r\n      function (features, dataProjection) {\r\n        source.addFeatures(features);\r\n        if (success !== undefined) {\r\n          success(features);\r\n        }\r\n      },\r\n      /* FIXME handle error */ failure ? failure : VOID,\r\n    );\r\n  };\r\n}\r\n\r\n/**\r\n * Setter for the withCredentials configuration for the XHR.\r\n *\r\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\r\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\r\n * @api\r\n */\r\nexport function setWithCredentials(xhrWithCredentials) {\r\n  withCredentials = xhrWithCredentials;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}