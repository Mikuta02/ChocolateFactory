{"ast":null,"code":"import \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\n/**\r\n * @module ol/control/Attribution\r\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { equals } from '../array.js';\nimport { removeChildren, replaceNode } from '../dom.js';\nimport { toPromise } from '../functions.js';\n\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-attribution'] CSS class name.\r\n * @property {HTMLElement|string} [target] Specify a target if you\r\n * want the control to be rendered outside of the map's\r\n * viewport.\r\n * @property {boolean} [collapsible] Specify if attributions can\r\n * be collapsed. If not specified, sources control this behavior with their\r\n * `attributionsCollapsible` setting.\r\n * @property {boolean} [collapsed=true] Specify if attributions should\r\n * be collapsed at startup.\r\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\r\n * @property {string|HTMLElement} [label='i'] Text label to use for the\r\n * collapsed attributions button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\r\n * collapsed attributions button.\r\n * @property {string|HTMLElement} [collapseLabel='â€º'] Text label to use\r\n * for the expanded attributions button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\r\n * expanded attributions button.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\r\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n */\n\n/**\r\n * @classdesc\r\n * Control to show all the attributions associated with the layer sources\r\n * in the map. This control is one of the default controls included in maps.\r\n * By default it will show in the bottom right portion of the map, but this can\r\n * be changed by using a css selector for `.ol-attribution`.\r\n *\r\n * @api\r\n */\nclass Attribution extends Control {\n  /**\r\n   * @param {Options} [options] Attribution options.\r\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    });\n\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\n    this.ulElement_ = document.createElement('ul');\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.userCollapsed_ = this.collapsed_;\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n    const className = options.className !== undefined ? options.className : 'ol-attribution';\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n    const expandClassName = options.expandClassName !== undefined ? options.expandClassName : className + '-expand';\n    const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u203A';\n    const collapseClassName = options.collapseClassName !== undefined ? options.collapseClassName : className + '-collapse';\n    if (typeof collapseLabel === 'string') {\n      /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n      this.collapseLabel_.className = collapseClassName;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n    const label = options.label !== undefined ? options.label : 'i';\n    if (typeof label === 'string') {\n      /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n      this.label_.className = expandClassName;\n    } else {\n      this.label_ = label;\n    }\n    const activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\n    this.toggleButton_ = document.createElement('button');\n    this.toggleButton_.setAttribute('type', 'button');\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n    this.toggleButton_.title = tipLabel;\n    this.toggleButton_.appendChild(activeLabel);\n    this.toggleButton_.addEventListener(EventType.CLICK, this.handleClick_.bind(this), false);\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.toggleButton_);\n    element.appendChild(this.ulElement_);\n\n    /**\r\n     * A list of currently rendered resolutions.\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\n    this.renderedAttributions_ = [];\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.renderedVisible_ = true;\n  }\n\n  /**\r\n   * Collect a list of visible attributions and set the collapsible state.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @return {Array<string>} Attributions.\r\n   * @private\r\n   */\n  collectSourceAttributions_(frameState) {\n    const visibleAttributions = Array.from(new Set(this.getMap().getAllLayers().flatMap(layer => layer.getAttributions(frameState))));\n    const collapsible = !this.getMap().getAllLayers().some(layer => layer.getSource() && layer.getSource().getAttributionsCollapsible() === false);\n    if (!this.overrideCollapsible_) {\n      this.setCollapsible(collapsible);\n    }\n    return visibleAttributions;\n  }\n\n  /**\r\n   * @private\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\n  async updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n    const attributions = await Promise.all(this.collectSourceAttributions_(frameState).map(attribution => toPromise(() => attribution)));\n    const visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n    removeChildren(this.ulElement_);\n\n    // append the attributions\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\n      const element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n    this.renderedAttributions_ = attributions;\n  }\n\n  /**\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n    this.userCollapsed_ = this.collapsed_;\n  }\n\n  /**\r\n   * @private\r\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n  }\n\n  /**\r\n   * Return `true` if the attribution is collapsible, `false` otherwise.\r\n   * @return {boolean} True if the widget is collapsible.\r\n   * @api\r\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\r\n   * Set whether the attribution should be collapsible.\r\n   * @param {boolean} collapsible True if the widget is collapsible.\r\n   * @api\r\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (this.userCollapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\r\n   * Collapse or expand the attribution according to the passed parameter. Will\r\n   * not do anything if the attribution isn't collapsible or if the current\r\n   * collapsed state is already the one requested.\r\n   * @param {boolean} collapsed True if the widget is collapsed.\r\n   * @api\r\n   */\n  setCollapsed(collapsed) {\n    this.userCollapsed_ = collapsed;\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\r\n   * Return `true` when the attribution is currently collapsed or `false`\r\n   * otherwise.\r\n   * @return {boolean} True if the widget is collapsed.\r\n   * @api\r\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\r\n   * Update the attribution element.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @override\r\n   */\n  render(mapEvent) {\n    this.updateElement_(mapEvent.frameState);\n  }\n}\nexport default Attribution;","map":{"version":3,"names":["Control","EventType","CLASS_COLLAPSED","CLASS_CONTROL","CLASS_UNSELECTABLE","equals","removeChildren","replaceNode","toPromise","Attribution","constructor","options","element","document","createElement","render","target","ulElement_","collapsed_","collapsed","undefined","userCollapsed_","overrideCollapsible_","collapsible","collapsible_","className","tipLabel","expandClassName","collapseLabel","collapseClassName","collapseLabel_","textContent","label","label_","activeLabel","toggleButton_","setAttribute","String","title","appendChild","addEventListener","CLICK","handleClick_","bind","cssClasses","renderedAttributions_","renderedVisible_","collectSourceAttributions_","frameState","visibleAttributions","Array","from","Set","getMap","getAllLayers","flatMap","layer","getAttributions","some","getSource","getAttributionsCollapsible","setCollapsible","updateElement_","style","display","attributions","Promise","all","map","attribution","visible","length","i","ii","innerHTML","event","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsed","getCollapsed","mapEvent"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/control/Attribution.js"],"sourcesContent":["/**\r\n * @module ol/control/Attribution\r\n */\r\nimport Control from './Control.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\r\nimport {equals} from '../array.js';\r\nimport {removeChildren, replaceNode} from '../dom.js';\r\nimport {toPromise} from '../functions.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-attribution'] CSS class name.\r\n * @property {HTMLElement|string} [target] Specify a target if you\r\n * want the control to be rendered outside of the map's\r\n * viewport.\r\n * @property {boolean} [collapsible] Specify if attributions can\r\n * be collapsed. If not specified, sources control this behavior with their\r\n * `attributionsCollapsible` setting.\r\n * @property {boolean} [collapsed=true] Specify if attributions should\r\n * be collapsed at startup.\r\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\r\n * @property {string|HTMLElement} [label='i'] Text label to use for the\r\n * collapsed attributions button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\r\n * collapsed attributions button.\r\n * @property {string|HTMLElement} [collapseLabel='â€º'] Text label to use\r\n * for the expanded attributions button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\r\n * expanded attributions button.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\r\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Control to show all the attributions associated with the layer sources\r\n * in the map. This control is one of the default controls included in maps.\r\n * By default it will show in the bottom right portion of the map, but this can\r\n * be changed by using a css selector for `.ol-attribution`.\r\n *\r\n * @api\r\n */\r\nclass Attribution extends Control {\r\n  /**\r\n   * @param {Options} [options] Attribution options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      element: document.createElement('div'),\r\n      render: options.render,\r\n      target: options.target,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\r\n    this.ulElement_ = document.createElement('ul');\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.collapsed_ =\r\n      options.collapsed !== undefined ? options.collapsed : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.userCollapsed_ = this.collapsed_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overrideCollapsible_ = options.collapsible !== undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.collapsible_ =\r\n      options.collapsible !== undefined ? options.collapsible : true;\r\n\r\n    if (!this.collapsible_) {\r\n      this.collapsed_ = false;\r\n    }\r\n\r\n    const className =\r\n      options.className !== undefined ? options.className : 'ol-attribution';\r\n\r\n    const tipLabel =\r\n      options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\r\n\r\n    const expandClassName =\r\n      options.expandClassName !== undefined\r\n        ? options.expandClassName\r\n        : className + '-expand';\r\n\r\n    const collapseLabel =\r\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u203A';\r\n\r\n    const collapseClassName =\r\n      options.collapseClassName !== undefined\r\n        ? options.collapseClassName\r\n        : className + '-collapse';\r\n\r\n    if (typeof collapseLabel === 'string') {\r\n      /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */\r\n      this.collapseLabel_ = document.createElement('span');\r\n      this.collapseLabel_.textContent = collapseLabel;\r\n      this.collapseLabel_.className = collapseClassName;\r\n    } else {\r\n      this.collapseLabel_ = collapseLabel;\r\n    }\r\n\r\n    const label = options.label !== undefined ? options.label : 'i';\r\n\r\n    if (typeof label === 'string') {\r\n      /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */\r\n      this.label_ = document.createElement('span');\r\n      this.label_.textContent = label;\r\n      this.label_.className = expandClassName;\r\n    } else {\r\n      this.label_ = label;\r\n    }\r\n\r\n    const activeLabel =\r\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\r\n    this.toggleButton_ = document.createElement('button');\r\n    this.toggleButton_.setAttribute('type', 'button');\r\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\r\n    this.toggleButton_.title = tipLabel;\r\n    this.toggleButton_.appendChild(activeLabel);\r\n\r\n    this.toggleButton_.addEventListener(\r\n      EventType.CLICK,\r\n      this.handleClick_.bind(this),\r\n      false,\r\n    );\r\n\r\n    const cssClasses =\r\n      className +\r\n      ' ' +\r\n      CLASS_UNSELECTABLE +\r\n      ' ' +\r\n      CLASS_CONTROL +\r\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\r\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\r\n    const element = this.element;\r\n    element.className = cssClasses;\r\n    element.appendChild(this.toggleButton_);\r\n    element.appendChild(this.ulElement_);\r\n\r\n    /**\r\n     * A list of currently rendered resolutions.\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\r\n    this.renderedAttributions_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderedVisible_ = true;\r\n  }\r\n\r\n  /**\r\n   * Collect a list of visible attributions and set the collapsible state.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @return {Array<string>} Attributions.\r\n   * @private\r\n   */\r\n  collectSourceAttributions_(frameState) {\r\n    const visibleAttributions = Array.from(\r\n      new Set(\r\n        this.getMap()\r\n          .getAllLayers()\r\n          .flatMap((layer) => layer.getAttributions(frameState)),\r\n      ),\r\n    );\r\n\r\n    const collapsible = !this.getMap()\r\n      .getAllLayers()\r\n      .some(\r\n        (layer) =>\r\n          layer.getSource() &&\r\n          layer.getSource().getAttributionsCollapsible() === false,\r\n      );\r\n    if (!this.overrideCollapsible_) {\r\n      this.setCollapsible(collapsible);\r\n    }\r\n    return visibleAttributions;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  async updateElement_(frameState) {\r\n    if (!frameState) {\r\n      if (this.renderedVisible_) {\r\n        this.element.style.display = 'none';\r\n        this.renderedVisible_ = false;\r\n      }\r\n      return;\r\n    }\r\n\r\n    const attributions = await Promise.all(\r\n      this.collectSourceAttributions_(frameState).map((attribution) =>\r\n        toPromise(() => attribution),\r\n      ),\r\n    );\r\n\r\n    const visible = attributions.length > 0;\r\n    if (this.renderedVisible_ != visible) {\r\n      this.element.style.display = visible ? '' : 'none';\r\n      this.renderedVisible_ = visible;\r\n    }\r\n\r\n    if (equals(attributions, this.renderedAttributions_)) {\r\n      return;\r\n    }\r\n\r\n    removeChildren(this.ulElement_);\r\n\r\n    // append the attributions\r\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\r\n      const element = document.createElement('li');\r\n      element.innerHTML = attributions[i];\r\n      this.ulElement_.appendChild(element);\r\n    }\r\n\r\n    this.renderedAttributions_ = attributions;\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */\r\n  handleClick_(event) {\r\n    event.preventDefault();\r\n    this.handleToggle_();\r\n    this.userCollapsed_ = this.collapsed_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleToggle_() {\r\n    this.element.classList.toggle(CLASS_COLLAPSED);\r\n    if (this.collapsed_) {\r\n      replaceNode(this.collapseLabel_, this.label_);\r\n    } else {\r\n      replaceNode(this.label_, this.collapseLabel_);\r\n    }\r\n    this.collapsed_ = !this.collapsed_;\r\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\r\n  }\r\n\r\n  /**\r\n   * Return `true` if the attribution is collapsible, `false` otherwise.\r\n   * @return {boolean} True if the widget is collapsible.\r\n   * @api\r\n   */\r\n  getCollapsible() {\r\n    return this.collapsible_;\r\n  }\r\n\r\n  /**\r\n   * Set whether the attribution should be collapsible.\r\n   * @param {boolean} collapsible True if the widget is collapsible.\r\n   * @api\r\n   */\r\n  setCollapsible(collapsible) {\r\n    if (this.collapsible_ === collapsible) {\r\n      return;\r\n    }\r\n    this.collapsible_ = collapsible;\r\n    this.element.classList.toggle('ol-uncollapsible');\r\n    if (this.userCollapsed_) {\r\n      this.handleToggle_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collapse or expand the attribution according to the passed parameter. Will\r\n   * not do anything if the attribution isn't collapsible or if the current\r\n   * collapsed state is already the one requested.\r\n   * @param {boolean} collapsed True if the widget is collapsed.\r\n   * @api\r\n   */\r\n  setCollapsed(collapsed) {\r\n    this.userCollapsed_ = collapsed;\r\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\r\n      return;\r\n    }\r\n    this.handleToggle_();\r\n  }\r\n\r\n  /**\r\n   * Return `true` when the attribution is currently collapsed or `false`\r\n   * otherwise.\r\n   * @return {boolean} True if the widget is collapsed.\r\n   * @api\r\n   */\r\n  getCollapsed() {\r\n    return this.collapsed_;\r\n  }\r\n\r\n  /**\r\n   * Update the attribution element.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @override\r\n   */\r\n  render(mapEvent) {\r\n    this.updateElement_(mapEvent.frameState);\r\n  }\r\n}\r\n\r\nexport default Attribution;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}