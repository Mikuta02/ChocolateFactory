{"ast":null,"code":"/**\r\n * @module ol/functions\r\n */\n\nimport { equals as arrayEquals } from './array.js';\n\n/**\r\n * Always returns true.\r\n * @return {boolean} true.\r\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\r\n * Always returns false.\r\n * @return {boolean} false.\r\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\r\n * A reusable function, used e.g. as a default for callbacks.\r\n *\r\n * @return {void} Nothing.\r\n */\nexport function VOID() {}\n\n/**\r\n * Wrap a function in another function that remembers the last return.  If the\r\n * returned function is called twice in a row with the same arguments and the same\r\n * this object, it will return the value from the first call in the second call.\r\n *\r\n * @param {function(...any): ReturnType} fn The function to memoize.\r\n * @return {function(...any): ReturnType} The memoized function.\r\n * @template ReturnType\r\n */\nexport function memoizeOne(fn) {\n  let called = false;\n\n  /** @type {ReturnType} */\n  let lastResult;\n\n  /** @type {Array<any>} */\n  let lastArgs;\n  let lastThis;\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n\n/**\r\n * @template T\r\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\r\n * @return {Promise<T>} A promise for the value.\r\n */\nexport function toPromise(getter) {\n  function promiseGetter() {\n    let value;\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    if (value instanceof Promise) {\n      return value;\n    }\n    return Promise.resolve(value);\n  }\n  return promiseGetter();\n}","map":{"version":3,"names":["equals","arrayEquals","TRUE","FALSE","VOID","memoizeOne","fn","called","lastResult","lastArgs","lastThis","nextArgs","Array","prototype","slice","call","arguments","apply","toPromise","getter","promiseGetter","value","err","Promise","reject","resolve"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/functions.js"],"sourcesContent":["/**\r\n * @module ol/functions\r\n */\r\n\r\nimport {equals as arrayEquals} from './array.js';\r\n\r\n/**\r\n * Always returns true.\r\n * @return {boolean} true.\r\n */\r\nexport function TRUE() {\r\n  return true;\r\n}\r\n\r\n/**\r\n * Always returns false.\r\n * @return {boolean} false.\r\n */\r\nexport function FALSE() {\r\n  return false;\r\n}\r\n\r\n/**\r\n * A reusable function, used e.g. as a default for callbacks.\r\n *\r\n * @return {void} Nothing.\r\n */\r\nexport function VOID() {}\r\n\r\n/**\r\n * Wrap a function in another function that remembers the last return.  If the\r\n * returned function is called twice in a row with the same arguments and the same\r\n * this object, it will return the value from the first call in the second call.\r\n *\r\n * @param {function(...any): ReturnType} fn The function to memoize.\r\n * @return {function(...any): ReturnType} The memoized function.\r\n * @template ReturnType\r\n */\r\nexport function memoizeOne(fn) {\r\n  let called = false;\r\n\r\n  /** @type {ReturnType} */\r\n  let lastResult;\r\n\r\n  /** @type {Array<any>} */\r\n  let lastArgs;\r\n\r\n  let lastThis;\r\n\r\n  return function () {\r\n    const nextArgs = Array.prototype.slice.call(arguments);\r\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\r\n      called = true;\r\n      lastThis = this;\r\n      lastArgs = nextArgs;\r\n      lastResult = fn.apply(this, arguments);\r\n    }\r\n    return lastResult;\r\n  };\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\r\n * @return {Promise<T>} A promise for the value.\r\n */\r\nexport function toPromise(getter) {\r\n  function promiseGetter() {\r\n    let value;\r\n    try {\r\n      value = getter();\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    if (value instanceof Promise) {\r\n      return value;\r\n    }\r\n    return Promise.resolve(value);\r\n  }\r\n  return promiseGetter();\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,MAAM,IAAIC,WAAW,QAAO,YAAY;;AAEhD;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAAA,EAAG;EACrB,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAAA,EAAG;EACtB,OAAO,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAAA,EAAG,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,EAAE,EAAE;EAC7B,IAAIC,MAAM,GAAG,KAAK;;EAElB;EACA,IAAIC,UAAU;;EAEd;EACA,IAAIC,QAAQ;EAEZ,IAAIC,QAAQ;EAEZ,OAAO,YAAY;IACjB,MAAMC,QAAQ,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,CAAC;IACtD,IAAI,CAACT,MAAM,IAAI,IAAI,KAAKG,QAAQ,IAAI,CAACT,WAAW,CAACU,QAAQ,EAAEF,QAAQ,CAAC,EAAE;MACpEF,MAAM,GAAG,IAAI;MACbG,QAAQ,GAAG,IAAI;MACfD,QAAQ,GAAGE,QAAQ;MACnBH,UAAU,GAAGF,EAAE,CAACW,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;IACxC;IACA,OAAOR,UAAU;EACnB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,SAASA,CAACC,MAAM,EAAE;EAChC,SAASC,aAAaA,CAAA,EAAG;IACvB,IAAIC,KAAK;IACT,IAAI;MACFA,KAAK,GAAGF,MAAM,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;IAC5B;IACA,IAAID,KAAK,YAAYE,OAAO,EAAE;MAC5B,OAAOF,KAAK;IACd;IACA,OAAOE,OAAO,CAACE,OAAO,CAACJ,KAAK,CAAC;EAC/B;EACA,OAAOD,aAAa,CAAC,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}