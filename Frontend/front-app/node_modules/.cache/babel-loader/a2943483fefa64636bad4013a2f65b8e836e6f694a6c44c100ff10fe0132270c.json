{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @module ol/control/defaults\r\n */\nimport Attribution from './Attribution.js';\nimport Collection from '../Collection.js';\nimport Rotate from './Rotate.js';\nimport Zoom from './Zoom.js';\n\n/**\r\n * @typedef {Object} DefaultsOptions\r\n * @property {boolean} [attribution=true] Include\r\n * {@link module:ol/control/Attribution~Attribution}.\r\n * @property {import(\"./Attribution.js\").Options} [attributionOptions]\r\n * Options for {@link module:ol/control/Attribution~Attribution}.\r\n * @property {boolean} [rotate=true] Include\r\n * {@link module:ol/control/Rotate~Rotate}.\r\n * @property {import(\"./Rotate.js\").Options} [rotateOptions] Options\r\n * for {@link module:ol/control/Rotate~Rotate}.\r\n * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.\r\n * @property {import(\"./Zoom.js\").Options} [zoomOptions] Options for\r\n * {@link module:ol/control/Zoom~Zoom}.\r\n */\n\n/**\r\n * Set of controls included in maps by default. Unless configured otherwise,\r\n * this returns a collection containing an instance of each of the following\r\n * controls:\r\n * * {@link module:ol/control/Zoom~Zoom}\r\n * * {@link module:ol/control/Rotate~Rotate}\r\n * * {@link module:ol/control/Attribution~Attribution}\r\n *\r\n * @param {DefaultsOptions} [options] Options for the default controls.\r\n * @return {Collection<import(\"./Control.js\").default>} A collection of controls\r\n * to be used with the {@link module:ol/Map~Map} constructor's `controls` option.\r\n * @api\r\n */\nexport function defaults(options) {\n  options = options ? options : {};\n\n  /** @type {Collection<import(\"./Control.js\").default>} */\n  const controls = new Collection();\n  const zoomControl = options.zoom !== undefined ? options.zoom : true;\n  if (zoomControl) {\n    controls.push(new Zoom(options.zoomOptions));\n  }\n  const rotateControl = options.rotate !== undefined ? options.rotate : true;\n  if (rotateControl) {\n    controls.push(new Rotate(options.rotateOptions));\n  }\n  const attributionControl = options.attribution !== undefined ? options.attribution : true;\n  if (attributionControl) {\n    controls.push(new Attribution(options.attributionOptions));\n  }\n  return controls;\n}","map":{"version":3,"names":["Attribution","Collection","Rotate","Zoom","defaults","options","controls","zoomControl","zoom","undefined","push","zoomOptions","rotateControl","rotate","rotateOptions","attributionControl","attribution","attributionOptions"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/control/defaults.js"],"sourcesContent":["/**\r\n * @module ol/control/defaults\r\n */\r\nimport Attribution from './Attribution.js';\r\nimport Collection from '../Collection.js';\r\nimport Rotate from './Rotate.js';\r\nimport Zoom from './Zoom.js';\r\n\r\n/**\r\n * @typedef {Object} DefaultsOptions\r\n * @property {boolean} [attribution=true] Include\r\n * {@link module:ol/control/Attribution~Attribution}.\r\n * @property {import(\"./Attribution.js\").Options} [attributionOptions]\r\n * Options for {@link module:ol/control/Attribution~Attribution}.\r\n * @property {boolean} [rotate=true] Include\r\n * {@link module:ol/control/Rotate~Rotate}.\r\n * @property {import(\"./Rotate.js\").Options} [rotateOptions] Options\r\n * for {@link module:ol/control/Rotate~Rotate}.\r\n * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.\r\n * @property {import(\"./Zoom.js\").Options} [zoomOptions] Options for\r\n * {@link module:ol/control/Zoom~Zoom}.\r\n */\r\n\r\n/**\r\n * Set of controls included in maps by default. Unless configured otherwise,\r\n * this returns a collection containing an instance of each of the following\r\n * controls:\r\n * * {@link module:ol/control/Zoom~Zoom}\r\n * * {@link module:ol/control/Rotate~Rotate}\r\n * * {@link module:ol/control/Attribution~Attribution}\r\n *\r\n * @param {DefaultsOptions} [options] Options for the default controls.\r\n * @return {Collection<import(\"./Control.js\").default>} A collection of controls\r\n * to be used with the {@link module:ol/Map~Map} constructor's `controls` option.\r\n * @api\r\n */\r\nexport function defaults(options) {\r\n  options = options ? options : {};\r\n\r\n  /** @type {Collection<import(\"./Control.js\").default>} */\r\n  const controls = new Collection();\r\n\r\n  const zoomControl = options.zoom !== undefined ? options.zoom : true;\r\n  if (zoomControl) {\r\n    controls.push(new Zoom(options.zoomOptions));\r\n  }\r\n\r\n  const rotateControl = options.rotate !== undefined ? options.rotate : true;\r\n  if (rotateControl) {\r\n    controls.push(new Rotate(options.rotateOptions));\r\n  }\r\n\r\n  const attributionControl =\r\n    options.attribution !== undefined ? options.attribution : true;\r\n  if (attributionControl) {\r\n    controls.push(new Attribution(options.attributionOptions));\r\n  }\r\n\r\n  return controls;\r\n}\r\n"],"mappings":";AAAA;AACA;AACA;AACA,OAAOA,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAOC,IAAI,MAAM,WAAW;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,OAAO,EAAE;EAChCA,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;;EAEhC;EACA,MAAMC,QAAQ,GAAG,IAAIL,UAAU,CAAC,CAAC;EAEjC,MAAMM,WAAW,GAAGF,OAAO,CAACG,IAAI,KAAKC,SAAS,GAAGJ,OAAO,CAACG,IAAI,GAAG,IAAI;EACpE,IAAID,WAAW,EAAE;IACfD,QAAQ,CAACI,IAAI,CAAC,IAAIP,IAAI,CAACE,OAAO,CAACM,WAAW,CAAC,CAAC;EAC9C;EAEA,MAAMC,aAAa,GAAGP,OAAO,CAACQ,MAAM,KAAKJ,SAAS,GAAGJ,OAAO,CAACQ,MAAM,GAAG,IAAI;EAC1E,IAAID,aAAa,EAAE;IACjBN,QAAQ,CAACI,IAAI,CAAC,IAAIR,MAAM,CAACG,OAAO,CAACS,aAAa,CAAC,CAAC;EAClD;EAEA,MAAMC,kBAAkB,GACtBV,OAAO,CAACW,WAAW,KAAKP,SAAS,GAAGJ,OAAO,CAACW,WAAW,GAAG,IAAI;EAChE,IAAID,kBAAkB,EAAE;IACtBT,QAAQ,CAACI,IAAI,CAAC,IAAIV,WAAW,CAACK,OAAO,CAACY,kBAAkB,CAAC,CAAC;EAC5D;EAEA,OAAOX,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}