{"ast":null,"code":"/**\r\n * @module ol/style/Text\r\n */\nimport Fill from './Fill.js';\nimport { toSize } from '../size.js';\n\n/**\r\n * @typedef {'point' | 'line'} TextPlacement\r\n * Default text placement is `'point'`. Note that\r\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\r\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\r\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\r\n */\n\n/**\r\n * @typedef {'left' | 'center' | 'right'} TextJustify\r\n */\n\n/**\r\n * The default fill color to use if no fill was set at construction time; a\r\n * blackish `#333`.\r\n *\r\n * @const {string}\r\n */\nconst DEFAULT_FILL_COLOR = '#333';\n\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [font] Font style as CSS `font` value, see:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\r\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\r\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\r\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\r\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\r\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\r\n * the width of the polygon at the label position or the length of the path that it follows.\r\n * @property {TextPlacement} [placement='point'] Text placement.\r\n * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies\r\n * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.\r\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\r\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\r\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\r\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\r\n * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.\r\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\r\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\r\n * placement where `maxAngle` is not exceeded.\r\n * @property {TextJustify} [justify] Text justification within the text box.\r\n * If not set, text is justified towards the `textAlign` anchor.\r\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\r\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\r\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\r\n * `'hanging'`, `'ideographic'`.\r\n * @property {import(\"./Fill.js\").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\r\n * `'point'`. Default is no fill.\r\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\r\n * is `'point'`. Default is no stroke.\r\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\r\n * values in the array is `[top, right, bottom, left]`.\r\n * @property {import('../style/Style.js').DeclutterMode} [declutterMode] Declutter mode: `declutter`, `obstacle`, `none`\r\n */\n\n/**\r\n * @classdesc\r\n * Set text style for vector features.\r\n * @api\r\n */\nclass Text {\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\n    this.font_ = options.font;\n\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n    this.rotation_ = options.rotation;\n\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size|undefined}\r\n     */\n    this.scale_ = options.scale;\n\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n\n    /**\r\n     * @private\r\n     * @type {string|Array<string>|undefined}\r\n     */\n    this.text_ = options.text;\n\n    /**\r\n     * @private\r\n     * @type {CanvasTextAlign|undefined}\r\n     */\n    this.textAlign_ = options.textAlign;\n\n    /**\r\n     * @private\r\n     * @type {TextJustify|undefined}\r\n     */\n    this.justify_ = options.justify;\n\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n    this.repeat_ = options.repeat;\n\n    /**\r\n     * @private\r\n     * @type {CanvasTextBaseline|undefined}\r\n     */\n    this.textBaseline_ = options.textBaseline;\n\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : new Fill({\n      color: DEFAULT_FILL_COLOR\n    });\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n\n    /**\r\n     * @private\r\n     * @type {TextPlacement}\r\n     */\n    this.placement_ = options.placement !== undefined ? options.placement : 'point';\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.overflow_ = !!options.overflow;\n\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\n    this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\n    this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\n    this.padding_ = options.padding === undefined ? null : options.padding;\n\n    /**\r\n     * @private\r\n     * @type {import('../style/Style.js').DeclutterMode}\r\n     */\n    this.declutterMode_ = options.declutterMode;\n  }\n\n  /**\r\n   * Clones the style.\r\n   * @return {Text} The cloned style.\r\n   * @api\r\n   */\n  clone() {\n    const scale = this.getScale();\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      repeat: this.getRepeat(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      justify: this.getJustify(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n      backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,\n      padding: this.getPadding() || undefined,\n      declutterMode: this.getDeclutterMode()\n    });\n  }\n\n  /**\r\n   * Get the `overflow` configuration.\r\n   * @return {boolean} Let text overflow the length of the path they follow.\r\n   * @api\r\n   */\n  getOverflow() {\n    return this.overflow_;\n  }\n\n  /**\r\n   * Get the font name.\r\n   * @return {string|undefined} Font.\r\n   * @api\r\n   */\n  getFont() {\n    return this.font_;\n  }\n\n  /**\r\n   * Get the maximum angle between adjacent characters.\r\n   * @return {number} Angle in radians.\r\n   * @api\r\n   */\n  getMaxAngle() {\n    return this.maxAngle_;\n  }\n\n  /**\r\n   * Get the label placement.\r\n   * @return {TextPlacement} Text placement.\r\n   * @api\r\n   */\n  getPlacement() {\n    return this.placement_;\n  }\n\n  /**\r\n   * Get the repeat interval of the text.\r\n   * @return {number|undefined} Repeat interval in pixels.\r\n   * @api\r\n   */\n  getRepeat() {\n    return this.repeat_;\n  }\n\n  /**\r\n   * Get the x-offset for the text.\r\n   * @return {number} Horizontal text offset.\r\n   * @api\r\n   */\n  getOffsetX() {\n    return this.offsetX_;\n  }\n\n  /**\r\n   * Get the y-offset for the text.\r\n   * @return {number} Vertical text offset.\r\n   * @api\r\n   */\n  getOffsetY() {\n    return this.offsetY_;\n  }\n\n  /**\r\n   * Get the fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\r\n   * Determine whether the text rotates with the map.\r\n   * @return {boolean|undefined} Rotate with map.\r\n   * @api\r\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\r\n   * Get the text rotation.\r\n   * @return {number|undefined} Rotation.\r\n   * @api\r\n   */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\r\n   * Get the text scale.\r\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\r\n   * @api\r\n   */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n\n  /**\r\n   * Get the stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\r\n   * Get the text to be rendered.\r\n   * @return {string|Array<string>|undefined} Text.\r\n   * @api\r\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\r\n   * Get the text alignment.\r\n   * @return {CanvasTextAlign|undefined} Text align.\r\n   * @api\r\n   */\n  getTextAlign() {\n    return this.textAlign_;\n  }\n\n  /**\r\n   * Get the justification.\r\n   * @return {TextJustify|undefined} Justification.\r\n   * @api\r\n   */\n  getJustify() {\n    return this.justify_;\n  }\n\n  /**\r\n   * Get the text baseline.\r\n   * @return {CanvasTextBaseline|undefined} Text baseline.\r\n   * @api\r\n   */\n  getTextBaseline() {\n    return this.textBaseline_;\n  }\n\n  /**\r\n   * Get the background fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\n  getBackgroundFill() {\n    return this.backgroundFill_;\n  }\n\n  /**\r\n   * Get the background stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\n  getBackgroundStroke() {\n    return this.backgroundStroke_;\n  }\n\n  /**\r\n   * Get the padding for the text.\r\n   * @return {Array<number>|null} Padding.\r\n   * @api\r\n   */\n  getPadding() {\n    return this.padding_;\n  }\n\n  /**\r\n   * Get the declutter mode of the shape\r\n   * @return {import(\"./Style.js\").DeclutterMode} Shape's declutter mode\r\n   * @api\r\n   */\n  getDeclutterMode() {\n    return this.declutterMode_;\n  }\n\n  /**\r\n   * Set the `overflow` property.\r\n   *\r\n   * @param {boolean} overflow Let text overflow the path that it follows.\r\n   * @api\r\n   */\n  setOverflow(overflow) {\n    this.overflow_ = overflow;\n  }\n\n  /**\r\n   * Set the font.\r\n   *\r\n   * @param {string|undefined} font Font.\r\n   * @api\r\n   */\n  setFont(font) {\n    this.font_ = font;\n  }\n\n  /**\r\n   * Set the maximum angle between adjacent characters.\r\n   *\r\n   * @param {number} maxAngle Angle in radians.\r\n   * @api\r\n   */\n  setMaxAngle(maxAngle) {\n    this.maxAngle_ = maxAngle;\n  }\n\n  /**\r\n   * Set the x offset.\r\n   *\r\n   * @param {number} offsetX Horizontal text offset.\r\n   * @api\r\n   */\n  setOffsetX(offsetX) {\n    this.offsetX_ = offsetX;\n  }\n\n  /**\r\n   * Set the y offset.\r\n   *\r\n   * @param {number} offsetY Vertical text offset.\r\n   * @api\r\n   */\n  setOffsetY(offsetY) {\n    this.offsetY_ = offsetY;\n  }\n\n  /**\r\n   * Set the text placement.\r\n   *\r\n   * @param {TextPlacement} placement Placement.\r\n   * @api\r\n   */\n  setPlacement(placement) {\n    this.placement_ = placement;\n  }\n\n  /**\r\n   * Set the repeat interval of the text.\r\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\r\n   * @api\r\n   */\n  setRepeat(repeat) {\n    this.repeat_ = repeat;\n  }\n\n  /**\r\n   * Set whether to rotate the text with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n\n  /**\r\n   * Set the fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number|undefined} rotation Rotation.\r\n   * @api\r\n   */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\r\n   * @api\r\n   */\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n  }\n\n  /**\r\n   * Set the stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\r\n   * Set the text.\r\n   *\r\n   * @param {string|Array<string>|undefined} text Text.\r\n   * @api\r\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\r\n   * Set the text alignment.\r\n   *\r\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\r\n   * @api\r\n   */\n  setTextAlign(textAlign) {\n    this.textAlign_ = textAlign;\n  }\n\n  /**\r\n   * Set the justification.\r\n   *\r\n   * @param {TextJustify|undefined} justify Justification.\r\n   * @api\r\n   */\n  setJustify(justify) {\n    this.justify_ = justify;\n  }\n\n  /**\r\n   * Set the text baseline.\r\n   *\r\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\r\n   * @api\r\n   */\n  setTextBaseline(textBaseline) {\n    this.textBaseline_ = textBaseline;\n  }\n\n  /**\r\n   * Set the background fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\n  setBackgroundFill(fill) {\n    this.backgroundFill_ = fill;\n  }\n\n  /**\r\n   * Set the background stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\n  setBackgroundStroke(stroke) {\n    this.backgroundStroke_ = stroke;\n  }\n\n  /**\r\n   * Set the padding (`[top, right, bottom, left]`).\r\n   *\r\n   * @param {Array<number>|null} padding Padding.\r\n   * @api\r\n   */\n  setPadding(padding) {\n    this.padding_ = padding;\n  }\n}\nexport default Text;","map":{"version":3,"names":["Fill","toSize","DEFAULT_FILL_COLOR","Text","constructor","options","font_","font","rotation_","rotation","rotateWithView_","rotateWithView","scale_","scale","scaleArray_","undefined","text_","text","textAlign_","textAlign","justify_","justify","repeat_","repeat","textBaseline_","textBaseline","fill_","fill","color","maxAngle_","maxAngle","Math","PI","placement_","placement","overflow_","overflow","stroke_","stroke","offsetX_","offsetX","offsetY_","offsetY","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","padding_","padding","declutterMode_","declutterMode","clone","getScale","getFont","getPlacement","getRepeat","getMaxAngle","getOverflow","getRotation","getRotateWithView","Array","isArray","slice","getText","getTextAlign","getJustify","getTextBaseline","getFill","getStroke","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","getDeclutterMode","getScaleArray","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setRepeat","setRotateWithView","setFill","setRotation","setScale","setStroke","setText","setTextAlign","setJustify","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/style/Text.js"],"sourcesContent":["/**\r\n * @module ol/style/Text\r\n */\r\nimport Fill from './Fill.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {'point' | 'line'} TextPlacement\r\n * Default text placement is `'point'`. Note that\r\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\r\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\r\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\r\n */\r\n\r\n/**\r\n * @typedef {'left' | 'center' | 'right'} TextJustify\r\n */\r\n\r\n/**\r\n * The default fill color to use if no fill was set at construction time; a\r\n * blackish `#333`.\r\n *\r\n * @const {string}\r\n */\r\nconst DEFAULT_FILL_COLOR = '#333';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [font] Font style as CSS `font` value, see:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\r\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\r\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\r\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\r\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\r\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\r\n * the width of the polygon at the label position or the length of the path that it follows.\r\n * @property {TextPlacement} [placement='point'] Text placement.\r\n * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies\r\n * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.\r\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\r\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\r\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\r\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\r\n * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.\r\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\r\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\r\n * placement where `maxAngle` is not exceeded.\r\n * @property {TextJustify} [justify] Text justification within the text box.\r\n * If not set, text is justified towards the `textAlign` anchor.\r\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\r\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\r\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\r\n * `'hanging'`, `'ideographic'`.\r\n * @property {import(\"./Fill.js\").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\r\n * `'point'`. Default is no fill.\r\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\r\n * is `'point'`. Default is no stroke.\r\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\r\n * values in the array is `[top, right, bottom, left]`.\r\n * @property {import('../style/Style.js').DeclutterMode} [declutterMode] Declutter mode: `declutter`, `obstacle`, `none`\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set text style for vector features.\r\n * @api\r\n */\r\nclass Text {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.font_ = options.font;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.rotation_ = options.rotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.rotateWithView_ = options.rotateWithView;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size|undefined}\r\n     */\r\n    this.scale_ = options.scale;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|Array<string>|undefined}\r\n     */\r\n    this.text_ = options.text;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasTextAlign|undefined}\r\n     */\r\n    this.textAlign_ = options.textAlign;\r\n\r\n    /**\r\n     * @private\r\n     * @type {TextJustify|undefined}\r\n     */\r\n    this.justify_ = options.justify;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.repeat_ = options.repeat;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasTextBaseline|undefined}\r\n     */\r\n    this.textBaseline_ = options.textBaseline;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.fill_ =\r\n      options.fill !== undefined\r\n        ? options.fill\r\n        : new Fill({color: DEFAULT_FILL_COLOR});\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxAngle_ =\r\n      options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\r\n\r\n    /**\r\n     * @private\r\n     * @type {TextPlacement}\r\n     */\r\n    this.placement_ =\r\n      options.placement !== undefined ? options.placement : 'point';\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overflow_ = !!options.overflow;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.backgroundFill_ = options.backgroundFill\r\n      ? options.backgroundFill\r\n      : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.backgroundStroke_ = options.backgroundStroke\r\n      ? options.backgroundStroke\r\n      : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.padding_ = options.padding === undefined ? null : options.padding;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../style/Style.js').DeclutterMode}\r\n     */\r\n    this.declutterMode_ = options.declutterMode;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Text} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    return new Text({\r\n      font: this.getFont(),\r\n      placement: this.getPlacement(),\r\n      repeat: this.getRepeat(),\r\n      maxAngle: this.getMaxAngle(),\r\n      overflow: this.getOverflow(),\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      text: this.getText(),\r\n      textAlign: this.getTextAlign(),\r\n      justify: this.getJustify(),\r\n      textBaseline: this.getTextBaseline(),\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      offsetX: this.getOffsetX(),\r\n      offsetY: this.getOffsetY(),\r\n      backgroundFill: this.getBackgroundFill()\r\n        ? this.getBackgroundFill().clone()\r\n        : undefined,\r\n      backgroundStroke: this.getBackgroundStroke()\r\n        ? this.getBackgroundStroke().clone()\r\n        : undefined,\r\n      padding: this.getPadding() || undefined,\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the `overflow` configuration.\r\n   * @return {boolean} Let text overflow the length of the path they follow.\r\n   * @api\r\n   */\r\n  getOverflow() {\r\n    return this.overflow_;\r\n  }\r\n\r\n  /**\r\n   * Get the font name.\r\n   * @return {string|undefined} Font.\r\n   * @api\r\n   */\r\n  getFont() {\r\n    return this.font_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum angle between adjacent characters.\r\n   * @return {number} Angle in radians.\r\n   * @api\r\n   */\r\n  getMaxAngle() {\r\n    return this.maxAngle_;\r\n  }\r\n\r\n  /**\r\n   * Get the label placement.\r\n   * @return {TextPlacement} Text placement.\r\n   * @api\r\n   */\r\n  getPlacement() {\r\n    return this.placement_;\r\n  }\r\n\r\n  /**\r\n   * Get the repeat interval of the text.\r\n   * @return {number|undefined} Repeat interval in pixels.\r\n   * @api\r\n   */\r\n  getRepeat() {\r\n    return this.repeat_;\r\n  }\r\n\r\n  /**\r\n   * Get the x-offset for the text.\r\n   * @return {number} Horizontal text offset.\r\n   * @api\r\n   */\r\n  getOffsetX() {\r\n    return this.offsetX_;\r\n  }\r\n\r\n  /**\r\n   * Get the y-offset for the text.\r\n   * @return {number} Vertical text offset.\r\n   * @api\r\n   */\r\n  getOffsetY() {\r\n    return this.offsetY_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Determine whether the text rotates with the map.\r\n   * @return {boolean|undefined} Rotate with map.\r\n   * @api\r\n   */\r\n  getRotateWithView() {\r\n    return this.rotateWithView_;\r\n  }\r\n\r\n  /**\r\n   * Get the text rotation.\r\n   * @return {number|undefined} Rotation.\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return this.rotation_;\r\n  }\r\n\r\n  /**\r\n   * Get the text scale.\r\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\r\n   * @api\r\n   */\r\n  getScale() {\r\n    return this.scale_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */\r\n  getScaleArray() {\r\n    return this.scaleArray_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Get the text to be rendered.\r\n   * @return {string|Array<string>|undefined} Text.\r\n   * @api\r\n   */\r\n  getText() {\r\n    return this.text_;\r\n  }\r\n\r\n  /**\r\n   * Get the text alignment.\r\n   * @return {CanvasTextAlign|undefined} Text align.\r\n   * @api\r\n   */\r\n  getTextAlign() {\r\n    return this.textAlign_;\r\n  }\r\n\r\n  /**\r\n   * Get the justification.\r\n   * @return {TextJustify|undefined} Justification.\r\n   * @api\r\n   */\r\n  getJustify() {\r\n    return this.justify_;\r\n  }\r\n\r\n  /**\r\n   * Get the text baseline.\r\n   * @return {CanvasTextBaseline|undefined} Text baseline.\r\n   * @api\r\n   */\r\n  getTextBaseline() {\r\n    return this.textBaseline_;\r\n  }\r\n\r\n  /**\r\n   * Get the background fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getBackgroundFill() {\r\n    return this.backgroundFill_;\r\n  }\r\n\r\n  /**\r\n   * Get the background stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getBackgroundStroke() {\r\n    return this.backgroundStroke_;\r\n  }\r\n\r\n  /**\r\n   * Get the padding for the text.\r\n   * @return {Array<number>|null} Padding.\r\n   * @api\r\n   */\r\n  getPadding() {\r\n    return this.padding_;\r\n  }\r\n\r\n  /**\r\n   * Get the declutter mode of the shape\r\n   * @return {import(\"./Style.js\").DeclutterMode} Shape's declutter mode\r\n   * @api\r\n   */\r\n  getDeclutterMode() {\r\n    return this.declutterMode_;\r\n  }\r\n\r\n  /**\r\n   * Set the `overflow` property.\r\n   *\r\n   * @param {boolean} overflow Let text overflow the path that it follows.\r\n   * @api\r\n   */\r\n  setOverflow(overflow) {\r\n    this.overflow_ = overflow;\r\n  }\r\n\r\n  /**\r\n   * Set the font.\r\n   *\r\n   * @param {string|undefined} font Font.\r\n   * @api\r\n   */\r\n  setFont(font) {\r\n    this.font_ = font;\r\n  }\r\n\r\n  /**\r\n   * Set the maximum angle between adjacent characters.\r\n   *\r\n   * @param {number} maxAngle Angle in radians.\r\n   * @api\r\n   */\r\n  setMaxAngle(maxAngle) {\r\n    this.maxAngle_ = maxAngle;\r\n  }\r\n\r\n  /**\r\n   * Set the x offset.\r\n   *\r\n   * @param {number} offsetX Horizontal text offset.\r\n   * @api\r\n   */\r\n  setOffsetX(offsetX) {\r\n    this.offsetX_ = offsetX;\r\n  }\r\n\r\n  /**\r\n   * Set the y offset.\r\n   *\r\n   * @param {number} offsetY Vertical text offset.\r\n   * @api\r\n   */\r\n  setOffsetY(offsetY) {\r\n    this.offsetY_ = offsetY;\r\n  }\r\n\r\n  /**\r\n   * Set the text placement.\r\n   *\r\n   * @param {TextPlacement} placement Placement.\r\n   * @api\r\n   */\r\n  setPlacement(placement) {\r\n    this.placement_ = placement;\r\n  }\r\n\r\n  /**\r\n   * Set the repeat interval of the text.\r\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\r\n   * @api\r\n   */\r\n  setRepeat(repeat) {\r\n    this.repeat_ = repeat;\r\n  }\r\n\r\n  /**\r\n   * Set whether to rotate the text with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */\r\n  setRotateWithView(rotateWithView) {\r\n    this.rotateWithView_ = rotateWithView;\r\n  }\r\n\r\n  /**\r\n   * Set the fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number|undefined} rotation Rotation.\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.rotation_ = rotation;\r\n  }\r\n\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\r\n   * @api\r\n   */\r\n  setScale(scale) {\r\n    this.scale_ = scale;\r\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\r\n  }\r\n\r\n  /**\r\n   * Set the stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Set the text.\r\n   *\r\n   * @param {string|Array<string>|undefined} text Text.\r\n   * @api\r\n   */\r\n  setText(text) {\r\n    this.text_ = text;\r\n  }\r\n\r\n  /**\r\n   * Set the text alignment.\r\n   *\r\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\r\n   * @api\r\n   */\r\n  setTextAlign(textAlign) {\r\n    this.textAlign_ = textAlign;\r\n  }\r\n\r\n  /**\r\n   * Set the justification.\r\n   *\r\n   * @param {TextJustify|undefined} justify Justification.\r\n   * @api\r\n   */\r\n  setJustify(justify) {\r\n    this.justify_ = justify;\r\n  }\r\n\r\n  /**\r\n   * Set the text baseline.\r\n   *\r\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\r\n   * @api\r\n   */\r\n  setTextBaseline(textBaseline) {\r\n    this.textBaseline_ = textBaseline;\r\n  }\r\n\r\n  /**\r\n   * Set the background fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setBackgroundFill(fill) {\r\n    this.backgroundFill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Set the background stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setBackgroundStroke(stroke) {\r\n    this.backgroundStroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Set the padding (`[top, right, bottom, left]`).\r\n   *\r\n   * @param {Array<number>|null} padding Padding.\r\n   * @api\r\n   */\r\n  setPadding(padding) {\r\n    this.padding_ = padding;\r\n  }\r\n}\r\n\r\nexport default Text;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,WAAW;AAC5B,SAAQC,MAAM,QAAO,YAAY;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,MAAM;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,CAAC;EACT;AACF;AACA;EACEC,WAAWA,CAACC,OAAO,EAAE;IACnBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;IAEvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,KAAK,GAAGD,OAAO,CAACE,IAAI;;IAEzB;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAGH,OAAO,CAACI,QAAQ;;IAEjC;AACJ;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAAGL,OAAO,CAACM,cAAc;;IAE7C;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAGP,OAAO,CAACQ,KAAK;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,WAAW,GAAGb,MAAM,CAACI,OAAO,CAACQ,KAAK,KAAKE,SAAS,GAAGV,OAAO,CAACQ,KAAK,GAAG,CAAC,CAAC;;IAE1E;AACJ;AACA;AACA;IACI,IAAI,CAACG,KAAK,GAAGX,OAAO,CAACY,IAAI;;IAEzB;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAGb,OAAO,CAACc,SAAS;;IAEnC;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAGf,OAAO,CAACgB,OAAO;;IAE/B;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGjB,OAAO,CAACkB,MAAM;;IAE7B;AACJ;AACA;AACA;IACI,IAAI,CAACC,aAAa,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}