{"ast":null,"code":"/**\r\n * @module ol/layer/BaseVector\r\n */\nimport Layer from './Layer.js';\nimport RBush from 'rbush';\nimport Style, { createDefaultStyle, toFunction as toStyleFunction } from '../style/Style.js';\nimport { flatStylesToStyleFunction, rulesToStyleFunction } from '../render/canvas/style.js';\n\n/**\r\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>|import(\"../source/VectorTile.js\").default<import('../Feature').FeatureLike>} VectorSourceType\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {VectorSourceType} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\r\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\r\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\r\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\r\n * layers or groups of layers separately, use different truthy values for `declutter`.\r\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\r\n * be recreated during animations. This means that no vectors will be shown clipped, but the\r\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\r\n * batches will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\r\n * be recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\n\n/**\r\n * @enum {string}\r\n * @private\r\n */\nconst Property = {\n  RENDER_ORDER: 'renderOrder'\n};\n\n/**\r\n * @classdesc\r\n * Vector data that is rendered client-side.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>|import(\"../source/VectorTile.js\").default<import('../Feature').FeatureLike>} VectorSourceType\r\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\r\n * @extends {Layer<VectorSourceType, RendererType>}\r\n * @api\r\n */\nclass BaseVectorLayer extends Layer {\n  /**\r\n   * @param {Options<VectorSourceType>} [options] Options.\r\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.style;\n    delete baseOptions.renderBuffer;\n    delete baseOptions.updateWhileAnimating;\n    delete baseOptions.updateWhileInteracting;\n    super(baseOptions);\n\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\n    this.declutter_ = options.declutter ? String(options.declutter) : undefined;\n\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\n    this.renderBuffer_ = options.renderBuffer !== undefined ? options.renderBuffer : 100;\n\n    /**\r\n     * User provided style.\r\n     * @type {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike}\r\n     * @private\r\n     */\n    this.style_ = null;\n\n    /**\r\n     * Style function for use within the library.\r\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\r\n     * @private\r\n     */\n    this.styleFunction_ = undefined;\n    this.setStyle(options.style);\n\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\n    this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ? options.updateWhileAnimating : false;\n\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\n    this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ? options.updateWhileInteracting : false;\n  }\n\n  /**\r\n   * @return {string} Declutter group.\r\n   */\n  getDeclutter() {\n    return this.declutter_;\n  }\n\n  /**\r\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\r\n   * that resolves with an array of features. The array will either contain the topmost feature\r\n   * when a hit was detected, or it will be empty.\r\n   *\r\n   * The hit detection algorithm used for this method is optimized for performance, but is less\r\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\r\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\r\n   * image.\r\n   *\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\r\n   * @api\r\n   */\n  getFeatures(pixel) {\n    return super.getFeatures(pixel);\n  }\n\n  /**\r\n   * @return {number|undefined} Render buffer.\r\n   */\n  getRenderBuffer() {\n    return this.renderBuffer_;\n  }\n\n  /**\r\n   * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\r\n   *     order.\r\n   */\n  getRenderOrder() {\n    return /** @type {import(\"../render.js\").OrderFunction|null|undefined} */(\n      this.get(Property.RENDER_ORDER)\n    );\n  }\n\n  /**\r\n   * Get the style for features.  This returns whatever was passed to the `style`\r\n   * option at construction or to the `setStyle` method.\r\n   * @return {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null|undefined} Layer style.\r\n   * @api\r\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\r\n   * Get the style function.\r\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\r\n   * @api\r\n   */\n  getStyleFunction() {\n    return this.styleFunction_;\n  }\n\n  /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     animating.\r\n   */\n  getUpdateWhileAnimating() {\n    return this.updateWhileAnimating_;\n  }\n\n  /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     interacting.\r\n   */\n  getUpdateWhileInteracting() {\n    return this.updateWhileInteracting_;\n  }\n\n  /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../layer/Layer.js\").State} layerState Layer state.\r\n   */\n  renderDeclutter(frameState, layerState) {\n    const declutterGroup = this.getDeclutter();\n    if (declutterGroup in frameState.declutter === false) {\n      frameState.declutter[declutterGroup] = new RBush(9);\n    }\n    this.getRenderer().renderDeclutter(frameState, layerState);\n  }\n\n  /**\r\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\r\n   *     Render order.\r\n   */\n  setRenderOrder(renderOrder) {\n    this.set(Property.RENDER_ORDER, renderOrder);\n  }\n\n  /**\r\n   * Set the style for features.  This can be a single style object, an array\r\n   * of styles, or a function that takes a feature and resolution and returns\r\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\r\n   * so only features that have their own styles will be rendered in the layer. Call\r\n   * `setStyle()` without arguments to reset to the default style. See\r\n   * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.\r\n   *\r\n   * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object\r\n   * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):\r\n   * ```js\r\n   * vectorLayer.setStyle({\r\n   *   \"fill-color\": \"yellow\",\r\n   *   \"stroke-color\": \"black\",\r\n   *   \"stroke-width\": 4\r\n   * })\r\n   * ```\r\n   *\r\n   * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\r\n   * @api\r\n   */\n  setStyle(style) {\n    this.style_ = style === undefined ? createDefaultStyle : style;\n    const styleLike = toStyleLike(style);\n    this.styleFunction_ = style === null ? undefined : toStyleFunction(styleLike);\n    this.changed();\n  }\n}\n\n/**\r\n * Coerce the allowed style types into a shorter list of types.  Flat styles, arrays of flat\r\n * styles, and arrays of rules are converted into style functions.\r\n *\r\n * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\r\n * @return {import(\"../style/Style.js\").StyleLike|null} The style.\r\n */\nfunction toStyleLike(style) {\n  if (style === undefined) {\n    return createDefaultStyle;\n  }\n  if (!style) {\n    return null;\n  }\n  if (typeof style === 'function') {\n    return style;\n  }\n  if (style instanceof Style) {\n    return style;\n  }\n  if (!Array.isArray(style)) {\n    return flatStylesToStyleFunction([style]);\n  }\n  if (style.length === 0) {\n    return [];\n  }\n  const length = style.length;\n  const first = style[0];\n  if (first instanceof Style) {\n    /**\r\n     * @type {Array<Style>}\r\n     */\n    const styles = new Array(length);\n    for (let i = 0; i < length; ++i) {\n      const candidate = style[i];\n      if (!(candidate instanceof Style)) {\n        throw new Error('Expected a list of style instances');\n      }\n      styles[i] = candidate;\n    }\n    return styles;\n  }\n  if ('style' in first) {\n    /**\r\n     * @type Array<import(\"../style/flat.js\").Rule>\r\n     */\n    const rules = new Array(length);\n    for (let i = 0; i < length; ++i) {\n      const candidate = style[i];\n      if (!('style' in candidate)) {\n        throw new Error('Expected a list of rules with a style property');\n      }\n      rules[i] = candidate;\n    }\n    return rulesToStyleFunction(rules);\n  }\n  const flatStyles = /** @type {Array<import(\"../style/flat.js\").FlatStyle>} */style;\n  return flatStylesToStyleFunction(flatStyles);\n}\nexport default BaseVectorLayer;","map":{"version":3,"names":["Layer","RBush","Style","createDefaultStyle","toFunction","toStyleFunction","flatStylesToStyleFunction","rulesToStyleFunction","Property","RENDER_ORDER","BaseVectorLayer","constructor","options","baseOptions","Object","assign","style","renderBuffer","updateWhileAnimating","updateWhileInteracting","declutter_","declutter","String","undefined","renderBuffer_","style_","styleFunction_","setStyle","updateWhileAnimating_","updateWhileInteracting_","getDeclutter","getFeatures","pixel","getRenderBuffer","getRenderOrder","get","getStyle","getStyleFunction","getUpdateWhileAnimating","getUpdateWhileInteracting","renderDeclutter","frameState","layerState","declutterGroup","getRenderer","setRenderOrder","renderOrder","set","styleLike","toStyleLike","changed","Array","isArray","length","first","styles","i","candidate","Error","rules","flatStyles"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/layer/BaseVector.js"],"sourcesContent":["/**\r\n * @module ol/layer/BaseVector\r\n */\r\nimport Layer from './Layer.js';\r\nimport RBush from 'rbush';\r\nimport Style, {\r\n  createDefaultStyle,\r\n  toFunction as toStyleFunction,\r\n} from '../style/Style.js';\r\nimport {\r\n  flatStylesToStyleFunction,\r\n  rulesToStyleFunction,\r\n} from '../render/canvas/style.js';\r\n\r\n/**\r\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>|import(\"../source/VectorTile.js\").default<import('../Feature').FeatureLike>} VectorSourceType\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {VectorSourceType} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\r\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\r\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\r\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\r\n * layers or groups of layers separately, use different truthy values for `declutter`.\r\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\r\n * be recreated during animations. This means that no vectors will be shown clipped, but the\r\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\r\n * batches will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\r\n * be recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nconst Property = {\r\n  RENDER_ORDER: 'renderOrder',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Vector data that is rendered client-side.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>|import(\"../source/VectorTile.js\").default<import('../Feature').FeatureLike>} VectorSourceType\r\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\r\n * @extends {Layer<VectorSourceType, RendererType>}\r\n * @api\r\n */\r\nclass BaseVectorLayer extends Layer {\r\n  /**\r\n   * @param {Options<VectorSourceType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = Object.assign({}, options);\r\n\r\n    delete baseOptions.style;\r\n    delete baseOptions.renderBuffer;\r\n    delete baseOptions.updateWhileAnimating;\r\n    delete baseOptions.updateWhileInteracting;\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.declutter_ = options.declutter ? String(options.declutter) : undefined;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.renderBuffer_ =\r\n      options.renderBuffer !== undefined ? options.renderBuffer : 100;\r\n\r\n    /**\r\n     * User provided style.\r\n     * @type {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike}\r\n     * @private\r\n     */\r\n    this.style_ = null;\r\n\r\n    /**\r\n     * Style function for use within the library.\r\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\r\n     * @private\r\n     */\r\n    this.styleFunction_ = undefined;\r\n\r\n    this.setStyle(options.style);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.updateWhileAnimating_ =\r\n      options.updateWhileAnimating !== undefined\r\n        ? options.updateWhileAnimating\r\n        : false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.updateWhileInteracting_ =\r\n      options.updateWhileInteracting !== undefined\r\n        ? options.updateWhileInteracting\r\n        : false;\r\n  }\r\n\r\n  /**\r\n   * @return {string} Declutter group.\r\n   */\r\n  getDeclutter() {\r\n    return this.declutter_;\r\n  }\r\n\r\n  /**\r\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\r\n   * that resolves with an array of features. The array will either contain the topmost feature\r\n   * when a hit was detected, or it will be empty.\r\n   *\r\n   * The hit detection algorithm used for this method is optimized for performance, but is less\r\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\r\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\r\n   * image.\r\n   *\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\r\n   * @api\r\n   */\r\n  getFeatures(pixel) {\r\n    return super.getFeatures(pixel);\r\n  }\r\n\r\n  /**\r\n   * @return {number|undefined} Render buffer.\r\n   */\r\n  getRenderBuffer() {\r\n    return this.renderBuffer_;\r\n  }\r\n\r\n  /**\r\n   * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\r\n   *     order.\r\n   */\r\n  getRenderOrder() {\r\n    return /** @type {import(\"../render.js\").OrderFunction|null|undefined} */ (\r\n      this.get(Property.RENDER_ORDER)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the style for features.  This returns whatever was passed to the `style`\r\n   * option at construction or to the `setStyle` method.\r\n   * @return {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null|undefined} Layer style.\r\n   * @api\r\n   */\r\n  getStyle() {\r\n    return this.style_;\r\n  }\r\n\r\n  /**\r\n   * Get the style function.\r\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\r\n   * @api\r\n   */\r\n  getStyleFunction() {\r\n    return this.styleFunction_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     animating.\r\n   */\r\n  getUpdateWhileAnimating() {\r\n    return this.updateWhileAnimating_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     interacting.\r\n   */\r\n  getUpdateWhileInteracting() {\r\n    return this.updateWhileInteracting_;\r\n  }\r\n\r\n  /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../layer/Layer.js\").State} layerState Layer state.\r\n   */\r\n  renderDeclutter(frameState, layerState) {\r\n    const declutterGroup = this.getDeclutter();\r\n    if (declutterGroup in frameState.declutter === false) {\r\n      frameState.declutter[declutterGroup] = new RBush(9);\r\n    }\r\n    this.getRenderer().renderDeclutter(frameState, layerState);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\r\n   *     Render order.\r\n   */\r\n  setRenderOrder(renderOrder) {\r\n    this.set(Property.RENDER_ORDER, renderOrder);\r\n  }\r\n\r\n  /**\r\n   * Set the style for features.  This can be a single style object, an array\r\n   * of styles, or a function that takes a feature and resolution and returns\r\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\r\n   * so only features that have their own styles will be rendered in the layer. Call\r\n   * `setStyle()` without arguments to reset to the default style. See\r\n   * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.\r\n   *\r\n   * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object\r\n   * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):\r\n   * ```js\r\n   * vectorLayer.setStyle({\r\n   *   \"fill-color\": \"yellow\",\r\n   *   \"stroke-color\": \"black\",\r\n   *   \"stroke-width\": 4\r\n   * })\r\n   * ```\r\n   *\r\n   * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\r\n   * @api\r\n   */\r\n  setStyle(style) {\r\n    this.style_ = style === undefined ? createDefaultStyle : style;\r\n    const styleLike = toStyleLike(style);\r\n    this.styleFunction_ =\r\n      style === null ? undefined : toStyleFunction(styleLike);\r\n    this.changed();\r\n  }\r\n}\r\n\r\n/**\r\n * Coerce the allowed style types into a shorter list of types.  Flat styles, arrays of flat\r\n * styles, and arrays of rules are converted into style functions.\r\n *\r\n * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\r\n * @return {import(\"../style/Style.js\").StyleLike|null} The style.\r\n */\r\nfunction toStyleLike(style) {\r\n  if (style === undefined) {\r\n    return createDefaultStyle;\r\n  }\r\n  if (!style) {\r\n    return null;\r\n  }\r\n  if (typeof style === 'function') {\r\n    return style;\r\n  }\r\n  if (style instanceof Style) {\r\n    return style;\r\n  }\r\n  if (!Array.isArray(style)) {\r\n    return flatStylesToStyleFunction([style]);\r\n  }\r\n  if (style.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  const length = style.length;\r\n  const first = style[0];\r\n\r\n  if (first instanceof Style) {\r\n    /**\r\n     * @type {Array<Style>}\r\n     */\r\n    const styles = new Array(length);\r\n    for (let i = 0; i < length; ++i) {\r\n      const candidate = style[i];\r\n      if (!(candidate instanceof Style)) {\r\n        throw new Error('Expected a list of style instances');\r\n      }\r\n      styles[i] = candidate;\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  if ('style' in first) {\r\n    /**\r\n     * @type Array<import(\"../style/flat.js\").Rule>\r\n     */\r\n    const rules = new Array(length);\r\n    for (let i = 0; i < length; ++i) {\r\n      const candidate = style[i];\r\n      if (!('style' in candidate)) {\r\n        throw new Error('Expected a list of rules with a style property');\r\n      }\r\n      rules[i] = candidate;\r\n    }\r\n    return rulesToStyleFunction(rules);\r\n  }\r\n\r\n  const flatStyles =\r\n    /** @type {Array<import(\"../style/flat.js\").FlatStyle>} */ (style);\r\n  return flatStylesToStyleFunction(flatStyles);\r\n}\r\n\r\nexport default BaseVectorLayer;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,YAAY;AAC9B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IACVC,kBAAkB,EAClBC,UAAU,IAAIC,eAAe,QACxB,mBAAmB;AAC1B,SACEC,yBAAyB,EACzBC,oBAAoB,QACf,2BAA2B;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG;EACfC,YAAY,EAAE;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,SAASV,KAAK,CAAC;EAClC;AACF;AACA;EACEW,WAAWA,CAACC,OAAO,EAAE;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;IAEhC,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,OAAO,CAAC;IAE9C,OAAOC,WAAW,CAACG,KAAK;IACxB,OAAOH,WAAW,CAACI,YAAY;IAC/B,OAAOJ,WAAW,CAACK,oBAAoB;IACvC,OAAOL,WAAW,CAACM,sBAAsB;IACzC,KAAK,CAACN,WAAW,CAAC;;IAElB;AACJ;AACA;AACA;IACI,IAAI,CAACO,UAAU,GAAGR,OAAO,CAACS,SAAS,GAAGC,MAAM,CAACV,OAAO,CAACS,SAAS,CAAC,GAAGE,SAAS;;IAE3E;AACJ;AACA;AACA;IACI,IAAI,CAACC,aAAa,GAChBZ,OAAO,CAACK,YAAY,KAAKM,SAAS,GAAGX,OAAO,CAACK,YAAY,GAAG,GAAG;;IAEjE;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACQ,MAAM,GAAG,IAAI;;IAElB;AACJ;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}