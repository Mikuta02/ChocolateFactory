{"ast":null,"code":"/**\r\n * @module ol/style/Style\r\n */\n\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\nimport { assert } from '../asserts.js';\n\n/**\r\n * Defines how symbols and text are decluttered on layers ith `declutter` set to `true`\r\n * * **declutter**: Overlapping symbols and text are decluttered.\r\n * * **obstacle**: Symbols and text are rendered, but serve as obstacle for subsequent attempts\r\n *   to place a symbol or text at the same location.\r\n * * **none**: No decluttering is done.\r\n *\r\n * @typedef {\"declutter\"|\"obstacle\"|\"none\"} DeclutterMode\r\n */\n\n/**\r\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\r\n * representing the view's resolution. The function should return a\r\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\r\n * vector layer can be styled. If the function returns `undefined`, the\r\n * feature will not be rendered.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\r\n */\n\n/**\r\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\r\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\r\n */\n\n/**\r\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\r\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\r\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\r\n */\n\n/**\r\n * Custom renderer function. Takes two arguments:\r\n *\r\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\r\n * 2. The {@link module:ol/render~State} of the layer renderer.\r\n *\r\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>|Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>),import(\"../render.js\").State): void} RenderFunction\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\r\n * or function returning a geometry to render for this style.\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {import(\"./Image.js\").default} [image] Image style.\r\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\r\n * ignored, and the provided function will be called with each render frame for each geometry.\r\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\r\n * in hit detection rendering.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Text.js\").default} [text] Text style.\r\n * @property {number} [zIndex] Z index.\r\n */\n\n/**\r\n * @classdesc\r\n * Container for vector feature rendering styles. Any changes made to the style\r\n * or its children through `set*()` methods will not take effect until the\r\n * feature or layer that uses the style is re-rendered.\r\n *\r\n * ## Feature styles\r\n *\r\n * If no style is defined, the following default style is used:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const fill = new Fill({\r\n *    color: 'rgba(255,255,255,0.4)',\r\n *  });\r\n *  const stroke = new Stroke({\r\n *    color: '#3399CC',\r\n *    width: 1.25,\r\n *  });\r\n *  const styles = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        fill: fill,\r\n *        stroke: stroke,\r\n *        radius: 5,\r\n *      }),\r\n *      fill: fill,\r\n *      stroke: stroke,\r\n *    }),\r\n *  ];\r\n * ```\r\n *\r\n * A separate editing style has the following defaults:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const styles = {};\r\n *  const white = [255, 255, 255, 1];\r\n *  const blue = [0, 153, 255, 1];\r\n *  const width = 3;\r\n *  styles['Polygon'] = [\r\n *    new Style({\r\n *      fill: new Fill({\r\n *        color: [255, 255, 255, 0.5],\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiPolygon'] =\r\n *      styles['Polygon'];\r\n *  styles['LineString'] = [\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: white,\r\n *        width: width + 2,\r\n *      }),\r\n *    }),\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: blue,\r\n *        width: width,\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiLineString'] = styles['LineString'];\r\n *\r\n *  styles['Circle'] = styles['Polygon'].concat(\r\n *    styles['LineString']\r\n *  );\r\n *\r\n *  styles['Point'] = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        radius: width * 2,\r\n *        fill: new Fill({\r\n *          color: blue,\r\n *        }),\r\n *        stroke: new Stroke({\r\n *          color: white,\r\n *          width: width / 2,\r\n *        }),\r\n *      }),\r\n *      zIndex: Infinity,\r\n *    }),\r\n *  ];\r\n *  styles['MultiPoint'] =\r\n *      styles['Point'];\r\n *  styles['GeometryCollection'] =\r\n *      styles['Polygon'].concat(\r\n *          styles['LineString'],\r\n *          styles['Point']\r\n *      );\r\n * ```\r\n *\r\n * @api\r\n */\nclass Style {\n  /**\r\n   * @param {Options} [options] Style options.\r\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\r\n     * @private\r\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\r\n     */\n    this.geometry_ = null;\n\n    /**\r\n     * @private\r\n     * @type {!GeometryFunction}\r\n     */\n    this.geometryFunction_ = defaultGeometryFunction;\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\r\n     * @private\r\n     * @type {import(\"./Image.js\").default|null}\r\n     */\n    this.image_ = options.image !== undefined ? options.image : null;\n\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\n    this.hitDetectionRenderer_ = options.hitDetectionRenderer !== undefined ? options.hitDetectionRenderer : null;\n\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\r\n     * @private\r\n     * @type {import(\"./Text.js\").default|null}\r\n     */\n    this.text_ = options.text !== undefined ? options.text : null;\n\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n    this.zIndex_ = options.zIndex;\n  }\n\n  /**\r\n   * Clones the style.\r\n   * @return {Style} The cloned style.\r\n   * @api\r\n   */\n  clone() {\n    let geometry = this.getGeometry();\n    if (geometry && typeof geometry === 'object') {\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */geometry.clone();\n    }\n    return new Style({\n      geometry: geometry ?? undefined,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      renderer: this.getRenderer() ?? undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex()\n    });\n  }\n\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setRenderer} or the `renderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\r\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\r\n   * and `image` options of the style will be ignored.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\n  setRenderer(renderer) {\n    this.renderer_ = renderer;\n  }\n\n  /**\r\n   * Sets a custom renderer function for this style used\r\n   * in hit detection.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\n  setHitDetectionRenderer(renderer) {\n    this.hitDetectionRenderer_ = renderer;\n  }\n\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\n  getHitDetectionRenderer() {\n    return this.hitDetectionRenderer_;\n  }\n\n  /**\r\n   * Get the geometry to be rendered.\r\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\r\n   * Feature property or geometry or function that returns the geometry that will\r\n   * be rendered with this style.\r\n   * @api\r\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n\n  /**\r\n   * Get the function used to generate a geometry for rendering.\r\n   * @return {!GeometryFunction} Function that is called with a feature\r\n   * and returns the geometry to render instead of the feature's geometry.\r\n   * @api\r\n   */\n  getGeometryFunction() {\n    return this.geometryFunction_;\n  }\n\n  /**\r\n   * Get the fill style.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\r\n   * Get the image style.\r\n   * @return {import(\"./Image.js\").default|null} Image style.\r\n   * @api\r\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\r\n   * Set the image style.\r\n   * @param {import(\"./Image.js\").default} image Image style.\r\n   * @api\r\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\r\n   * Get the stroke style.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\r\n   * Get the text style.\r\n   * @return {import(\"./Text.js\").default|null} Text style.\r\n   * @api\r\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\r\n   * Set the text style.\r\n   * @param {import(\"./Text.js\").default} text Text style.\r\n   * @api\r\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\r\n   * Get the z-index for the style.\r\n   * @return {number|undefined} ZIndex.\r\n   * @api\r\n   */\n  getZIndex() {\n    return this.zIndex_;\n  }\n\n  /**\r\n   * Set a geometry that is rendered instead of the feature's geometry.\r\n   *\r\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\r\n   *     Feature property or geometry or function returning a geometry to render\r\n   *     for this style.\r\n   * @api\r\n   */\n  setGeometry(geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return /** @type {import(\"../geom/Geometry.js\").default} */(\n          feature.get(geometry)\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return /** @type {import(\"../geom/Geometry.js\").default} */geometry;\n      };\n    }\n    this.geometry_ = geometry;\n  }\n\n  /**\r\n   * Set the z-index.\r\n   *\r\n   * @param {number|undefined} zIndex ZIndex.\r\n   * @api\r\n   */\n  setZIndex(zIndex) {\n    this.zIndex_ = zIndex;\n  }\n}\n\n/**\r\n * Convert the provided object into a style function.  Functions passed through\r\n * unchanged.  Arrays of Style or single style objects wrapped in a\r\n * new style function.\r\n * @param {StyleFunction|Array<Style>|Style} obj\r\n *     A style function, a single style, or an array of styles.\r\n * @return {StyleFunction} A style function.\r\n */\nexport function toFunction(obj) {\n  let styleFunction;\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\r\n     * @type {Array<Style>}\r\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof ( /** @type {?} */obj.getZIndex) === 'function', 'Expected an `Style` or an array of `Style`');\n      const style = /** @type {Style} */obj;\n      styles = [style];\n    }\n    styleFunction = function () {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n/**\r\n * @type {Array<Style>|null}\r\n */\nlet defaultStyles = null;\n\n/**\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<Style>} Style.\r\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    const fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    const stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [new Style({\n      image: new CircleStyle({\n        fill: fill,\n        stroke: stroke,\n        radius: 5\n      }),\n      fill: fill,\n      stroke: stroke\n    })];\n  }\n  return defaultStyles;\n}\n\n/**\r\n * Default styles for editing features.\r\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\r\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\n  const styles = {};\n  const white = [255, 255, 255, 1];\n  const blue = [0, 153, 255, 1];\n  const width = 3;\n  styles['Polygon'] = [new Style({\n    fill: new Fill({\n      color: [255, 255, 255, 0.5]\n    })\n  })];\n  styles['MultiPolygon'] = styles['Polygon'];\n  styles['LineString'] = [new Style({\n    stroke: new Stroke({\n      color: white,\n      width: width + 2\n    })\n  }), new Style({\n    stroke: new Stroke({\n      color: blue,\n      width: width\n    })\n  })];\n  styles['MultiLineString'] = styles['LineString'];\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\n  styles['Point'] = [new Style({\n    image: new CircleStyle({\n      radius: width * 2,\n      fill: new Fill({\n        color: blue\n      }),\n      stroke: new Stroke({\n        color: white,\n        width: width / 2\n      })\n    }),\n    zIndex: Infinity\n  })];\n  styles['MultiPoint'] = styles['Point'];\n  styles['GeometryCollection'] = styles['Polygon'].concat(styles['LineString'], styles['Point']);\n  return styles;\n}\n\n/**\r\n * Function that is called with a feature and returns its default geometry.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\r\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\r\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\nexport default Style;","map":{"version":3,"names":["CircleStyle","Fill","Stroke","assert","Style","constructor","options","geometry_","geometryFunction_","defaultGeometryFunction","geometry","undefined","setGeometry","fill_","fill","image_","image","renderer_","renderer","hitDetectionRenderer_","hitDetectionRenderer","stroke_","stroke","text_","text","zIndex_","zIndex","clone","getGeometry","getFill","getImage","getRenderer","getStroke","getText","getZIndex","setRenderer","setHitDetectionRenderer","getHitDetectionRenderer","getGeometryFunction","setFill","setImage","setStroke","setText","feature","get","setZIndex","toFunction","obj","styleFunction","styles","Array","isArray","style","defaultStyles","createDefaultStyle","resolution","color","width","radius","createEditingStyle","white","blue","concat","Infinity"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/style/Style.js"],"sourcesContent":["/**\r\n * @module ol/style/Style\r\n */\r\n\r\nimport CircleStyle from './Circle.js';\r\nimport Fill from './Fill.js';\r\nimport Stroke from './Stroke.js';\r\nimport {assert} from '../asserts.js';\r\n\r\n/**\r\n * Defines how symbols and text are decluttered on layers ith `declutter` set to `true`\r\n * * **declutter**: Overlapping symbols and text are decluttered.\r\n * * **obstacle**: Symbols and text are rendered, but serve as obstacle for subsequent attempts\r\n *   to place a symbol or text at the same location.\r\n * * **none**: No decluttering is done.\r\n *\r\n * @typedef {\"declutter\"|\"obstacle\"|\"none\"} DeclutterMode\r\n */\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\r\n * representing the view's resolution. The function should return a\r\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\r\n * vector layer can be styled. If the function returns `undefined`, the\r\n * feature will not be rendered.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\r\n */\r\n\r\n/**\r\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\r\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\r\n */\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\r\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\r\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\r\n */\r\n\r\n/**\r\n * Custom renderer function. Takes two arguments:\r\n *\r\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\r\n * 2. The {@link module:ol/render~State} of the layer renderer.\r\n *\r\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>|Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>),import(\"../render.js\").State): void} RenderFunction\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\r\n * or function returning a geometry to render for this style.\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {import(\"./Image.js\").default} [image] Image style.\r\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\r\n * ignored, and the provided function will be called with each render frame for each geometry.\r\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\r\n * in hit detection rendering.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Text.js\").default} [text] Text style.\r\n * @property {number} [zIndex] Z index.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Container for vector feature rendering styles. Any changes made to the style\r\n * or its children through `set*()` methods will not take effect until the\r\n * feature or layer that uses the style is re-rendered.\r\n *\r\n * ## Feature styles\r\n *\r\n * If no style is defined, the following default style is used:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const fill = new Fill({\r\n *    color: 'rgba(255,255,255,0.4)',\r\n *  });\r\n *  const stroke = new Stroke({\r\n *    color: '#3399CC',\r\n *    width: 1.25,\r\n *  });\r\n *  const styles = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        fill: fill,\r\n *        stroke: stroke,\r\n *        radius: 5,\r\n *      }),\r\n *      fill: fill,\r\n *      stroke: stroke,\r\n *    }),\r\n *  ];\r\n * ```\r\n *\r\n * A separate editing style has the following defaults:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const styles = {};\r\n *  const white = [255, 255, 255, 1];\r\n *  const blue = [0, 153, 255, 1];\r\n *  const width = 3;\r\n *  styles['Polygon'] = [\r\n *    new Style({\r\n *      fill: new Fill({\r\n *        color: [255, 255, 255, 0.5],\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiPolygon'] =\r\n *      styles['Polygon'];\r\n *  styles['LineString'] = [\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: white,\r\n *        width: width + 2,\r\n *      }),\r\n *    }),\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: blue,\r\n *        width: width,\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiLineString'] = styles['LineString'];\r\n *\r\n *  styles['Circle'] = styles['Polygon'].concat(\r\n *    styles['LineString']\r\n *  );\r\n *\r\n *  styles['Point'] = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        radius: width * 2,\r\n *        fill: new Fill({\r\n *          color: blue,\r\n *        }),\r\n *        stroke: new Stroke({\r\n *          color: white,\r\n *          width: width / 2,\r\n *        }),\r\n *      }),\r\n *      zIndex: Infinity,\r\n *    }),\r\n *  ];\r\n *  styles['MultiPoint'] =\r\n *      styles['Point'];\r\n *  styles['GeometryCollection'] =\r\n *      styles['Polygon'].concat(\r\n *          styles['LineString'],\r\n *          styles['Point']\r\n *      );\r\n * ```\r\n *\r\n * @api\r\n */\r\nclass Style {\r\n  /**\r\n   * @param {Options} [options] Style options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\r\n     */\r\n    this.geometry_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!GeometryFunction}\r\n     */\r\n    this.geometryFunction_ = defaultGeometryFunction;\r\n\r\n    if (options.geometry !== undefined) {\r\n      this.setGeometry(options.geometry);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.fill_ = options.fill !== undefined ? options.fill : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Image.js\").default|null}\r\n     */\r\n    this.image_ = options.image !== undefined ? options.image : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\r\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\r\n    this.hitDetectionRenderer_ =\r\n      options.hitDetectionRenderer !== undefined\r\n        ? options.hitDetectionRenderer\r\n        : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Text.js\").default|null}\r\n     */\r\n    this.text_ = options.text !== undefined ? options.text : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.zIndex_ = options.zIndex;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Style} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    let geometry = this.getGeometry();\r\n    if (geometry && typeof geometry === 'object') {\r\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n        geometry\r\n      ).clone();\r\n    }\r\n    return new Style({\r\n      geometry: geometry ?? undefined,\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      image: this.getImage() ? this.getImage().clone() : undefined,\r\n      renderer: this.getRenderer() ?? undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      text: this.getText() ? this.getText().clone() : undefined,\r\n      zIndex: this.getZIndex(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setRenderer} or the `renderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\r\n  getRenderer() {\r\n    return this.renderer_;\r\n  }\r\n\r\n  /**\r\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\r\n   * and `image` options of the style will be ignored.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\r\n  setRenderer(renderer) {\r\n    this.renderer_ = renderer;\r\n  }\r\n\r\n  /**\r\n   * Sets a custom renderer function for this style used\r\n   * in hit detection.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\r\n  setHitDetectionRenderer(renderer) {\r\n    this.hitDetectionRenderer_ = renderer;\r\n  }\r\n\r\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\r\n  getHitDetectionRenderer() {\r\n    return this.hitDetectionRenderer_;\r\n  }\r\n\r\n  /**\r\n   * Get the geometry to be rendered.\r\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\r\n   * Feature property or geometry or function that returns the geometry that will\r\n   * be rendered with this style.\r\n   * @api\r\n   */\r\n  getGeometry() {\r\n    return this.geometry_;\r\n  }\r\n\r\n  /**\r\n   * Get the function used to generate a geometry for rendering.\r\n   * @return {!GeometryFunction} Function that is called with a feature\r\n   * and returns the geometry to render instead of the feature's geometry.\r\n   * @api\r\n   */\r\n  getGeometryFunction() {\r\n    return this.geometryFunction_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Get the image style.\r\n   * @return {import(\"./Image.js\").default|null} Image style.\r\n   * @api\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Set the image style.\r\n   * @param {import(\"./Image.js\").default} image Image style.\r\n   * @api\r\n   */\r\n  setImage(image) {\r\n    this.image_ = image;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Get the text style.\r\n   * @return {import(\"./Text.js\").default|null} Text style.\r\n   * @api\r\n   */\r\n  getText() {\r\n    return this.text_;\r\n  }\r\n\r\n  /**\r\n   * Set the text style.\r\n   * @param {import(\"./Text.js\").default} text Text style.\r\n   * @api\r\n   */\r\n  setText(text) {\r\n    this.text_ = text;\r\n  }\r\n\r\n  /**\r\n   * Get the z-index for the style.\r\n   * @return {number|undefined} ZIndex.\r\n   * @api\r\n   */\r\n  getZIndex() {\r\n    return this.zIndex_;\r\n  }\r\n\r\n  /**\r\n   * Set a geometry that is rendered instead of the feature's geometry.\r\n   *\r\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\r\n   *     Feature property or geometry or function returning a geometry to render\r\n   *     for this style.\r\n   * @api\r\n   */\r\n  setGeometry(geometry) {\r\n    if (typeof geometry === 'function') {\r\n      this.geometryFunction_ = geometry;\r\n    } else if (typeof geometry === 'string') {\r\n      this.geometryFunction_ = function (feature) {\r\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n          feature.get(geometry)\r\n        );\r\n      };\r\n    } else if (!geometry) {\r\n      this.geometryFunction_ = defaultGeometryFunction;\r\n    } else if (geometry !== undefined) {\r\n      this.geometryFunction_ = function () {\r\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\r\n      };\r\n    }\r\n    this.geometry_ = geometry;\r\n  }\r\n\r\n  /**\r\n   * Set the z-index.\r\n   *\r\n   * @param {number|undefined} zIndex ZIndex.\r\n   * @api\r\n   */\r\n  setZIndex(zIndex) {\r\n    this.zIndex_ = zIndex;\r\n  }\r\n}\r\n\r\n/**\r\n * Convert the provided object into a style function.  Functions passed through\r\n * unchanged.  Arrays of Style or single style objects wrapped in a\r\n * new style function.\r\n * @param {StyleFunction|Array<Style>|Style} obj\r\n *     A style function, a single style, or an array of styles.\r\n * @return {StyleFunction} A style function.\r\n */\r\nexport function toFunction(obj) {\r\n  let styleFunction;\r\n\r\n  if (typeof obj === 'function') {\r\n    styleFunction = obj;\r\n  } else {\r\n    /**\r\n     * @type {Array<Style>}\r\n     */\r\n    let styles;\r\n    if (Array.isArray(obj)) {\r\n      styles = obj;\r\n    } else {\r\n      assert(\r\n        typeof (/** @type {?} */ (obj).getZIndex) === 'function',\r\n        'Expected an `Style` or an array of `Style`',\r\n      );\r\n      const style = /** @type {Style} */ (obj);\r\n      styles = [style];\r\n    }\r\n    styleFunction = function () {\r\n      return styles;\r\n    };\r\n  }\r\n  return styleFunction;\r\n}\r\n\r\n/**\r\n * @type {Array<Style>|null}\r\n */\r\nlet defaultStyles = null;\r\n\r\n/**\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<Style>} Style.\r\n */\r\nexport function createDefaultStyle(feature, resolution) {\r\n  // We don't use an immediately-invoked function\r\n  // and a closure so we don't get an error at script evaluation time in\r\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\r\n  // canvas.getContext('2d') at construction time, which will cause an.error\r\n  // in such browsers.)\r\n  if (!defaultStyles) {\r\n    const fill = new Fill({\r\n      color: 'rgba(255,255,255,0.4)',\r\n    });\r\n    const stroke = new Stroke({\r\n      color: '#3399CC',\r\n      width: 1.25,\r\n    });\r\n    defaultStyles = [\r\n      new Style({\r\n        image: new CircleStyle({\r\n          fill: fill,\r\n          stroke: stroke,\r\n          radius: 5,\r\n        }),\r\n        fill: fill,\r\n        stroke: stroke,\r\n      }),\r\n    ];\r\n  }\r\n  return defaultStyles;\r\n}\r\n\r\n/**\r\n * Default styles for editing features.\r\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\r\n */\r\nexport function createEditingStyle() {\r\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\r\n  const styles = {};\r\n  const white = [255, 255, 255, 1];\r\n  const blue = [0, 153, 255, 1];\r\n  const width = 3;\r\n  styles['Polygon'] = [\r\n    new Style({\r\n      fill: new Fill({\r\n        color: [255, 255, 255, 0.5],\r\n      }),\r\n    }),\r\n  ];\r\n  styles['MultiPolygon'] = styles['Polygon'];\r\n\r\n  styles['LineString'] = [\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: white,\r\n        width: width + 2,\r\n      }),\r\n    }),\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: blue,\r\n        width: width,\r\n      }),\r\n    }),\r\n  ];\r\n  styles['MultiLineString'] = styles['LineString'];\r\n\r\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\r\n\r\n  styles['Point'] = [\r\n    new Style({\r\n      image: new CircleStyle({\r\n        radius: width * 2,\r\n        fill: new Fill({\r\n          color: blue,\r\n        }),\r\n        stroke: new Stroke({\r\n          color: white,\r\n          width: width / 2,\r\n        }),\r\n      }),\r\n      zIndex: Infinity,\r\n    }),\r\n  ];\r\n  styles['MultiPoint'] = styles['Point'];\r\n\r\n  styles['GeometryCollection'] = styles['Polygon'].concat(\r\n    styles['LineString'],\r\n    styles['Point'],\r\n  );\r\n\r\n  return styles;\r\n}\r\n\r\n/**\r\n * Function that is called with a feature and returns its default geometry.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\r\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\r\n */\r\nfunction defaultGeometryFunction(feature) {\r\n  return feature.getGeometry();\r\n}\r\n\r\nexport default Style;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}