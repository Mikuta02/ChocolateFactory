{"ast":null,"code":"/**\r\n * @module ol/style/Stroke\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\r\n * @property {number} [lineDashOffset=0] Line dash offset.\r\n * @property {number} [miterLimit=10] Miter limit.\r\n * @property {number} [width] Width.\r\n */\n\n/**\r\n * @classdesc\r\n * Set stroke style for vector features.\r\n * Note that the defaults given are the Canvas defaults, which will be used if\r\n * option is not defined. The `get` functions return whatever was entered in\r\n * the options; they will not return the default.\r\n * @api\r\n */\nclass Stroke {\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\r\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\r\n     * @private\r\n     * @type {CanvasLineCap|undefined}\r\n     */\n    this.lineCap_ = options.lineCap;\n\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n\n    /**\r\n     * @private\r\n     * @type {CanvasLineJoin|undefined}\r\n     */\n    this.lineJoin_ = options.lineJoin;\n\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n    this.miterLimit_ = options.miterLimit;\n\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n    this.width_ = options.width;\n  }\n\n  /**\r\n   * Clones the style.\r\n   * @return {Stroke} The cloned style.\r\n   * @api\r\n   */\n  clone() {\n    const color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth()\n    });\n  }\n\n  /**\r\n   * Get the stroke color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\r\n   * @api\r\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\r\n   * Get the line cap type for the stroke.\r\n   * @return {CanvasLineCap|undefined} Line cap.\r\n   * @api\r\n   */\n  getLineCap() {\n    return this.lineCap_;\n  }\n\n  /**\r\n   * Get the line dash style for the stroke.\r\n   * @return {Array<number>|null} Line dash.\r\n   * @api\r\n   */\n  getLineDash() {\n    return this.lineDash_;\n  }\n\n  /**\r\n   * Get the line dash offset for the stroke.\r\n   * @return {number|undefined} Line dash offset.\r\n   * @api\r\n   */\n  getLineDashOffset() {\n    return this.lineDashOffset_;\n  }\n\n  /**\r\n   * Get the line join type for the stroke.\r\n   * @return {CanvasLineJoin|undefined} Line join.\r\n   * @api\r\n   */\n  getLineJoin() {\n    return this.lineJoin_;\n  }\n\n  /**\r\n   * Get the miter limit for the stroke.\r\n   * @return {number|undefined} Miter limit.\r\n   * @api\r\n   */\n  getMiterLimit() {\n    return this.miterLimit_;\n  }\n\n  /**\r\n   * Get the stroke width.\r\n   * @return {number|undefined} Width.\r\n   * @api\r\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\r\n   * @api\r\n   */\n  setColor(color) {\n    this.color_ = color;\n  }\n\n  /**\r\n   * Set the line cap.\r\n   *\r\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\r\n   * @api\r\n   */\n  setLineCap(lineCap) {\n    this.lineCap_ = lineCap;\n  }\n\n  /**\r\n   * Set the line dash.\r\n   *\r\n   * @param {Array<number>|null} lineDash Line dash.\r\n   * @api\r\n   */\n  setLineDash(lineDash) {\n    this.lineDash_ = lineDash;\n  }\n\n  /**\r\n   * Set the line dash offset.\r\n   *\r\n   * @param {number|undefined} lineDashOffset Line dash offset.\r\n   * @api\r\n   */\n  setLineDashOffset(lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n  }\n\n  /**\r\n   * Set the line join.\r\n   *\r\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\r\n   * @api\r\n   */\n  setLineJoin(lineJoin) {\n    this.lineJoin_ = lineJoin;\n  }\n\n  /**\r\n   * Set the miter limit.\r\n   *\r\n   * @param {number|undefined} miterLimit Miter limit.\r\n   * @api\r\n   */\n  setMiterLimit(miterLimit) {\n    this.miterLimit_ = miterLimit;\n  }\n\n  /**\r\n   * Set the width.\r\n   *\r\n   * @param {number|undefined} width Width.\r\n   * @api\r\n   */\n  setWidth(width) {\n    this.width_ = width;\n  }\n}\nexport default Stroke;","map":{"version":3,"names":["Stroke","constructor","options","color_","color","undefined","lineCap_","lineCap","lineDash_","lineDash","lineDashOffset_","lineDashOffset","lineJoin_","lineJoin","miterLimit_","miterLimit","width_","width","clone","getColor","Array","isArray","slice","getLineCap","getLineDash","getLineDashOffset","getLineJoin","getMiterLimit","getWidth","setColor","setLineCap","setLineDash","setLineDashOffset","setLineJoin","setMiterLimit","setWidth"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/style/Stroke.js"],"sourcesContent":["/**\r\n * @module ol/style/Stroke\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\r\n * @property {number} [lineDashOffset=0] Line dash offset.\r\n * @property {number} [miterLimit=10] Miter limit.\r\n * @property {number} [width] Width.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set stroke style for vector features.\r\n * Note that the defaults given are the Canvas defaults, which will be used if\r\n * option is not defined. The `get` functions return whatever was entered in\r\n * the options; they will not return the default.\r\n * @api\r\n */\r\nclass Stroke {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\r\n     */\r\n    this.color_ = options.color !== undefined ? options.color : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasLineCap|undefined}\r\n     */\r\n    this.lineCap_ = options.lineCap;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.lineDashOffset_ = options.lineDashOffset;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasLineJoin|undefined}\r\n     */\r\n    this.lineJoin_ = options.lineJoin;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.miterLimit_ = options.miterLimit;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.width_ = options.width;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Stroke} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const color = this.getColor();\r\n    return new Stroke({\r\n      color: Array.isArray(color) ? color.slice() : color || undefined,\r\n      lineCap: this.getLineCap(),\r\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\r\n      lineDashOffset: this.getLineDashOffset(),\r\n      lineJoin: this.getLineJoin(),\r\n      miterLimit: this.getMiterLimit(),\r\n      width: this.getWidth(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the stroke color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Get the line cap type for the stroke.\r\n   * @return {CanvasLineCap|undefined} Line cap.\r\n   * @api\r\n   */\r\n  getLineCap() {\r\n    return this.lineCap_;\r\n  }\r\n\r\n  /**\r\n   * Get the line dash style for the stroke.\r\n   * @return {Array<number>|null} Line dash.\r\n   * @api\r\n   */\r\n  getLineDash() {\r\n    return this.lineDash_;\r\n  }\r\n\r\n  /**\r\n   * Get the line dash offset for the stroke.\r\n   * @return {number|undefined} Line dash offset.\r\n   * @api\r\n   */\r\n  getLineDashOffset() {\r\n    return this.lineDashOffset_;\r\n  }\r\n\r\n  /**\r\n   * Get the line join type for the stroke.\r\n   * @return {CanvasLineJoin|undefined} Line join.\r\n   * @api\r\n   */\r\n  getLineJoin() {\r\n    return this.lineJoin_;\r\n  }\r\n\r\n  /**\r\n   * Get the miter limit for the stroke.\r\n   * @return {number|undefined} Miter limit.\r\n   * @api\r\n   */\r\n  getMiterLimit() {\r\n    return this.miterLimit_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke width.\r\n   * @return {number|undefined} Width.\r\n   * @api\r\n   */\r\n  getWidth() {\r\n    return this.width_;\r\n  }\r\n\r\n  /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\r\n   * @api\r\n   */\r\n  setColor(color) {\r\n    this.color_ = color;\r\n  }\r\n\r\n  /**\r\n   * Set the line cap.\r\n   *\r\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\r\n   * @api\r\n   */\r\n  setLineCap(lineCap) {\r\n    this.lineCap_ = lineCap;\r\n  }\r\n\r\n  /**\r\n   * Set the line dash.\r\n   *\r\n   * @param {Array<number>|null} lineDash Line dash.\r\n   * @api\r\n   */\r\n  setLineDash(lineDash) {\r\n    this.lineDash_ = lineDash;\r\n  }\r\n\r\n  /**\r\n   * Set the line dash offset.\r\n   *\r\n   * @param {number|undefined} lineDashOffset Line dash offset.\r\n   * @api\r\n   */\r\n  setLineDashOffset(lineDashOffset) {\r\n    this.lineDashOffset_ = lineDashOffset;\r\n  }\r\n\r\n  /**\r\n   * Set the line join.\r\n   *\r\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\r\n   * @api\r\n   */\r\n  setLineJoin(lineJoin) {\r\n    this.lineJoin_ = lineJoin;\r\n  }\r\n\r\n  /**\r\n   * Set the miter limit.\r\n   *\r\n   * @param {number|undefined} miterLimit Miter limit.\r\n   * @api\r\n   */\r\n  setMiterLimit(miterLimit) {\r\n    this.miterLimit_ = miterLimit;\r\n  }\r\n\r\n  /**\r\n   * Set the width.\r\n   *\r\n   * @param {number|undefined} width Width.\r\n   * @api\r\n   */\r\n  setWidth(width) {\r\n    this.width_ = width;\r\n  }\r\n}\r\n\r\nexport default Stroke;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}