{"ast":null,"code":"/**\r\n * @module ol/interaction/DragBox\r\n */\n// FIXME draw drag box\nimport Event from '../events/Event.js';\nimport PointerInteraction from './Pointer.js';\nimport RenderBox from '../render/Box.js';\nimport { mouseActionButton } from '../events/condition.js';\n\n/**\r\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\r\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\r\n * true should be returned.\r\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\r\n * to indicate whether that event should be handled.\r\n * Default is {@link ol/events/condition~mouseActionButton}.\r\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\r\n * `boxEndCondition` function.\r\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\r\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\r\n * Default is `true` if the area of the box is bigger than the `minArea` option.\r\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\r\n * before `boxend` is fired.\r\n */\n\n/**\r\n * @enum {string}\r\n */\nconst DragBoxEventType = {\n  /**\r\n   * Triggered upon drag box start.\r\n   * @event DragBoxEvent#boxstart\r\n   * @api\r\n   */\n  BOXSTART: 'boxstart',\n  /**\r\n   * Triggered on drag when box is active.\r\n   * @event DragBoxEvent#boxdrag\r\n   * @api\r\n   */\n  BOXDRAG: 'boxdrag',\n  /**\r\n   * Triggered upon drag box end.\r\n   * @event DragBoxEvent#boxend\r\n   * @api\r\n   */\n  BOXEND: 'boxend',\n  /**\r\n   * Triggered upon drag box canceled.\r\n   * @event DragBoxEvent#boxcancel\r\n   * @api\r\n   */\n  BOXCANCEL: 'boxcancel'\n};\n\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of\r\n * this type.\r\n */\nexport class DragBoxEvent extends Event {\n  /**\r\n   * @param {string} type The event type.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\r\n   */\n  constructor(type, coordinate, mapBrowserEvent) {\n    super(type);\n\n    /**\r\n     * The coordinate of the drag event.\r\n     * @const\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     * @api\r\n     */\n    this.coordinate = coordinate;\n\n    /**\r\n     * @const\r\n     * @type {import(\"../MapBrowserEvent.js\").default}\r\n     * @api\r\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n}\n\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\r\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\r\n */\n\n/**\r\n * @classdesc\r\n * Allows the user to draw a vector box by clicking and dragging on the map,\r\n * normally combined with an {@link module:ol/events/condition} that limits\r\n * it to when the shift or other key is held down. This is used, for example,\r\n * for zooming to a specific area of the map\r\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\r\n * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).\r\n *\r\n * @fires DragBoxEvent\r\n * @api\r\n */\nclass DragBox extends PointerInteraction {\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\n  constructor(options) {\n    super();\n\n    /***\r\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\r\n     */\n    this.on;\n\n    /***\r\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\r\n     */\n    this.once;\n\n    /***\r\n     * @type {DragBoxOnSignature<void>}\r\n     */\n    this.un;\n    options = options ? options : {};\n\n    /**\r\n     * @type {import(\"../render/Box.js\").default}\r\n     * @private\r\n     */\n    this.box_ = new RenderBox(options.className || 'ol-dragbox');\n\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\n    this.minArea_ = options.minArea !== undefined ? options.minArea : 64;\n    if (options.onBoxEnd) {\n      this.onBoxEnd = options.onBoxEnd;\n    }\n\n    /**\r\n     * @type {import(\"../pixel.js\").Pixel}\r\n     * @private\r\n     */\n    this.startPixel_ = null;\n\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\n    this.condition_ = options.condition ? options.condition : mouseActionButton;\n\n    /**\r\n     * @private\r\n     * @type {EndCondition}\r\n     */\n    this.boxEndCondition_ = options.boxEndCondition ? options.boxEndCondition : this.defaultBoxEndCondition;\n  }\n\n  /**\r\n   * The default condition for determining whether the boxend event\r\n   * should fire.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\r\n   *     leading to the box end.\r\n   * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\r\n   * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\r\n   * @return {boolean} Whether or not the boxend condition should be fired.\r\n   */\n  defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {\n    const width = endPixel[0] - startPixel[0];\n    const height = endPixel[1] - startPixel[1];\n    return width * width + height * height >= this.minArea_;\n  }\n\n  /**\r\n   * Returns geometry of last drawn box.\r\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\r\n   * @api\r\n   */\n  getGeometry() {\n    return this.box_.getGeometry();\n  }\n\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!this.startPixel_) {\n      return;\n    }\n    this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\n    this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));\n  }\n\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (!this.startPixel_) {\n      return false;\n    }\n    this.box_.setMap(null);\n    const completeBox = this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel);\n    if (completeBox) {\n      this.onBoxEnd(mapBrowserEvent);\n    }\n    this.dispatchEvent(new DragBoxEvent(completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL, mapBrowserEvent.coordinate, mapBrowserEvent));\n    return false;\n  }\n\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.condition_(mapBrowserEvent)) {\n      this.startPixel_ = mapBrowserEvent.pixel;\n      this.box_.setMap(mapBrowserEvent.map);\n      this.box_.setPixels(this.startPixel_, this.startPixel_);\n      this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));\n      return true;\n    }\n    return false;\n  }\n\n  /**\r\n   * Function to execute just before `onboxend` is fired\r\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\r\n   */\n  onBoxEnd(event) {}\n\n  /**\r\n   * Activate or deactivate the interaction.\r\n   * @param {boolean} active Active.\r\n   * @observable\r\n   * @api\r\n   */\n  setActive(active) {\n    if (!active) {\n      this.box_.setMap(null);\n      if (this.startPixel_) {\n        this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXCANCEL, this.startPixel_, null));\n        this.startPixel_ = null;\n      }\n    }\n    super.setActive(active);\n  }\n}\nexport default DragBox;","map":{"version":3,"names":["Event","PointerInteraction","RenderBox","mouseActionButton","DragBoxEventType","BOXSTART","BOXDRAG","BOXEND","BOXCANCEL","DragBoxEvent","constructor","type","coordinate","mapBrowserEvent","DragBox","options","on","once","un","box_","className","minArea_","minArea","undefined","onBoxEnd","startPixel_","condition_","condition","boxEndCondition_","boxEndCondition","defaultBoxEndCondition","startPixel","endPixel","width","height","getGeometry","handleDragEvent","setPixels","pixel","dispatchEvent","handleUpEvent","setMap","completeBox","handleDownEvent","map","event","setActive","active"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/interaction/DragBox.js"],"sourcesContent":["/**\r\n * @module ol/interaction/DragBox\r\n */\r\n// FIXME draw drag box\r\nimport Event from '../events/Event.js';\r\nimport PointerInteraction from './Pointer.js';\r\nimport RenderBox from '../render/Box.js';\r\nimport {mouseActionButton} from '../events/condition.js';\r\n\r\n/**\r\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\r\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\r\n * true should be returned.\r\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\r\n * to indicate whether that event should be handled.\r\n * Default is {@link ol/events/condition~mouseActionButton}.\r\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\r\n * `boxEndCondition` function.\r\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\r\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\r\n * Default is `true` if the area of the box is bigger than the `minArea` option.\r\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\r\n * before `boxend` is fired.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nconst DragBoxEventType = {\r\n  /**\r\n   * Triggered upon drag box start.\r\n   * @event DragBoxEvent#boxstart\r\n   * @api\r\n   */\r\n  BOXSTART: 'boxstart',\r\n\r\n  /**\r\n   * Triggered on drag when box is active.\r\n   * @event DragBoxEvent#boxdrag\r\n   * @api\r\n   */\r\n  BOXDRAG: 'boxdrag',\r\n\r\n  /**\r\n   * Triggered upon drag box end.\r\n   * @event DragBoxEvent#boxend\r\n   * @api\r\n   */\r\n  BOXEND: 'boxend',\r\n\r\n  /**\r\n   * Triggered upon drag box canceled.\r\n   * @event DragBoxEvent#boxcancel\r\n   * @api\r\n   */\r\n  BOXCANCEL: 'boxcancel',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of\r\n * this type.\r\n */\r\nexport class DragBoxEvent extends Event {\r\n  /**\r\n   * @param {string} type The event type.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\r\n   */\r\n  constructor(type, coordinate, mapBrowserEvent) {\r\n    super(type);\r\n\r\n    /**\r\n     * The coordinate of the drag event.\r\n     * @const\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     * @api\r\n     */\r\n    this.coordinate = coordinate;\r\n\r\n    /**\r\n     * @const\r\n     * @type {import(\"../MapBrowserEvent.js\").default}\r\n     * @api\r\n     */\r\n    this.mapBrowserEvent = mapBrowserEvent;\r\n  }\r\n}\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\r\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to draw a vector box by clicking and dragging on the map,\r\n * normally combined with an {@link module:ol/events/condition} that limits\r\n * it to when the shift or other key is held down. This is used, for example,\r\n * for zooming to a specific area of the map\r\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\r\n * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).\r\n *\r\n * @fires DragBoxEvent\r\n * @api\r\n */\r\nclass DragBox extends PointerInteraction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /***\r\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {DragBoxOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {import(\"../render/Box.js\").default}\r\n     * @private\r\n     */\r\n    this.box_ = new RenderBox(options.className || 'ol-dragbox');\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.minArea_ = options.minArea !== undefined ? options.minArea : 64;\r\n\r\n    if (options.onBoxEnd) {\r\n      this.onBoxEnd = options.onBoxEnd;\r\n    }\r\n\r\n    /**\r\n     * @type {import(\"../pixel.js\").Pixel}\r\n     * @private\r\n     */\r\n    this.startPixel_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\r\n    this.condition_ = options.condition ? options.condition : mouseActionButton;\r\n\r\n    /**\r\n     * @private\r\n     * @type {EndCondition}\r\n     */\r\n    this.boxEndCondition_ = options.boxEndCondition\r\n      ? options.boxEndCondition\r\n      : this.defaultBoxEndCondition;\r\n  }\r\n\r\n  /**\r\n   * The default condition for determining whether the boxend event\r\n   * should fire.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\r\n   *     leading to the box end.\r\n   * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\r\n   * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\r\n   * @return {boolean} Whether or not the boxend condition should be fired.\r\n   */\r\n  defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {\r\n    const width = endPixel[0] - startPixel[0];\r\n    const height = endPixel[1] - startPixel[1];\r\n    return width * width + height * height >= this.minArea_;\r\n  }\r\n\r\n  /**\r\n   * Returns geometry of last drawn box.\r\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\r\n   * @api\r\n   */\r\n  getGeometry() {\r\n    return this.box_.getGeometry();\r\n  }\r\n\r\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   */\r\n  handleDragEvent(mapBrowserEvent) {\r\n    if (!this.startPixel_) {\r\n      return;\r\n    }\r\n\r\n    this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\r\n\r\n    this.dispatchEvent(\r\n      new DragBoxEvent(\r\n        DragBoxEventType.BOXDRAG,\r\n        mapBrowserEvent.coordinate,\r\n        mapBrowserEvent,\r\n      ),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   */\r\n  handleUpEvent(mapBrowserEvent) {\r\n    if (!this.startPixel_) {\r\n      return false;\r\n    }\r\n\r\n    this.box_.setMap(null);\r\n\r\n    const completeBox = this.boxEndCondition_(\r\n      mapBrowserEvent,\r\n      this.startPixel_,\r\n      mapBrowserEvent.pixel,\r\n    );\r\n    if (completeBox) {\r\n      this.onBoxEnd(mapBrowserEvent);\r\n    }\r\n    this.dispatchEvent(\r\n      new DragBoxEvent(\r\n        completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL,\r\n        mapBrowserEvent.coordinate,\r\n        mapBrowserEvent,\r\n      ),\r\n    );\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   */\r\n  handleDownEvent(mapBrowserEvent) {\r\n    if (this.condition_(mapBrowserEvent)) {\r\n      this.startPixel_ = mapBrowserEvent.pixel;\r\n      this.box_.setMap(mapBrowserEvent.map);\r\n      this.box_.setPixels(this.startPixel_, this.startPixel_);\r\n      this.dispatchEvent(\r\n        new DragBoxEvent(\r\n          DragBoxEventType.BOXSTART,\r\n          mapBrowserEvent.coordinate,\r\n          mapBrowserEvent,\r\n        ),\r\n      );\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Function to execute just before `onboxend` is fired\r\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\r\n   */\r\n  onBoxEnd(event) {}\r\n\r\n  /**\r\n   * Activate or deactivate the interaction.\r\n   * @param {boolean} active Active.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setActive(active) {\r\n    if (!active) {\r\n      this.box_.setMap(null);\r\n      if (this.startPixel_) {\r\n        this.dispatchEvent(\r\n          new DragBoxEvent(DragBoxEventType.BOXCANCEL, this.startPixel_, null),\r\n        );\r\n        this.startPixel_ = null;\r\n      }\r\n    }\r\n\r\n    super.setActive(active);\r\n  }\r\n}\r\n\r\nexport default DragBox;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,oBAAoB;AACtC,OAAOC,kBAAkB,MAAM,cAAc;AAC7C,OAAOC,SAAS,MAAM,kBAAkB;AACxC,SAAQC,iBAAiB,QAAO,wBAAwB;;AAExD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG;EACvB;AACF;AACA;AACA;AACA;EACEC,QAAQ,EAAE,UAAU;EAEpB;AACF;AACA;AACA;AACA;EACEC,OAAO,EAAE,SAAS;EAElB;AACF;AACA;AACA;AACA;EACEC,MAAM,EAAE,QAAQ;EAEhB;AACF;AACA;AACA;AACA;EACEC,SAAS,EAAE;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,SAAST,KAAK,CAAC;EACtC;AACF;AACA;AACA;AACA;EACEU,WAAWA,CAACC,IAAI,EAAEC,UAAU,EAAEC,eAAe,EAAE;IAC7C,KAAK,CAACF,IAAI,CAAC;;IAEX;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAGA,UAAU;;IAE5B;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAAGA,eAAe;EACxC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,SAASb,kBAAkB,CAAC;EACvC;AACF;AACA;EACES,WAAWA,CAACK,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;;IAEP;AACJ;AACA;IACI,IAAI,CAACC,EAAE;;IAEP;AACJ;AACA;IACI,IAAI,CAACC,IAAI;;IAET;AACJ;AACA;IACI,IAAI,CAACC,EAAE;IAEPH,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;;IAEhC;AACJ;AACA;AACA;IACI,IAAI,CAACI,IAAI,GAAG,IAAIjB,SAAS,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}