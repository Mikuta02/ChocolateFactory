{"ast":null,"code":"/**\r\n * @module ol/proj\r\n */\n\n/**\r\n * The ol/proj module stores:\r\n * * a list of {@link module:ol/proj/Projection~Projection}\r\n * objects, one for each projection supported by the application\r\n * * a list of transform functions needed to convert coordinates in one projection\r\n * into another.\r\n *\r\n * The static functions are the methods used to maintain these.\r\n * Each transform function can handle not only simple coordinate pairs, but also\r\n * large arrays of coordinates such as vector geometries.\r\n *\r\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\r\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\r\n * for example by Bing Maps or OpenStreetMap), together with the relevant\r\n * transform functions.\r\n *\r\n * Additional transforms may be added by using the http://proj4js.org/\r\n * library (version 2.2 or later). You can use the full build supplied by\r\n * Proj4js, or create a custom build to support those projections you need; see\r\n * the Proj4js website for how to do this. You also need the Proj4js definitions\r\n * for the required projections. These definitions can be obtained from\r\n * https://epsg.io/, and are a JS function, so can be loaded in a script\r\n * tag (as in the examples) or pasted into your application.\r\n *\r\n * After all required projection definitions are added to proj4's registry (by\r\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\r\n * package. Existing transforms are not changed by this function. See\r\n * examples/wms-image-custom-proj for an example of this.\r\n *\r\n * Additional projection definitions can be registered with `proj4.defs()` any\r\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\r\n * know in advance what projections are needed, you can initially load minimal\r\n * support and then load whichever are requested.\r\n *\r\n * Note that Proj4js does not support projection extents. If you want to add\r\n * one for creating default tile grids, you can add it after the Projection\r\n * object has been created with `setExtent`, for example,\r\n * `get('EPSG:1234').setExtent(extent)`.\r\n *\r\n * In addition to Proj4js support, any transform functions can be added with\r\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\r\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\r\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\r\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\r\n * examples/wms-custom-proj for an example of this.\r\n *\r\n * Note that if no transforms are needed and you only need to define the\r\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\r\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\r\n * this.\r\n */\nimport Projection from './proj/Projection.js';\nimport { PROJECTIONS as EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326 } from './proj/epsg3857.js';\nimport { PROJECTIONS as EPSG4326_PROJECTIONS } from './proj/epsg4326.js';\nimport { METERS_PER_UNIT } from './proj/Units.js';\nimport { add as addProj, clear as clearProj, get as getProj } from './proj/projections.js';\nimport { add as addTransformFunc, clear as clearTransformFuncs, get as getTransformFunc } from './proj/transforms.js';\nimport { applyTransform, getWidth } from './extent.js';\nimport { clamp, modulo } from './math.js';\nimport { equals, getWorldsAway } from './coordinate.js';\nimport { getDistance } from './sphere.js';\nimport { warn } from './console.js';\n\n/**\r\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\r\n * string or undefined.\r\n * @typedef {Projection|string|undefined} ProjectionLike\r\n * @api\r\n */\n\n/**\r\n * A transform function accepts an array of input coordinate values, an optional\r\n * output array, and an optional dimension (default should be 2).  The function\r\n * transforms the input coordinate values, populates the output array, and\r\n * returns the output array.\r\n *\r\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\r\n * @api\r\n */\n\nexport { METERS_PER_UNIT };\nexport { Projection };\nlet showCoordinateWarning = true;\n\n/**\r\n * @param {boolean} [disable = true] Disable console info about `useGeographic()`\r\n */\nexport function disableCoordinateWarning(disable) {\n  const hide = disable === undefined ? true : disable;\n  showCoordinateWarning = !hide;\n}\n\n/**\r\n * @param {Array<number>} input Input coordinate array.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @return {Array<number>} Output coordinate array (new array, same coordinate\r\n *     values).\r\n */\nexport function cloneTransform(input, output) {\n  if (output !== undefined) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    output = output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n\n/**\r\n * @param {Array<number>} input Input coordinate array.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @return {Array<number>} Input coordinate array (same array as input).\r\n */\nexport function identityTransform(input, output) {\n  if (output !== undefined && input !== output) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    input = output;\n  }\n  return input;\n}\n\n/**\r\n * Add a Projection object to the list of supported projections that can be\r\n * looked up by their code.\r\n *\r\n * @param {Projection} projection Projection instance.\r\n * @api\r\n */\nexport function addProjection(projection) {\n  addProj(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n\n/**\r\n * @param {Array<Projection>} projections Projections.\r\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n\n/**\r\n * Fetches a Projection object for the code specified.\r\n *\r\n * @param {ProjectionLike} projectionLike Either a code string which is\r\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\r\n *     existing projection object, or undefined.\r\n * @return {Projection|null} Projection object, or null if not in list.\r\n * @api\r\n */\nexport function get(projectionLike) {\n  return typeof projectionLike === 'string' ? getProj( /** @type {string} */projectionLike) : /** @type {Projection} */projectionLike || null;\n}\n\n/**\r\n * Get the resolution of the point in degrees or distance units.\r\n * For projections with degrees as the unit this will simply return the\r\n * provided resolution. For other projections the point resolution is\r\n * by default estimated by transforming the `point` pixel to EPSG:4326,\r\n * measuring its width and height on the normal sphere,\r\n * and taking the average of the width and height.\r\n * A custom function can be provided for a specific projection, either\r\n * by setting the `getPointResolution` option in the\r\n * {@link module:ol/proj/Projection~Projection} constructor or by using\r\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\r\n * projection object.\r\n * @param {ProjectionLike} projection The projection.\r\n * @param {number} resolution Nominal resolution in projection units.\r\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\r\n * @param {import(\"./proj/Units.js\").Units} [units] Units to get the point resolution in.\r\n * Default is the projection's units.\r\n * @return {number} Point resolution.\r\n * @api\r\n */\nexport function getPointResolution(projection, resolution, point, units) {\n  projection = get(projection);\n  let pointResolution;\n  const getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n    if (units && units !== projection.getUnits()) {\n      const metersPerUnit = projection.getMetersPerUnit();\n      if (metersPerUnit) {\n        pointResolution = pointResolution * metersPerUnit / METERS_PER_UNIT[units];\n      }\n    }\n  } else {\n    const projUnits = projection.getUnits();\n    if (projUnits == 'degrees' && !units || units == 'degrees') {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      const toEPSG4326 = getTransformFromProjections(projection, get('EPSG:4326'));\n      if (toEPSG4326 === identityTransform && projUnits !== 'degrees') {\n        // no transform is available\n        pointResolution = resolution * projection.getMetersPerUnit();\n      } else {\n        let vertices = [point[0] - resolution / 2, point[1], point[0] + resolution / 2, point[1], point[0], point[1] - resolution / 2, point[0], point[1] + resolution / 2];\n        vertices = toEPSG4326(vertices, vertices, 2);\n        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n        pointResolution = (width + height) / 2;\n      }\n      const metersPerUnit = units ? METERS_PER_UNIT[units] : projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n\n/**\r\n * Registers transformation functions that don't alter coordinates. Those allow\r\n * to transform between projections with equal meaning.\r\n *\r\n * @param {Array<Projection>} projections Projections.\r\n * @api\r\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function (source) {\n    projections.forEach(function (destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n\n/**\r\n * Registers transformation functions to convert coordinates in any projection\r\n * in projection1 to any projection in projection2.\r\n *\r\n * @param {Array<Projection>} projections1 Projections with equal\r\n *     meaning.\r\n * @param {Array<Projection>} projections2 Projections with equal\r\n *     meaning.\r\n * @param {TransformFunction} forwardTransform Transformation from any\r\n *   projection in projection1 to any projection in projection2.\r\n * @param {TransformFunction} inverseTransform Transform from any projection\r\n *   in projection2 to any projection in projection1..\r\n */\nexport function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {\n  projections1.forEach(function (projection1) {\n    projections2.forEach(function (projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n\n/**\r\n * Clear all cached projections and transforms.\r\n */\nexport function clearAllProjections() {\n  clearProj();\n  clearTransformFuncs();\n}\n\n/**\r\n * @param {Projection|string|undefined} projection Projection.\r\n * @param {string} defaultCode Default code.\r\n * @return {Projection} Projection.\r\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  }\n  if (typeof projection === 'string') {\n    return get(projection);\n  }\n  return /** @type {Projection} */projection;\n}\n\n/**\r\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\r\n * function.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\r\n *     transform.\r\n * @return {TransformFunction} Transform function.\r\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\r\n     * @param {Array<number>} input Input.\r\n     * @param {Array<number>} [output] Output.\r\n     * @param {number} [dimension] Dimension.\r\n     * @return {Array<number>} Output.\r\n     */\n    function (input, output, dimension) {\n      const length = input.length;\n      dimension = dimension !== undefined ? dimension : 2;\n      output = output !== undefined ? output : new Array(length);\n      for (let i = 0; i < length; i += dimension) {\n        const point = coordTransform(input.slice(i, i + dimension));\n        const pointLength = point.length;\n        for (let j = 0, jj = dimension; j < jj; ++j) {\n          output[i + j] = j >= pointLength ? input[i + j] : point[j];\n        }\n      }\n      return output;\n    }\n  );\n}\n\n/**\r\n * Registers coordinate transform functions to convert coordinates between the\r\n * source projection and the destination projection.\r\n * The forward and inverse functions convert coordinate pairs; this function\r\n * converts these into the functions used internally which also handle\r\n * extents and coordinate arrays.\r\n *\r\n * @param {ProjectionLike} source Source projection.\r\n * @param {ProjectionLike} destination Destination projection.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\r\n *     function (that is, from the source projection to the destination\r\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\r\n *     the transformed {@link module:ol/coordinate~Coordinate}.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\r\n *     function (that is, from the destination projection to the source\r\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\r\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\r\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\r\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\r\n *     source.\r\n * @api\r\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  const sourceProj = get(source);\n  const destProj = get(destination);\n  addTransformFunc(sourceProj, destProj, createTransformFromCoordinateTransform(forward));\n  addTransformFunc(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));\n}\n\n/**\r\n * Transforms a coordinate from longitude/latitude to a different projection.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\r\n *     an array with longitude as 1st and latitude as 2nd element.\r\n * @param {ProjectionLike} [projection] Target projection. The\r\n *     default is Web Mercator, i.e. 'EPSG:3857'.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\r\n * @api\r\n */\nexport function fromLonLat(coordinate, projection) {\n  disableCoordinateWarning();\n  return transform(coordinate, 'EPSG:4326', projection !== undefined ? projection : 'EPSG:3857');\n}\n\n/**\r\n * Transforms a coordinate to longitude/latitude.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\r\n * @param {ProjectionLike} [projection] Projection of the coordinate.\r\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\r\n *     with longitude as 1st and latitude as 2nd element.\r\n * @api\r\n */\nexport function toLonLat(coordinate, projection) {\n  const lonLat = transform(coordinate, projection !== undefined ? projection : 'EPSG:3857', 'EPSG:4326');\n  const lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n\n/**\r\n * Checks if two projections are the same, that is every coordinate in one\r\n * projection does represent the same geographic point as the same coordinate in\r\n * the other projection.\r\n *\r\n * @param {Projection} projection1 Projection 1.\r\n * @param {Projection} projection2 Projection 2.\r\n * @return {boolean} Equivalent.\r\n * @api\r\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  }\n  const transformFunc = getTransformFromProjections(projection1, projection2);\n  return transformFunc === cloneTransform && equalUnits;\n}\n\n/**\r\n * Searches in the list of transform functions for the function for converting\r\n * coordinates from the source projection to the destination projection.\r\n *\r\n * @param {Projection} sourceProjection Source Projection object.\r\n * @param {Projection} destinationProjection Destination Projection\r\n *     object.\r\n * @return {TransformFunction} Transform function.\r\n */\nexport function getTransformFromProjections(sourceProjection, destinationProjection) {\n  const sourceCode = sourceProjection.getCode();\n  const destinationCode = destinationProjection.getCode();\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (!transformFunc) {\n    transformFunc = identityTransform;\n  }\n  return transformFunc;\n}\n\n/**\r\n * Given the projection-like objects, searches for a transformation\r\n * function to convert a coordinates array from the source projection to the\r\n * destination projection.\r\n *\r\n * @param {ProjectionLike} source Source.\r\n * @param {ProjectionLike} destination Destination.\r\n * @return {TransformFunction} Transform function.\r\n * @api\r\n */\nexport function getTransform(source, destination) {\n  const sourceProjection = get(source);\n  const destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n\n/**\r\n * Transforms a coordinate from source projection to destination projection.\r\n * This returns a new coordinate (and does not modify the original).\r\n *\r\n * See {@link module:ol/proj.transformExtent} for extent transformation.\r\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\r\n * subclasses for geometry transforms.\r\n *\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {ProjectionLike} source Source projection-like.\r\n * @param {ProjectionLike} destination Destination projection-like.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n * @api\r\n */\nexport function transform(coordinate, source, destination) {\n  const transformFunc = getTransform(source, destination);\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n\n/**\r\n * Transforms an extent from source projection to destination projection.  This\r\n * returns a new extent (and does not modify the original).\r\n *\r\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\r\n * @param {ProjectionLike} source Source projection-like.\r\n * @param {ProjectionLike} destination Destination projection-like.\r\n * @param {number} [stops] Number of stops per side used for the transform.\r\n * By default only the corners are used.\r\n * @return {import(\"./extent.js\").Extent} The transformed extent.\r\n * @api\r\n */\nexport function transformExtent(extent, source, destination, stops) {\n  const transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc, undefined, stops);\n}\n\n/**\r\n * Transforms the given point to the destination projection.\r\n *\r\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\r\n * @param {Projection} sourceProjection Source projection.\r\n * @param {Projection} destinationProjection Destination projection.\r\n * @return {import(\"./coordinate.js\").Coordinate} Point.\r\n */\nexport function transformWithProjections(point, sourceProjection, destinationProjection) {\n  const transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);\n  return transformFunc(point);\n}\n\n/**\r\n * @type {Projection|null}\r\n */\nlet userProjection = null;\n\n/**\r\n * Set the projection for coordinates supplied from and returned by API methods.\r\n * This includes all API methods except for those interacting with tile grids,\r\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\r\n * @param {ProjectionLike} projection The user projection.\r\n * @api\r\n */\nexport function setUserProjection(projection) {\n  userProjection = get(projection);\n}\n\n/**\r\n * Clear the user projection if set.\r\n * @api\r\n */\nexport function clearUserProjection() {\n  userProjection = null;\n}\n\n/**\r\n * Get the projection for coordinates supplied from and returned by API methods.\r\n * @return {Projection|null} The user projection (or null if not set).\r\n * @api\r\n */\nexport function getUserProjection() {\n  return userProjection;\n}\n\n/**\r\n * Use geographic coordinates (WGS-84 datum) in API methods.\r\n * This includes all API methods except for those interacting with tile grids,\r\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\r\n * @api\r\n */\nexport function useGeographic() {\n  setUserProjection('EPSG:4326');\n}\n\n/**\r\n * Return a coordinate transformed into the user projection.  If no user projection\r\n * is set, the original coordinate is returned.\r\n * @param {Array<number>} coordinate Input coordinate.\r\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\r\n * @return {Array<number>} The input coordinate in the user projection.\r\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n  if (!userProjection) {\n    return coordinate;\n  }\n  return transform(coordinate, sourceProjection, userProjection);\n}\n\n/**\r\n * Return a coordinate transformed from the user projection.  If no user projection\r\n * is set, the original coordinate is returned.\r\n * @param {Array<number>} coordinate Input coordinate.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {Array<number>} The input coordinate transformed.\r\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n  if (!userProjection) {\n    if (showCoordinateWarning && !equals(coordinate, [0, 0]) && coordinate[0] >= -180 && coordinate[0] <= 180 && coordinate[1] >= -90 && coordinate[1] <= 90) {\n      showCoordinateWarning = false;\n      warn('Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.');\n    }\n    return coordinate;\n  }\n  return transform(coordinate, userProjection, destProjection);\n}\n\n/**\r\n * Return an extent transformed into the user projection.  If no user projection\r\n * is set, the original extent is returned.\r\n * @param {import(\"./extent.js\").Extent} extent Input extent.\r\n * @param {ProjectionLike} sourceProjection The input extent projection.\r\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\r\n */\nexport function toUserExtent(extent, sourceProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, sourceProjection, userProjection);\n}\n\n/**\r\n * Return an extent transformed from the user projection.  If no user projection\r\n * is set, the original extent is returned.\r\n * @param {import(\"./extent.js\").Extent} extent Input extent.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\r\n */\nexport function fromUserExtent(extent, destProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, userProjection, destProjection);\n}\n\n/**\r\n * Return the resolution in user projection units per pixel. If no user projection\r\n * is set, or source or user projection are missing units, the original resolution\r\n * is returned.\r\n * @param {number} resolution Resolution in input projection units per pixel.\r\n * @param {ProjectionLike} sourceProjection The input projection.\r\n * @return {number} Resolution in user projection units per pixel.\r\n */\nexport function toUserResolution(resolution, sourceProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const sourceMetersPerUnit = get(sourceProjection).getMetersPerUnit();\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\n  return sourceMetersPerUnit && userMetersPerUnit ? resolution * sourceMetersPerUnit / userMetersPerUnit : resolution;\n}\n\n/**\r\n * Return the resolution in user projection units per pixel. If no user projection\r\n * is set, or source or user projection are missing units, the original resolution\r\n * is returned.\r\n * @param {number} resolution Resolution in user projection units per pixel.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {number} Resolution in destination projection units per pixel.\r\n */\nexport function fromUserResolution(resolution, destProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const destMetersPerUnit = get(destProjection).getMetersPerUnit();\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\n  return destMetersPerUnit && userMetersPerUnit ? resolution * userMetersPerUnit / destMetersPerUnit : resolution;\n}\n\n/**\r\n * Creates a safe coordinate transform function from a coordinate transform function.\r\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\r\n * and that coordinates exceeding the source projection validity extent's range will be\r\n * clamped to the validity range.\r\n * @param {Projection} sourceProj Source projection.\r\n * @param {Projection} destProj Destination projection.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destination).\r\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destination).\r\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n  return function (coord) {\n    let transformed, worldsAway;\n    if (sourceProj.canWrapX()) {\n      const sourceExtent = sourceProj.getExtent();\n      const sourceExtentWidth = getWidth(sourceExtent);\n      coord = coord.slice(0);\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n      if (worldsAway) {\n        // Move x to the real world\n        coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n      }\n      coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\n      coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\n      transformed = transform(coord);\n    } else {\n      transformed = transform(coord);\n    }\n    if (worldsAway && destProj.canWrapX()) {\n      // Move transformed coordinate back to the offset world\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\n    }\n    return transformed;\n  };\n}\n\n/**\r\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\r\n * by when this module is executed and should only need to be called again after\r\n * `clearAllProjections()` is called (e.g. in tests).\r\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(EPSG4326_PROJECTIONS, EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326);\n}\naddCommon();","map":{"version":3,"names":["Projection","PROJECTIONS","EPSG3857_PROJECTIONS","fromEPSG4326","toEPSG4326","EPSG4326_PROJECTIONS","METERS_PER_UNIT","add","addProj","clear","clearProj","get","getProj","addTransformFunc","clearTransformFuncs","getTransformFunc","applyTransform","getWidth","clamp","modulo","equals","getWorldsAway","getDistance","warn","showCoordinateWarning","disableCoordinateWarning","disable","hide","undefined","cloneTransform","input","output","i","ii","length","slice","identityTransform","addProjection","projection","getCode","addProjections","projections","forEach","projectionLike","getPointResolution","resolution","point","units","pointResolution","getter","getPointResolutionFunc","getUnits","metersPerUnit","getMetersPerUnit","projUnits","getTransformFromProjections","vertices","width","height","addEquivalentProjections","source","destination","addEquivalentTransforms","projections1","projections2","forwardTransform","inverseTransform","projection1","projection2","clearAllProjections","createProjection","defaultCode","createTransformFromCoordinateTransform","coordTransform","dimension","Array","pointLength","j","jj","addCoordinateTransforms","forward","inverse","sourceProj","destProj","fromLonLat","coordinate","transform","toLonLat","lonLat","lon","equivalent","equalUnits","transformFunc","sourceProjection","destinationProjection","sourceCode","destinationCode","getTransform","transformExtent","extent","stops","transformWithProjections","userProjection","setUserProjection","clearUserProjection","getUserProjection","useGeographic","toUserCoordinate","fromUserCoordinate","destProjection","toUserExtent","fromUserExtent","toUserResolution","sourceMetersPerUnit","userMetersPerUnit","fromUserResolution","destMetersPerUnit","createSafeCoordinateTransform","coord","transformed","worldsAway","canWrapX","sourceExtent","getExtent","sourceExtentWidth","addCommon"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/proj.js"],"sourcesContent":["/**\r\n * @module ol/proj\r\n */\r\n\r\n/**\r\n * The ol/proj module stores:\r\n * * a list of {@link module:ol/proj/Projection~Projection}\r\n * objects, one for each projection supported by the application\r\n * * a list of transform functions needed to convert coordinates in one projection\r\n * into another.\r\n *\r\n * The static functions are the methods used to maintain these.\r\n * Each transform function can handle not only simple coordinate pairs, but also\r\n * large arrays of coordinates such as vector geometries.\r\n *\r\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\r\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\r\n * for example by Bing Maps or OpenStreetMap), together with the relevant\r\n * transform functions.\r\n *\r\n * Additional transforms may be added by using the http://proj4js.org/\r\n * library (version 2.2 or later). You can use the full build supplied by\r\n * Proj4js, or create a custom build to support those projections you need; see\r\n * the Proj4js website for how to do this. You also need the Proj4js definitions\r\n * for the required projections. These definitions can be obtained from\r\n * https://epsg.io/, and are a JS function, so can be loaded in a script\r\n * tag (as in the examples) or pasted into your application.\r\n *\r\n * After all required projection definitions are added to proj4's registry (by\r\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\r\n * package. Existing transforms are not changed by this function. See\r\n * examples/wms-image-custom-proj for an example of this.\r\n *\r\n * Additional projection definitions can be registered with `proj4.defs()` any\r\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\r\n * know in advance what projections are needed, you can initially load minimal\r\n * support and then load whichever are requested.\r\n *\r\n * Note that Proj4js does not support projection extents. If you want to add\r\n * one for creating default tile grids, you can add it after the Projection\r\n * object has been created with `setExtent`, for example,\r\n * `get('EPSG:1234').setExtent(extent)`.\r\n *\r\n * In addition to Proj4js support, any transform functions can be added with\r\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\r\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\r\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\r\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\r\n * examples/wms-custom-proj for an example of this.\r\n *\r\n * Note that if no transforms are needed and you only need to define the\r\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\r\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\r\n * this.\r\n */\r\nimport Projection from './proj/Projection.js';\r\nimport {\r\n  PROJECTIONS as EPSG3857_PROJECTIONS,\r\n  fromEPSG4326,\r\n  toEPSG4326,\r\n} from './proj/epsg3857.js';\r\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\r\nimport {METERS_PER_UNIT} from './proj/Units.js';\r\nimport {\r\n  add as addProj,\r\n  clear as clearProj,\r\n  get as getProj,\r\n} from './proj/projections.js';\r\nimport {\r\n  add as addTransformFunc,\r\n  clear as clearTransformFuncs,\r\n  get as getTransformFunc,\r\n} from './proj/transforms.js';\r\nimport {applyTransform, getWidth} from './extent.js';\r\nimport {clamp, modulo} from './math.js';\r\nimport {equals, getWorldsAway} from './coordinate.js';\r\nimport {getDistance} from './sphere.js';\r\nimport {warn} from './console.js';\r\n\r\n/**\r\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\r\n * string or undefined.\r\n * @typedef {Projection|string|undefined} ProjectionLike\r\n * @api\r\n */\r\n\r\n/**\r\n * A transform function accepts an array of input coordinate values, an optional\r\n * output array, and an optional dimension (default should be 2).  The function\r\n * transforms the input coordinate values, populates the output array, and\r\n * returns the output array.\r\n *\r\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\r\n * @api\r\n */\r\n\r\nexport {METERS_PER_UNIT};\r\n\r\nexport {Projection};\r\n\r\nlet showCoordinateWarning = true;\r\n\r\n/**\r\n * @param {boolean} [disable = true] Disable console info about `useGeographic()`\r\n */\r\nexport function disableCoordinateWarning(disable) {\r\n  const hide = disable === undefined ? true : disable;\r\n  showCoordinateWarning = !hide;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} input Input coordinate array.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @return {Array<number>} Output coordinate array (new array, same coordinate\r\n *     values).\r\n */\r\nexport function cloneTransform(input, output) {\r\n  if (output !== undefined) {\r\n    for (let i = 0, ii = input.length; i < ii; ++i) {\r\n      output[i] = input[i];\r\n    }\r\n    output = output;\r\n  } else {\r\n    output = input.slice();\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} input Input coordinate array.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @return {Array<number>} Input coordinate array (same array as input).\r\n */\r\nexport function identityTransform(input, output) {\r\n  if (output !== undefined && input !== output) {\r\n    for (let i = 0, ii = input.length; i < ii; ++i) {\r\n      output[i] = input[i];\r\n    }\r\n    input = output;\r\n  }\r\n  return input;\r\n}\r\n\r\n/**\r\n * Add a Projection object to the list of supported projections that can be\r\n * looked up by their code.\r\n *\r\n * @param {Projection} projection Projection instance.\r\n * @api\r\n */\r\nexport function addProjection(projection) {\r\n  addProj(projection.getCode(), projection);\r\n  addTransformFunc(projection, projection, cloneTransform);\r\n}\r\n\r\n/**\r\n * @param {Array<Projection>} projections Projections.\r\n */\r\nexport function addProjections(projections) {\r\n  projections.forEach(addProjection);\r\n}\r\n\r\n/**\r\n * Fetches a Projection object for the code specified.\r\n *\r\n * @param {ProjectionLike} projectionLike Either a code string which is\r\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\r\n *     existing projection object, or undefined.\r\n * @return {Projection|null} Projection object, or null if not in list.\r\n * @api\r\n */\r\nexport function get(projectionLike) {\r\n  return typeof projectionLike === 'string'\r\n    ? getProj(/** @type {string} */ (projectionLike))\r\n    : /** @type {Projection} */ (projectionLike) || null;\r\n}\r\n\r\n/**\r\n * Get the resolution of the point in degrees or distance units.\r\n * For projections with degrees as the unit this will simply return the\r\n * provided resolution. For other projections the point resolution is\r\n * by default estimated by transforming the `point` pixel to EPSG:4326,\r\n * measuring its width and height on the normal sphere,\r\n * and taking the average of the width and height.\r\n * A custom function can be provided for a specific projection, either\r\n * by setting the `getPointResolution` option in the\r\n * {@link module:ol/proj/Projection~Projection} constructor or by using\r\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\r\n * projection object.\r\n * @param {ProjectionLike} projection The projection.\r\n * @param {number} resolution Nominal resolution in projection units.\r\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\r\n * @param {import(\"./proj/Units.js\").Units} [units] Units to get the point resolution in.\r\n * Default is the projection's units.\r\n * @return {number} Point resolution.\r\n * @api\r\n */\r\nexport function getPointResolution(projection, resolution, point, units) {\r\n  projection = get(projection);\r\n  let pointResolution;\r\n  const getter = projection.getPointResolutionFunc();\r\n  if (getter) {\r\n    pointResolution = getter(resolution, point);\r\n    if (units && units !== projection.getUnits()) {\r\n      const metersPerUnit = projection.getMetersPerUnit();\r\n      if (metersPerUnit) {\r\n        pointResolution =\r\n          (pointResolution * metersPerUnit) / METERS_PER_UNIT[units];\r\n      }\r\n    }\r\n  } else {\r\n    const projUnits = projection.getUnits();\r\n    if ((projUnits == 'degrees' && !units) || units == 'degrees') {\r\n      pointResolution = resolution;\r\n    } else {\r\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\r\n      // measuring its width and height on the normal sphere, and taking the\r\n      // average of the width and height.\r\n      const toEPSG4326 = getTransformFromProjections(\r\n        projection,\r\n        get('EPSG:4326'),\r\n      );\r\n      if (toEPSG4326 === identityTransform && projUnits !== 'degrees') {\r\n        // no transform is available\r\n        pointResolution = resolution * projection.getMetersPerUnit();\r\n      } else {\r\n        let vertices = [\r\n          point[0] - resolution / 2,\r\n          point[1],\r\n          point[0] + resolution / 2,\r\n          point[1],\r\n          point[0],\r\n          point[1] - resolution / 2,\r\n          point[0],\r\n          point[1] + resolution / 2,\r\n        ];\r\n        vertices = toEPSG4326(vertices, vertices, 2);\r\n        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\r\n        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\r\n        pointResolution = (width + height) / 2;\r\n      }\r\n      const metersPerUnit = units\r\n        ? METERS_PER_UNIT[units]\r\n        : projection.getMetersPerUnit();\r\n      if (metersPerUnit !== undefined) {\r\n        pointResolution /= metersPerUnit;\r\n      }\r\n    }\r\n  }\r\n  return pointResolution;\r\n}\r\n\r\n/**\r\n * Registers transformation functions that don't alter coordinates. Those allow\r\n * to transform between projections with equal meaning.\r\n *\r\n * @param {Array<Projection>} projections Projections.\r\n * @api\r\n */\r\nexport function addEquivalentProjections(projections) {\r\n  addProjections(projections);\r\n  projections.forEach(function (source) {\r\n    projections.forEach(function (destination) {\r\n      if (source !== destination) {\r\n        addTransformFunc(source, destination, cloneTransform);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Registers transformation functions to convert coordinates in any projection\r\n * in projection1 to any projection in projection2.\r\n *\r\n * @param {Array<Projection>} projections1 Projections with equal\r\n *     meaning.\r\n * @param {Array<Projection>} projections2 Projections with equal\r\n *     meaning.\r\n * @param {TransformFunction} forwardTransform Transformation from any\r\n *   projection in projection1 to any projection in projection2.\r\n * @param {TransformFunction} inverseTransform Transform from any projection\r\n *   in projection2 to any projection in projection1..\r\n */\r\nexport function addEquivalentTransforms(\r\n  projections1,\r\n  projections2,\r\n  forwardTransform,\r\n  inverseTransform,\r\n) {\r\n  projections1.forEach(function (projection1) {\r\n    projections2.forEach(function (projection2) {\r\n      addTransformFunc(projection1, projection2, forwardTransform);\r\n      addTransformFunc(projection2, projection1, inverseTransform);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Clear all cached projections and transforms.\r\n */\r\nexport function clearAllProjections() {\r\n  clearProj();\r\n  clearTransformFuncs();\r\n}\r\n\r\n/**\r\n * @param {Projection|string|undefined} projection Projection.\r\n * @param {string} defaultCode Default code.\r\n * @return {Projection} Projection.\r\n */\r\nexport function createProjection(projection, defaultCode) {\r\n  if (!projection) {\r\n    return get(defaultCode);\r\n  }\r\n  if (typeof projection === 'string') {\r\n    return get(projection);\r\n  }\r\n  return /** @type {Projection} */ (projection);\r\n}\r\n\r\n/**\r\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\r\n * function.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\r\n *     transform.\r\n * @return {TransformFunction} Transform function.\r\n */\r\nexport function createTransformFromCoordinateTransform(coordTransform) {\r\n  return (\r\n    /**\r\n     * @param {Array<number>} input Input.\r\n     * @param {Array<number>} [output] Output.\r\n     * @param {number} [dimension] Dimension.\r\n     * @return {Array<number>} Output.\r\n     */\r\n    function (input, output, dimension) {\r\n      const length = input.length;\r\n      dimension = dimension !== undefined ? dimension : 2;\r\n      output = output !== undefined ? output : new Array(length);\r\n      for (let i = 0; i < length; i += dimension) {\r\n        const point = coordTransform(input.slice(i, i + dimension));\r\n        const pointLength = point.length;\r\n        for (let j = 0, jj = dimension; j < jj; ++j) {\r\n          output[i + j] = j >= pointLength ? input[i + j] : point[j];\r\n        }\r\n      }\r\n      return output;\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Registers coordinate transform functions to convert coordinates between the\r\n * source projection and the destination projection.\r\n * The forward and inverse functions convert coordinate pairs; this function\r\n * converts these into the functions used internally which also handle\r\n * extents and coordinate arrays.\r\n *\r\n * @param {ProjectionLike} source Source projection.\r\n * @param {ProjectionLike} destination Destination projection.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\r\n *     function (that is, from the source projection to the destination\r\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\r\n *     the transformed {@link module:ol/coordinate~Coordinate}.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\r\n *     function (that is, from the destination projection to the source\r\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\r\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\r\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\r\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\r\n *     source.\r\n * @api\r\n */\r\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\r\n  const sourceProj = get(source);\r\n  const destProj = get(destination);\r\n  addTransformFunc(\r\n    sourceProj,\r\n    destProj,\r\n    createTransformFromCoordinateTransform(forward),\r\n  );\r\n  addTransformFunc(\r\n    destProj,\r\n    sourceProj,\r\n    createTransformFromCoordinateTransform(inverse),\r\n  );\r\n}\r\n\r\n/**\r\n * Transforms a coordinate from longitude/latitude to a different projection.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\r\n *     an array with longitude as 1st and latitude as 2nd element.\r\n * @param {ProjectionLike} [projection] Target projection. The\r\n *     default is Web Mercator, i.e. 'EPSG:3857'.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\r\n * @api\r\n */\r\nexport function fromLonLat(coordinate, projection) {\r\n  disableCoordinateWarning();\r\n  return transform(\r\n    coordinate,\r\n    'EPSG:4326',\r\n    projection !== undefined ? projection : 'EPSG:3857',\r\n  );\r\n}\r\n\r\n/**\r\n * Transforms a coordinate to longitude/latitude.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\r\n * @param {ProjectionLike} [projection] Projection of the coordinate.\r\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\r\n *     with longitude as 1st and latitude as 2nd element.\r\n * @api\r\n */\r\nexport function toLonLat(coordinate, projection) {\r\n  const lonLat = transform(\r\n    coordinate,\r\n    projection !== undefined ? projection : 'EPSG:3857',\r\n    'EPSG:4326',\r\n  );\r\n  const lon = lonLat[0];\r\n  if (lon < -180 || lon > 180) {\r\n    lonLat[0] = modulo(lon + 180, 360) - 180;\r\n  }\r\n  return lonLat;\r\n}\r\n\r\n/**\r\n * Checks if two projections are the same, that is every coordinate in one\r\n * projection does represent the same geographic point as the same coordinate in\r\n * the other projection.\r\n *\r\n * @param {Projection} projection1 Projection 1.\r\n * @param {Projection} projection2 Projection 2.\r\n * @return {boolean} Equivalent.\r\n * @api\r\n */\r\nexport function equivalent(projection1, projection2) {\r\n  if (projection1 === projection2) {\r\n    return true;\r\n  }\r\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\r\n  if (projection1.getCode() === projection2.getCode()) {\r\n    return equalUnits;\r\n  }\r\n  const transformFunc = getTransformFromProjections(projection1, projection2);\r\n  return transformFunc === cloneTransform && equalUnits;\r\n}\r\n\r\n/**\r\n * Searches in the list of transform functions for the function for converting\r\n * coordinates from the source projection to the destination projection.\r\n *\r\n * @param {Projection} sourceProjection Source Projection object.\r\n * @param {Projection} destinationProjection Destination Projection\r\n *     object.\r\n * @return {TransformFunction} Transform function.\r\n */\r\nexport function getTransformFromProjections(\r\n  sourceProjection,\r\n  destinationProjection,\r\n) {\r\n  const sourceCode = sourceProjection.getCode();\r\n  const destinationCode = destinationProjection.getCode();\r\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\r\n  if (!transformFunc) {\r\n    transformFunc = identityTransform;\r\n  }\r\n  return transformFunc;\r\n}\r\n\r\n/**\r\n * Given the projection-like objects, searches for a transformation\r\n * function to convert a coordinates array from the source projection to the\r\n * destination projection.\r\n *\r\n * @param {ProjectionLike} source Source.\r\n * @param {ProjectionLike} destination Destination.\r\n * @return {TransformFunction} Transform function.\r\n * @api\r\n */\r\nexport function getTransform(source, destination) {\r\n  const sourceProjection = get(source);\r\n  const destinationProjection = get(destination);\r\n  return getTransformFromProjections(sourceProjection, destinationProjection);\r\n}\r\n\r\n/**\r\n * Transforms a coordinate from source projection to destination projection.\r\n * This returns a new coordinate (and does not modify the original).\r\n *\r\n * See {@link module:ol/proj.transformExtent} for extent transformation.\r\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\r\n * subclasses for geometry transforms.\r\n *\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {ProjectionLike} source Source projection-like.\r\n * @param {ProjectionLike} destination Destination projection-like.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n * @api\r\n */\r\nexport function transform(coordinate, source, destination) {\r\n  const transformFunc = getTransform(source, destination);\r\n  return transformFunc(coordinate, undefined, coordinate.length);\r\n}\r\n\r\n/**\r\n * Transforms an extent from source projection to destination projection.  This\r\n * returns a new extent (and does not modify the original).\r\n *\r\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\r\n * @param {ProjectionLike} source Source projection-like.\r\n * @param {ProjectionLike} destination Destination projection-like.\r\n * @param {number} [stops] Number of stops per side used for the transform.\r\n * By default only the corners are used.\r\n * @return {import(\"./extent.js\").Extent} The transformed extent.\r\n * @api\r\n */\r\nexport function transformExtent(extent, source, destination, stops) {\r\n  const transformFunc = getTransform(source, destination);\r\n  return applyTransform(extent, transformFunc, undefined, stops);\r\n}\r\n\r\n/**\r\n * Transforms the given point to the destination projection.\r\n *\r\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\r\n * @param {Projection} sourceProjection Source projection.\r\n * @param {Projection} destinationProjection Destination projection.\r\n * @return {import(\"./coordinate.js\").Coordinate} Point.\r\n */\r\nexport function transformWithProjections(\r\n  point,\r\n  sourceProjection,\r\n  destinationProjection,\r\n) {\r\n  const transformFunc = getTransformFromProjections(\r\n    sourceProjection,\r\n    destinationProjection,\r\n  );\r\n  return transformFunc(point);\r\n}\r\n\r\n/**\r\n * @type {Projection|null}\r\n */\r\nlet userProjection = null;\r\n\r\n/**\r\n * Set the projection for coordinates supplied from and returned by API methods.\r\n * This includes all API methods except for those interacting with tile grids,\r\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\r\n * @param {ProjectionLike} projection The user projection.\r\n * @api\r\n */\r\nexport function setUserProjection(projection) {\r\n  userProjection = get(projection);\r\n}\r\n\r\n/**\r\n * Clear the user projection if set.\r\n * @api\r\n */\r\nexport function clearUserProjection() {\r\n  userProjection = null;\r\n}\r\n\r\n/**\r\n * Get the projection for coordinates supplied from and returned by API methods.\r\n * @return {Projection|null} The user projection (or null if not set).\r\n * @api\r\n */\r\nexport function getUserProjection() {\r\n  return userProjection;\r\n}\r\n\r\n/**\r\n * Use geographic coordinates (WGS-84 datum) in API methods.\r\n * This includes all API methods except for those interacting with tile grids,\r\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\r\n * @api\r\n */\r\nexport function useGeographic() {\r\n  setUserProjection('EPSG:4326');\r\n}\r\n\r\n/**\r\n * Return a coordinate transformed into the user projection.  If no user projection\r\n * is set, the original coordinate is returned.\r\n * @param {Array<number>} coordinate Input coordinate.\r\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\r\n * @return {Array<number>} The input coordinate in the user projection.\r\n */\r\nexport function toUserCoordinate(coordinate, sourceProjection) {\r\n  if (!userProjection) {\r\n    return coordinate;\r\n  }\r\n  return transform(coordinate, sourceProjection, userProjection);\r\n}\r\n\r\n/**\r\n * Return a coordinate transformed from the user projection.  If no user projection\r\n * is set, the original coordinate is returned.\r\n * @param {Array<number>} coordinate Input coordinate.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {Array<number>} The input coordinate transformed.\r\n */\r\nexport function fromUserCoordinate(coordinate, destProjection) {\r\n  if (!userProjection) {\r\n    if (\r\n      showCoordinateWarning &&\r\n      !equals(coordinate, [0, 0]) &&\r\n      coordinate[0] >= -180 &&\r\n      coordinate[0] <= 180 &&\r\n      coordinate[1] >= -90 &&\r\n      coordinate[1] <= 90\r\n    ) {\r\n      showCoordinateWarning = false;\r\n      warn(\r\n        'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.',\r\n      );\r\n    }\r\n    return coordinate;\r\n  }\r\n  return transform(coordinate, userProjection, destProjection);\r\n}\r\n\r\n/**\r\n * Return an extent transformed into the user projection.  If no user projection\r\n * is set, the original extent is returned.\r\n * @param {import(\"./extent.js\").Extent} extent Input extent.\r\n * @param {ProjectionLike} sourceProjection The input extent projection.\r\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\r\n */\r\nexport function toUserExtent(extent, sourceProjection) {\r\n  if (!userProjection) {\r\n    return extent;\r\n  }\r\n  return transformExtent(extent, sourceProjection, userProjection);\r\n}\r\n\r\n/**\r\n * Return an extent transformed from the user projection.  If no user projection\r\n * is set, the original extent is returned.\r\n * @param {import(\"./extent.js\").Extent} extent Input extent.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\r\n */\r\nexport function fromUserExtent(extent, destProjection) {\r\n  if (!userProjection) {\r\n    return extent;\r\n  }\r\n  return transformExtent(extent, userProjection, destProjection);\r\n}\r\n\r\n/**\r\n * Return the resolution in user projection units per pixel. If no user projection\r\n * is set, or source or user projection are missing units, the original resolution\r\n * is returned.\r\n * @param {number} resolution Resolution in input projection units per pixel.\r\n * @param {ProjectionLike} sourceProjection The input projection.\r\n * @return {number} Resolution in user projection units per pixel.\r\n */\r\nexport function toUserResolution(resolution, sourceProjection) {\r\n  if (!userProjection) {\r\n    return resolution;\r\n  }\r\n  const sourceMetersPerUnit = get(sourceProjection).getMetersPerUnit();\r\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\r\n  return sourceMetersPerUnit && userMetersPerUnit\r\n    ? (resolution * sourceMetersPerUnit) / userMetersPerUnit\r\n    : resolution;\r\n}\r\n\r\n/**\r\n * Return the resolution in user projection units per pixel. If no user projection\r\n * is set, or source or user projection are missing units, the original resolution\r\n * is returned.\r\n * @param {number} resolution Resolution in user projection units per pixel.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {number} Resolution in destination projection units per pixel.\r\n */\r\nexport function fromUserResolution(resolution, destProjection) {\r\n  if (!userProjection) {\r\n    return resolution;\r\n  }\r\n  const destMetersPerUnit = get(destProjection).getMetersPerUnit();\r\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\r\n  return destMetersPerUnit && userMetersPerUnit\r\n    ? (resolution * userMetersPerUnit) / destMetersPerUnit\r\n    : resolution;\r\n}\r\n\r\n/**\r\n * Creates a safe coordinate transform function from a coordinate transform function.\r\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\r\n * and that coordinates exceeding the source projection validity extent's range will be\r\n * clamped to the validity range.\r\n * @param {Projection} sourceProj Source projection.\r\n * @param {Projection} destProj Destination projection.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destination).\r\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destination).\r\n */\r\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\r\n  return function (coord) {\r\n    let transformed, worldsAway;\r\n    if (sourceProj.canWrapX()) {\r\n      const sourceExtent = sourceProj.getExtent();\r\n      const sourceExtentWidth = getWidth(sourceExtent);\r\n      coord = coord.slice(0);\r\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\r\n      if (worldsAway) {\r\n        // Move x to the real world\r\n        coord[0] = coord[0] - worldsAway * sourceExtentWidth;\r\n      }\r\n      coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\r\n      coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\r\n      transformed = transform(coord);\r\n    } else {\r\n      transformed = transform(coord);\r\n    }\r\n    if (worldsAway && destProj.canWrapX()) {\r\n      // Move transformed coordinate back to the offset world\r\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\r\n    }\r\n    return transformed;\r\n  };\r\n}\r\n\r\n/**\r\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\r\n * by when this module is executed and should only need to be called again after\r\n * `clearAllProjections()` is called (e.g. in tests).\r\n */\r\nexport function addCommon() {\r\n  // Add transformations that don't alter coordinates to convert within set of\r\n  // projections with equal meaning.\r\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\r\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\r\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\r\n  // coordinates and back.\r\n  addEquivalentTransforms(\r\n    EPSG4326_PROJECTIONS,\r\n    EPSG3857_PROJECTIONS,\r\n    fromEPSG4326,\r\n    toEPSG4326,\r\n  );\r\n}\r\n\r\naddCommon();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}