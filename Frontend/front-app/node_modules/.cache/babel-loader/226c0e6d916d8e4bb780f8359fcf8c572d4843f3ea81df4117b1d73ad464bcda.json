{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @module ol/structs/PriorityQueue\r\n */\nimport { assert } from '../asserts.js';\nimport { clear } from '../obj.js';\n\n/**\r\n * @type {number}\r\n */\nexport const DROP = Infinity;\n\n/**\r\n * @classdesc\r\n * Priority queue.\r\n *\r\n * The implementation is inspired from the Closure Library's Heap class and\r\n * Python's heapq module.\r\n *\r\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\r\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\r\n *\r\n * @template T\r\n */\nclass PriorityQueue {\n  /**\r\n   * @param {function(T): number} priorityFunction Priority function.\r\n   * @param {function(T): string} keyFunction Key function.\r\n   */\n  constructor(priorityFunction, keyFunction) {\n    /**\r\n     * @type {function(T): number}\r\n     * @private\r\n     */\n    this.priorityFunction_ = priorityFunction;\n\n    /**\r\n     * @type {function(T): string}\r\n     * @private\r\n     */\n    this.keyFunction_ = keyFunction;\n\n    /**\r\n     * @type {Array<T>}\r\n     * @private\r\n     */\n    this.elements_ = [];\n\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\n    this.priorities_ = [];\n\n    /**\r\n     * @type {!Object<string, boolean>}\r\n     * @private\r\n     */\n    this.queuedElements_ = {};\n  }\n\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\n  clear() {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  }\n\n  /**\r\n   * Remove and return the highest-priority element. O(log N).\r\n   * @return {T} Element.\r\n   */\n  dequeue() {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[0];\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = /** @type {T} */elements.pop();\n      priorities[0] = /** @type {number} */priorities.pop();\n      this.siftUp_(0);\n    }\n    const elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  }\n\n  /**\r\n   * Enqueue an element. O(log N).\r\n   * @param {T} element Element.\r\n   * @return {boolean} The element was added to the queue.\r\n   */\n  enqueue(element) {\n    assert(!(this.keyFunction_(element) in this.queuedElements_), 'Tried to enqueue an `element` that was already added to the queue');\n    const priority = this.priorityFunction_(element);\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\r\n   * @return {number} Count.\r\n   */\n  getCount() {\n    return this.elements_.length;\n  }\n\n  /**\r\n   * Gets the index of the left child of the node at the given index.\r\n   * @param {number} index The index of the node to get the left child for.\r\n   * @return {number} The index of the left child.\r\n   * @private\r\n   */\n  getLeftChildIndex_(index) {\n    return index * 2 + 1;\n  }\n\n  /**\r\n   * Gets the index of the right child of the node at the given index.\r\n   * @param {number} index The index of the node to get the right child for.\r\n   * @return {number} The index of the right child.\r\n   * @private\r\n   */\n  getRightChildIndex_(index) {\n    return index * 2 + 2;\n  }\n\n  /**\r\n   * Gets the index of the parent of the node at the given index.\r\n   * @param {number} index The index of the node to get the parent for.\r\n   * @return {number} The index of the parent.\r\n   * @private\r\n   */\n  getParentIndex_(index) {\n    return index - 1 >> 1;\n  }\n\n  /**\r\n   * Make this a heap. O(N).\r\n   * @private\r\n   */\n  heapify_() {\n    let i;\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  }\n\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\n  isEmpty() {\n    return this.elements_.length === 0;\n  }\n\n  /**\r\n   * @param {string} key Key.\r\n   * @return {boolean} Is key queued.\r\n   */\n  isKeyQueued(key) {\n    return key in this.queuedElements_;\n  }\n\n  /**\r\n   * @param {T} element Element.\r\n   * @return {boolean} Is queued.\r\n   */\n  isQueued(element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  }\n\n  /**\r\n   * @param {number} index The index of the node to move down.\r\n   * @private\r\n   */\n  siftUp_(index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const count = elements.length;\n    const element = elements[index];\n    const priority = priorities[index];\n    const startIndex = index;\n    while (index < count >> 1) {\n      const lIndex = this.getLeftChildIndex_(index);\n      const rIndex = this.getRightChildIndex_(index);\n      const smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  }\n\n  /**\r\n   * @param {number} startIndex The index of the root.\r\n   * @param {number} index The index of the node to move up.\r\n   * @private\r\n   */\n  siftDown_(startIndex, index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[index];\n    const priority = priorities[index];\n    while (index > startIndex) {\n      const parentIndex = this.getParentIndex_(index);\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n  }\n\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\n  reprioritize() {\n    const priorityFunction = this.priorityFunction_;\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    let index = 0;\n    const n = elements.length;\n    let element, i, priority;\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  }\n}\nexport default PriorityQueue;","map":{"version":3,"names":["assert","clear","DROP","Infinity","PriorityQueue","constructor","priorityFunction","keyFunction","priorityFunction_","keyFunction_","elements_","priorities_","queuedElements_","length","dequeue","elements","priorities","element","pop","siftUp_","elementKey","enqueue","priority","push","siftDown_","getCount","getLeftChildIndex_","index","getRightChildIndex_","getParentIndex_","heapify_","i","isEmpty","isKeyQueued","key","isQueued","count","startIndex","lIndex","rIndex","smallerChildIndex","parentIndex","reprioritize","n"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/structs/PriorityQueue.js"],"sourcesContent":["/**\r\n * @module ol/structs/PriorityQueue\r\n */\r\nimport {assert} from '../asserts.js';\r\nimport {clear} from '../obj.js';\r\n\r\n/**\r\n * @type {number}\r\n */\r\nexport const DROP = Infinity;\r\n\r\n/**\r\n * @classdesc\r\n * Priority queue.\r\n *\r\n * The implementation is inspired from the Closure Library's Heap class and\r\n * Python's heapq module.\r\n *\r\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\r\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\r\n *\r\n * @template T\r\n */\r\nclass PriorityQueue {\r\n  /**\r\n   * @param {function(T): number} priorityFunction Priority function.\r\n   * @param {function(T): string} keyFunction Key function.\r\n   */\r\n  constructor(priorityFunction, keyFunction) {\r\n    /**\r\n     * @type {function(T): number}\r\n     * @private\r\n     */\r\n    this.priorityFunction_ = priorityFunction;\r\n\r\n    /**\r\n     * @type {function(T): string}\r\n     * @private\r\n     */\r\n    this.keyFunction_ = keyFunction;\r\n\r\n    /**\r\n     * @type {Array<T>}\r\n     * @private\r\n     */\r\n    this.elements_ = [];\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.priorities_ = [];\r\n\r\n    /**\r\n     * @type {!Object<string, boolean>}\r\n     * @private\r\n     */\r\n    this.queuedElements_ = {};\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  clear() {\r\n    this.elements_.length = 0;\r\n    this.priorities_.length = 0;\r\n    clear(this.queuedElements_);\r\n  }\r\n\r\n  /**\r\n   * Remove and return the highest-priority element. O(log N).\r\n   * @return {T} Element.\r\n   */\r\n  dequeue() {\r\n    const elements = this.elements_;\r\n    const priorities = this.priorities_;\r\n    const element = elements[0];\r\n    if (elements.length == 1) {\r\n      elements.length = 0;\r\n      priorities.length = 0;\r\n    } else {\r\n      elements[0] = /** @type {T} */ (elements.pop());\r\n      priorities[0] = /** @type {number} */ (priorities.pop());\r\n      this.siftUp_(0);\r\n    }\r\n    const elementKey = this.keyFunction_(element);\r\n    delete this.queuedElements_[elementKey];\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Enqueue an element. O(log N).\r\n   * @param {T} element Element.\r\n   * @return {boolean} The element was added to the queue.\r\n   */\r\n  enqueue(element) {\r\n    assert(\r\n      !(this.keyFunction_(element) in this.queuedElements_),\r\n      'Tried to enqueue an `element` that was already added to the queue',\r\n    );\r\n    const priority = this.priorityFunction_(element);\r\n    if (priority != DROP) {\r\n      this.elements_.push(element);\r\n      this.priorities_.push(priority);\r\n      this.queuedElements_[this.keyFunction_(element)] = true;\r\n      this.siftDown_(0, this.elements_.length - 1);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Count.\r\n   */\r\n  getCount() {\r\n    return this.elements_.length;\r\n  }\r\n\r\n  /**\r\n   * Gets the index of the left child of the node at the given index.\r\n   * @param {number} index The index of the node to get the left child for.\r\n   * @return {number} The index of the left child.\r\n   * @private\r\n   */\r\n  getLeftChildIndex_(index) {\r\n    return index * 2 + 1;\r\n  }\r\n\r\n  /**\r\n   * Gets the index of the right child of the node at the given index.\r\n   * @param {number} index The index of the node to get the right child for.\r\n   * @return {number} The index of the right child.\r\n   * @private\r\n   */\r\n  getRightChildIndex_(index) {\r\n    return index * 2 + 2;\r\n  }\r\n\r\n  /**\r\n   * Gets the index of the parent of the node at the given index.\r\n   * @param {number} index The index of the node to get the parent for.\r\n   * @return {number} The index of the parent.\r\n   * @private\r\n   */\r\n  getParentIndex_(index) {\r\n    return (index - 1) >> 1;\r\n  }\r\n\r\n  /**\r\n   * Make this a heap. O(N).\r\n   * @private\r\n   */\r\n  heapify_() {\r\n    let i;\r\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\r\n      this.siftUp_(i);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return this.elements_.length === 0;\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key.\r\n   * @return {boolean} Is key queued.\r\n   */\r\n  isKeyQueued(key) {\r\n    return key in this.queuedElements_;\r\n  }\r\n\r\n  /**\r\n   * @param {T} element Element.\r\n   * @return {boolean} Is queued.\r\n   */\r\n  isQueued(element) {\r\n    return this.isKeyQueued(this.keyFunction_(element));\r\n  }\r\n\r\n  /**\r\n   * @param {number} index The index of the node to move down.\r\n   * @private\r\n   */\r\n  siftUp_(index) {\r\n    const elements = this.elements_;\r\n    const priorities = this.priorities_;\r\n    const count = elements.length;\r\n    const element = elements[index];\r\n    const priority = priorities[index];\r\n    const startIndex = index;\r\n\r\n    while (index < count >> 1) {\r\n      const lIndex = this.getLeftChildIndex_(index);\r\n      const rIndex = this.getRightChildIndex_(index);\r\n\r\n      const smallerChildIndex =\r\n        rIndex < count && priorities[rIndex] < priorities[lIndex]\r\n          ? rIndex\r\n          : lIndex;\r\n\r\n      elements[index] = elements[smallerChildIndex];\r\n      priorities[index] = priorities[smallerChildIndex];\r\n      index = smallerChildIndex;\r\n    }\r\n\r\n    elements[index] = element;\r\n    priorities[index] = priority;\r\n    this.siftDown_(startIndex, index);\r\n  }\r\n\r\n  /**\r\n   * @param {number} startIndex The index of the root.\r\n   * @param {number} index The index of the node to move up.\r\n   * @private\r\n   */\r\n  siftDown_(startIndex, index) {\r\n    const elements = this.elements_;\r\n    const priorities = this.priorities_;\r\n    const element = elements[index];\r\n    const priority = priorities[index];\r\n\r\n    while (index > startIndex) {\r\n      const parentIndex = this.getParentIndex_(index);\r\n      if (priorities[parentIndex] > priority) {\r\n        elements[index] = elements[parentIndex];\r\n        priorities[index] = priorities[parentIndex];\r\n        index = parentIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    elements[index] = element;\r\n    priorities[index] = priority;\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  reprioritize() {\r\n    const priorityFunction = this.priorityFunction_;\r\n    const elements = this.elements_;\r\n    const priorities = this.priorities_;\r\n    let index = 0;\r\n    const n = elements.length;\r\n    let element, i, priority;\r\n    for (i = 0; i < n; ++i) {\r\n      element = elements[i];\r\n      priority = priorityFunction(element);\r\n      if (priority == DROP) {\r\n        delete this.queuedElements_[this.keyFunction_(element)];\r\n      } else {\r\n        priorities[index] = priority;\r\n        elements[index++] = element;\r\n      }\r\n    }\r\n    elements.length = index;\r\n    priorities.length = index;\r\n    this.heapify_();\r\n  }\r\n}\r\n\r\nexport default PriorityQueue;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}