{"ast":null,"code":"/**\r\n * @module color-parse\r\n */\nimport names from 'color-name';\nexport default parse;\n\n/**\r\n * Base hues\r\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\r\n */\n//FIXME: use external hue detector\nvar baseHues = {\n  red: 0,\n  orange: 60,\n  yellow: 120,\n  green: 180,\n  blue: 240,\n  purple: 300\n};\n\n/**\r\n * Parse color from the string passed\r\n *\r\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\r\n */\nfunction parse(cstr) {\n  var m,\n    parts = [],\n    alpha = 1,\n    space;\n\n  //numeric case\n  if (typeof cstr === 'number') {\n    return {\n      space: 'rgb',\n      values: [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff],\n      alpha: 1\n    };\n  }\n  if (typeof cstr === 'number') return {\n    space: 'rgb',\n    values: [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff],\n    alpha: 1\n  };\n  cstr = String(cstr).toLowerCase();\n\n  //keyword\n  if (names[cstr]) {\n    parts = names[cstr].slice();\n    space = 'rgb';\n  }\n\n  //reserved words\n  else if (cstr === 'transparent') {\n    alpha = 0;\n    space = 'rgb';\n    parts = [0, 0, 0];\n  }\n\n  //hex\n  else if (cstr[0] === '#') {\n    var base = cstr.slice(1);\n    var size = base.length;\n    var isShort = size <= 4;\n    alpha = 1;\n    if (isShort) {\n      parts = [parseInt(base[0] + base[0], 16), parseInt(base[1] + base[1], 16), parseInt(base[2] + base[2], 16)];\n      if (size === 4) {\n        alpha = parseInt(base[3] + base[3], 16) / 255;\n      }\n    } else {\n      parts = [parseInt(base[0] + base[1], 16), parseInt(base[2] + base[3], 16), parseInt(base[4] + base[5], 16)];\n      if (size === 8) {\n        alpha = parseInt(base[6] + base[7], 16) / 255;\n      }\n    }\n    if (!parts[0]) parts[0] = 0;\n    if (!parts[1]) parts[1] = 0;\n    if (!parts[2]) parts[2] = 0;\n    space = 'rgb';\n  }\n\n  // color space\n  else if (m = /^((?:rgba?|hs[lvb]a?|hwba?|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms|oklch|oklab|color))\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\n    var name = m[1];\n    space = name.replace(/a$/, '');\n    var dims = space === 'cmyk' ? 4 : space === 'gray' ? 1 : 3;\n    parts = m[2].trim().split(/\\s*[,\\/]\\s*|\\s+/);\n\n    // color(srgb-linear x x x) -> srgb-linear(x x x)\n    if (space === 'color') space = parts.shift();\n    parts = parts.map(function (x, i) {\n      //<percentage>\n      if (x[x.length - 1] === '%') {\n        x = parseFloat(x) / 100;\n        // alpha -> 0..1\n        if (i === 3) return x;\n        // rgb -> 0..255\n        if (space === 'rgb') return x * 255;\n        // hsl, hwb H -> 0..100\n        if (space[0] === 'h') return x * 100;\n        // lch, lab L -> 0..100\n        if (space[0] === 'l' && !i) return x * 100;\n        // lab A B -> -125..125\n        if (space === 'lab') return x * 125;\n        // lch C -> 0..150, H -> 0..360\n        if (space === 'lch') return i < 2 ? x * 150 : x * 360;\n        // oklch/oklab L -> 0..1\n        if (space[0] === 'o' && !i) return x;\n        // oklab A B -> -0.4..0.4\n        if (space === 'oklab') return x * 0.4;\n        // oklch C -> 0..0.4, H -> 0..360\n        if (space === 'oklch') return i < 2 ? x * 0.4 : x * 360;\n        // color(xxx) -> 0..1\n        return x;\n      }\n\n      //hue\n      if (space[i] === 'h' || i === 2 && space[space.length - 1] === 'h') {\n        //<base-hue>\n        if (baseHues[x] !== undefined) return baseHues[x];\n        //<deg>\n        if (x.endsWith('deg')) return parseFloat(x);\n        //<turn>\n        if (x.endsWith('turn')) return parseFloat(x) * 360;\n        if (x.endsWith('grad')) return parseFloat(x) * 360 / 400;\n        if (x.endsWith('rad')) return parseFloat(x) * 180 / Math.PI;\n      }\n      if (x === 'none') return 0;\n      return parseFloat(x);\n    });\n    alpha = parts.length > dims ? parts.pop() : 1;\n  }\n\n  //named channels case\n  else if (/[0-9](?:\\s|\\/|,)/.test(cstr)) {\n    parts = cstr.match(/([0-9]+)/g).map(function (value) {\n      return parseFloat(value);\n    });\n    space = cstr.match(/([a-z])/ig)?.join('')?.toLowerCase() || 'rgb';\n  }\n  return {\n    space,\n    values: parts,\n    alpha\n  };\n}","map":{"version":3,"names":["names","parse","baseHues","red","orange","yellow","green","blue","purple","cstr","m","parts","alpha","space","values","String","toLowerCase","slice","base","size","length","isShort","parseInt","exec","name","replace","dims","trim","split","shift","map","x","i","parseFloat","undefined","endsWith","Math","PI","pop","test","match","value","join"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/color-parse/index.js"],"sourcesContent":["/**\r\n * @module color-parse\r\n */\r\nimport names from 'color-name'\r\n\r\nexport default parse\r\n\r\n/**\r\n * Base hues\r\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\r\n */\r\n//FIXME: use external hue detector\r\nvar baseHues = {\r\n\tred: 0,\r\n\torange: 60,\r\n\tyellow: 120,\r\n\tgreen: 180,\r\n\tblue: 240,\r\n\tpurple: 300\r\n}\r\n\r\n/**\r\n * Parse color from the string passed\r\n *\r\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\r\n */\r\nfunction parse(cstr) {\r\n\tvar m, parts = [], alpha = 1, space\r\n\r\n\t//numeric case\r\n\tif (typeof cstr === 'number') {\r\n\t\treturn { space: 'rgb', values: [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff], alpha: 1 }\r\n\t}\r\n\tif (typeof cstr === 'number') return { space: 'rgb', values: [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff], alpha: 1 }\r\n\r\n\tcstr = String(cstr).toLowerCase();\r\n\r\n\t//keyword\r\n\tif (names[cstr]) {\r\n\t\tparts = names[cstr].slice()\r\n\t\tspace = 'rgb'\r\n\t}\r\n\r\n\t//reserved words\r\n\telse if (cstr === 'transparent') {\r\n\t\talpha = 0\r\n\t\tspace = 'rgb'\r\n\t\tparts = [0, 0, 0]\r\n\t}\r\n\r\n\t//hex\r\n\telse if (cstr[0] === '#') {\r\n\t\tvar base = cstr.slice(1)\r\n\t\tvar size = base.length\r\n\t\tvar isShort = size <= 4\r\n\t\talpha = 1\r\n\r\n\t\tif (isShort) {\r\n\t\t\tparts = [\r\n\t\t\t\tparseInt(base[0] + base[0], 16),\r\n\t\t\t\tparseInt(base[1] + base[1], 16),\r\n\t\t\t\tparseInt(base[2] + base[2], 16)\r\n\t\t\t]\r\n\t\t\tif (size === 4) {\r\n\t\t\t\talpha = parseInt(base[3] + base[3], 16) / 255\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tparts = [\r\n\t\t\t\tparseInt(base[0] + base[1], 16),\r\n\t\t\t\tparseInt(base[2] + base[3], 16),\r\n\t\t\t\tparseInt(base[4] + base[5], 16)\r\n\t\t\t]\r\n\t\t\tif (size === 8) {\r\n\t\t\t\talpha = parseInt(base[6] + base[7], 16) / 255\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!parts[0]) parts[0] = 0\r\n\t\tif (!parts[1]) parts[1] = 0\r\n\t\tif (!parts[2]) parts[2] = 0\r\n\r\n\t\tspace = 'rgb'\r\n\t}\r\n\r\n\t// color space\r\n\telse if (m = /^((?:rgba?|hs[lvb]a?|hwba?|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms|oklch|oklab|color))\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\r\n\t\tvar name = m[1]\r\n\t\tspace = name.replace(/a$/, '')\r\n\t\tvar dims = space === 'cmyk' ? 4 : space === 'gray' ? 1 : 3\r\n\t\tparts = m[2].trim().split(/\\s*[,\\/]\\s*|\\s+/)\r\n\r\n\t\t// color(srgb-linear x x x) -> srgb-linear(x x x)\r\n\t\tif (space === 'color') space = parts.shift()\r\n\r\n\t\tparts = parts.map(function (x, i) {\r\n\t\t\t//<percentage>\r\n\t\t\tif (x[x.length - 1] === '%') {\r\n\t\t\t\tx = parseFloat(x) / 100\r\n\t\t\t\t// alpha -> 0..1\r\n\t\t\t\tif (i === 3) return x\r\n\t\t\t\t// rgb -> 0..255\r\n\t\t\t\tif (space === 'rgb') return x * 255\r\n\t\t\t\t// hsl, hwb H -> 0..100\r\n\t\t\t\tif (space[0] === 'h') return x * 100\r\n\t\t\t\t// lch, lab L -> 0..100\r\n\t\t\t\tif (space[0] === 'l' && !i) return x * 100\r\n\t\t\t\t// lab A B -> -125..125\r\n\t\t\t\tif (space === 'lab') return x * 125\r\n\t\t\t\t// lch C -> 0..150, H -> 0..360\r\n\t\t\t\tif (space === 'lch') return i < 2 ? x * 150 : x * 360\r\n\t\t\t\t// oklch/oklab L -> 0..1\r\n\t\t\t\tif (space[0] === 'o' && !i) return x\r\n\t\t\t\t// oklab A B -> -0.4..0.4\r\n\t\t\t\tif (space === 'oklab') return x * 0.4\r\n\t\t\t\t// oklch C -> 0..0.4, H -> 0..360\r\n\t\t\t\tif (space === 'oklch') return i < 2 ? x * 0.4 : x * 360\r\n\t\t\t\t// color(xxx) -> 0..1\r\n\t\t\t\treturn x\r\n\t\t\t}\r\n\r\n\t\t\t//hue\r\n\t\t\tif (space[i] === 'h' || (i === 2 && space[space.length - 1] === 'h')) {\r\n\t\t\t\t//<base-hue>\r\n\t\t\t\tif (baseHues[x] !== undefined) return baseHues[x]\r\n\t\t\t\t//<deg>\r\n\t\t\t\tif (x.endsWith('deg')) return parseFloat(x)\r\n\t\t\t\t//<turn>\r\n\t\t\t\tif (x.endsWith('turn')) return parseFloat(x) * 360\r\n\t\t\t\tif (x.endsWith('grad')) return parseFloat(x) * 360 / 400\r\n\t\t\t\tif (x.endsWith('rad')) return parseFloat(x) * 180 / Math.PI\r\n\t\t\t}\r\n\t\t\tif (x === 'none') return 0\r\n\t\t\treturn parseFloat(x)\r\n\t\t});\r\n\r\n\t\talpha = parts.length > dims ? parts.pop() : 1\r\n\t}\r\n\r\n\t//named channels case\r\n\telse if (/[0-9](?:\\s|\\/|,)/.test(cstr)) {\r\n\t\tparts = cstr.match(/([0-9]+)/g).map(function (value) {\r\n\t\t\treturn parseFloat(value)\r\n\t\t})\r\n\r\n\t\tspace = cstr.match(/([a-z])/ig)?.join('')?.toLowerCase() || 'rgb'\r\n\t}\r\n\r\n\treturn {\r\n\t\tspace,\r\n\t\tvalues: parts,\r\n\t\talpha\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}