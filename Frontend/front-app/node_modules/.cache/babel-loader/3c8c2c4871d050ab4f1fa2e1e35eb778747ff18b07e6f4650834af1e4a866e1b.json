{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { useStore } from 'vuex';\nimport { useRoute } from 'vue-router';\nexport default {\n  __name: 'ManagerComments',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const route = useRoute();\n    const comments = ref([]);\n    const factoryId = ref(parseInt(route.params.factoryId, 10)); // Ensure factoryId is a number\n\n    const token = store.state.token; // Get token from the store\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const userId = payload.userId;\n    onMounted(() => {\n      if (!factoryId.value) {\n        console.log('Factory ID is missing in route, fetching from backend');\n        loadFactory();\n      } else {\n        loadComments();\n      }\n    });\n    function loadFactory() {\n      axios.get(`http://localhost:3001/api/factories/manager/${userId}`).then(response => {\n        factoryId.value = response.data.id;\n        console.log(`Factory ID set to: ${factoryId.value}`); // Dodao log za proveru factoryId\n        loadComments();\n      }).catch(error => {\n        console.error('There was an error fetching the factory ID!', error);\n      });\n    }\n    function loadComments() {\n      console.log(`Factory ID set to: ${factoryId.value}`); // Dodao log za proveru factoryId\n\n      axios.get(`http://localhost:3001/api/comments/factory/${factoryId.value}/all`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }).then(response => {\n        console.log('Comments fetched from API:', response.data); // Dodao log za proveru povratnih komentara\n        comments.value = response.data.map(comment => ({\n          ...comment,\n          newStatus: comment.status\n        }));\n      }).catch(error => {\n        console.error('Error fetching comments:', error);\n      });\n    }\n    function updateCommentStatus(comment) {\n      axios.post('http://localhost:3001/api/comments/update-status', {\n        commentId: comment.id,\n        status: comment.newStatus\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }).then(response => {\n        console.log('Comment status updated:', response.data);\n        loadComments();\n      }).catch(error => {\n        console.error('Error updating comment status:', error);\n      });\n    }\n    const __returned__ = {\n      store,\n      route,\n      comments,\n      factoryId,\n      token,\n      payload,\n      userId,\n      loadFactory,\n      loadComments,\n      updateCommentStatus,\n      ref,\n      onMounted,\n      get axios() {\n        return axios;\n      },\n      get useStore() {\n        return useStore;\n      },\n      get useRoute() {\n        return useRoute;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","useStore","useRoute","store","route","comments","factoryId","parseInt","params","token","state","payload","JSON","parse","atob","split","userId","value","console","log","loadFactory","loadComments","get","then","response","data","id","catch","error","headers","map","comment","newStatus","status","updateCommentStatus","post","commentId"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/src/components/ManagerComments.vue"],"sourcesContent":["<template>\r\n  <div class=\"manager-comments\">\r\n    <h1>Manage Comments</h1>\r\n    <div v-if=\"comments.length\">\r\n      <div v-for=\"comment in comments\" :key=\"comment.id\" class=\"comment-item\">\r\n        <p><strong>Comment ID:</strong> {{ comment.id }}</p>\r\n        <p><strong>User:</strong> {{ comment.user.username }}</p>\r\n        <p><strong>Text:</strong> {{ comment.text }}</p>\r\n        <p><strong>Rating:</strong> {{ comment.rating }}</p>\r\n        <p><strong>Status:</strong> {{ comment.status }}</p>\r\n        <div>\r\n          <label for=\"status\">Update Status:</label>\r\n          <select v-model=\"comment.newStatus\">\r\n            <option value=\"approved\">Approved</option>\r\n            <option value=\"rejected\">Rejected</option>\r\n          </select>\r\n          <button @click=\"updateCommentStatus(comment)\">Update</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <p v-else>No comments found.</p>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport { useStore } from 'vuex';\r\nimport { useRoute } from 'vue-router';\r\n\r\nconst store = useStore();\r\nconst route = useRoute();\r\nconst comments = ref([]);\r\nconst factoryId = ref(parseInt(route.params.factoryId, 10)); // Ensure factoryId is a number\r\n\r\nconst token = store.state.token; // Get token from the store\r\nconst payload = JSON.parse(atob(token.split('.')[1]));\r\nconst userId = payload.userId;\r\n\r\nonMounted(() => {\r\n  if (!factoryId.value) {\r\n    console.log('Factory ID is missing in route, fetching from backend');\r\n    loadFactory();\r\n  } else {\r\n    loadComments();\r\n  }\r\n});\r\n\r\nfunction loadFactory() {\r\n  axios.get(`http://localhost:3001/api/factories/manager/${userId}`)\r\n    .then(response => {\r\n      factoryId.value = response.data.id;\r\n      console.log(`Factory ID set to: ${factoryId.value}`); // Dodao log za proveru factoryId\r\n      loadComments();\r\n    })\r\n    .catch(error => {\r\n      console.error('There was an error fetching the factory ID!', error);\r\n    });\r\n}\r\n\r\nfunction loadComments() {\r\n  console.log(`Factory ID set to: ${factoryId.value}`); // Dodao log za proveru factoryId\r\n\r\n  axios.get(`http://localhost:3001/api/comments/factory/${factoryId.value}/all`, {\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`\r\n    }\r\n  })\r\n    .then(response => {\r\n      console.log('Comments fetched from API:', response.data); // Dodao log za proveru povratnih komentara\r\n      comments.value = response.data.map(comment => ({\r\n        ...comment,\r\n        newStatus: comment.status\r\n      }));\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching comments:', error);\r\n    });\r\n}\r\n\r\nfunction updateCommentStatus(comment) {\r\n  axios.post('http://localhost:3001/api/comments/update-status', {\r\n    commentId: comment.id,\r\n    status: comment.newStatus\r\n  }, {\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`\r\n    }\r\n  })\r\n    .then(response => {\r\n      console.log('Comment status updated:', response.data);\r\n      loadComments();\r\n    })\r\n    .catch(error => {\r\n      console.error('Error updating comment status:', error);\r\n    });\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.manager-comments {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  background-color: #f5f5f5;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.comment-item {\r\n  margin: 20px 0;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background-color: #fff;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}