{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\n// src/store/index.js\n\nimport { createStore } from 'vuex';\nconst store = createStore({\n  state: {\n    token: null,\n    factories: []\n  },\n  mutations: {\n    setToken(state, token) {\n      state.token = token;\n    },\n    clearToken(state) {\n      state.token = null;\n    }\n  },\n  actions: {\n    login({\n      commit\n    }, token) {\n      commit('setToken', token);\n    },\n    logout({\n      commit\n    }) {\n      commit('clearToken');\n    }\n  },\n  getters: {\n    isAuthenticated(state) {\n      return !!state.token;\n    },\n    isManager(state) {\n      if (state.token) {\n        const payload = JSON.parse(atob(state.token.split('.')[1]));\n        return payload.role === \"Manager\";\n      }\n    },\n    isAdministrator(state) {\n      if (state.token) {\n        const payload = JSON.parse(atob(state.token.split('.')[1]));\n        return payload.role === \"Administrator\";\n      }\n    },\n    userRole(state) {\n      if (state.token) {\n        const payload = JSON.parse(atob(state.token.split('.')[1]));\n        return payload.role;\n      }\n      return null;\n    },\n    userId(state) {\n      if (state.token) {\n        const payload = JSON.parse(atob(state.token.split('.')[1]));\n        return payload.userId;\n      }\n      return null;\n    },\n    userFactoryId(state) {\n      if (state.token) {\n        const payload = JSON.parse(atob(state.token.split('.')[1]));\n        return payload.factoryId; // Ensure this is correctly set in your token payload\n      }\n      return null;\n    },\n    getFactoryById: state => id => {\n      return state.factories.find(factory => factory.id === id);\n    }\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","store","state","token","factories","mutations","setToken","clearToken","actions","login","commit","logout","getters","isAuthenticated","isManager","payload","JSON","parse","atob","split","role","isAdministrator","userRole","userId","userFactoryId","factoryId","getFactoryById","id","find","factory"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/src/store/index.js"],"sourcesContent":["// src/store/index.js\r\n\r\nimport { createStore } from 'vuex';\r\n\r\nconst store = createStore({\r\n  state: {\r\n    token: null,\r\n    factories: []\r\n  },\r\n  mutations: {\r\n    setToken(state, token) {\r\n      state.token = token;\r\n    },\r\n    clearToken(state) {\r\n      state.token = null;\r\n    }\r\n  },\r\n  actions: {\r\n    login({ commit }, token) {\r\n      commit('setToken', token);\r\n    },\r\n    logout({ commit }) {\r\n      commit('clearToken');\r\n    }\r\n  },\r\n  getters: {\r\n    isAuthenticated(state) {\r\n      return !!state.token;\r\n    },\r\n    isManager(state){\r\n        if (state.token) {\r\n            const payload = JSON.parse(atob(state.token.split('.')[1]));\r\n            return payload.role === \"Manager\";\r\n            }\r\n    },\r\n    isAdministrator(state){\r\n        if (state.token) {\r\n            const payload = JSON.parse(atob(state.token.split('.')[1]));\r\n            return payload.role === \"Administrator\";\r\n        }\r\n    },\r\n    userRole(state) {\r\n      if (state.token) {\r\n        const payload = JSON.parse(atob(state.token.split('.')[1]));\r\n        return payload.role;\r\n      }\r\n      return null;\r\n    },\r\n    userId(state) {\r\n      if (state.token) {\r\n        const payload = JSON.parse(atob(state.token.split('.')[1]));\r\n        return payload.userId;\r\n      }\r\n      return null;\r\n    },\r\n    userFactoryId(state) {\r\n      if (state.token) {\r\n        const payload = JSON.parse(atob(state.token.split('.')[1]));\r\n        return payload.factoryId; // Ensure this is correctly set in your token payload\r\n      }\r\n      return null;\r\n    },\r\n    getFactoryById: (state) => (id) => {\r\n\r\n      return state.factories.find(factory => factory.id === id);\r\n    }\r\n  }\r\n});\r\n\r\nexport default store;\r\n"],"mappings":";AAAA;;AAEA,SAASA,WAAW,QAAQ,MAAM;AAElC,MAAMC,KAAK,GAAGD,WAAW,CAAC;EACxBE,KAAK,EAAE;IACLC,KAAK,EAAE,IAAI;IACXC,SAAS,EAAE;EACb,CAAC;EACDC,SAAS,EAAE;IACTC,QAAQA,CAACJ,KAAK,EAAEC,KAAK,EAAE;MACrBD,KAAK,CAACC,KAAK,GAAGA,KAAK;IACrB,CAAC;IACDI,UAAUA,CAACL,KAAK,EAAE;MAChBA,KAAK,CAACC,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACDK,OAAO,EAAE;IACPC,KAAKA,CAAC;MAAEC;IAAO,CAAC,EAAEP,KAAK,EAAE;MACvBO,MAAM,CAAC,UAAU,EAAEP,KAAK,CAAC;IAC3B,CAAC;IACDQ,MAAMA,CAAC;MAAED;IAAO,CAAC,EAAE;MACjBA,MAAM,CAAC,YAAY,CAAC;IACtB;EACF,CAAC;EACDE,OAAO,EAAE;IACPC,eAAeA,CAACX,KAAK,EAAE;MACrB,OAAO,CAAC,CAACA,KAAK,CAACC,KAAK;IACtB,CAAC;IACDW,SAASA,CAACZ,KAAK,EAAC;MACZ,IAAIA,KAAK,CAACC,KAAK,EAAE;QACb,MAAMY,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAChB,KAAK,CAACC,KAAK,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,OAAOJ,OAAO,CAACK,IAAI,KAAK,SAAS;MACjC;IACR,CAAC;IACDC,eAAeA,CAACnB,KAAK,EAAC;MAClB,IAAIA,KAAK,CAACC,KAAK,EAAE;QACb,MAAMY,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAChB,KAAK,CAACC,KAAK,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,OAAOJ,OAAO,CAACK,IAAI,KAAK,eAAe;MAC3C;IACJ,CAAC;IACDE,QAAQA,CAACpB,KAAK,EAAE;MACd,IAAIA,KAAK,CAACC,KAAK,EAAE;QACf,MAAMY,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAChB,KAAK,CAACC,KAAK,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,OAAOJ,OAAO,CAACK,IAAI;MACrB;MACA,OAAO,IAAI;IACb,CAAC;IACDG,MAAMA,CAACrB,KAAK,EAAE;MACZ,IAAIA,KAAK,CAACC,KAAK,EAAE;QACf,MAAMY,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAChB,KAAK,CAACC,KAAK,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,OAAOJ,OAAO,CAACQ,MAAM;MACvB;MACA,OAAO,IAAI;IACb,CAAC;IACDC,aAAaA,CAACtB,KAAK,EAAE;MACnB,IAAIA,KAAK,CAACC,KAAK,EAAE;QACf,MAAMY,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAChB,KAAK,CAACC,KAAK,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,OAAOJ,OAAO,CAACU,SAAS,CAAC,CAAC;MAC5B;MACA,OAAO,IAAI;IACb,CAAC;IACDC,cAAc,EAAGxB,KAAK,IAAMyB,EAAE,IAAK;MAEjC,OAAOzB,KAAK,CAACE,SAAS,CAACwB,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACF,EAAE,KAAKA,EAAE,CAAC;IAC3D;EACF;AACF,CAAC,CAAC;AAEF,eAAe1B,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}