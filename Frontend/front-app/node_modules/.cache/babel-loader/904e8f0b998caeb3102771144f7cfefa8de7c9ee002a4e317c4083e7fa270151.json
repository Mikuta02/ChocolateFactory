{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/** @module  color-rgba */\nimport parse from 'color-parse';\nimport rgb from 'color-space/rgb.js';\nimport hsl from 'color-space/hsl.js';\nexport default function rgba(color) {\n  // template literals\n  if (Array.isArray(color) && color.raw) color = String.raw(...arguments);\n  if (color instanceof Number) color = +color;\n  var values, i, l;\n\n  //attempt to parse non-array arguments\n  var parsed = parse(color);\n  if (!parsed.space) return [];\n  const min = parsed.space[0] === 'h' ? hsl.min : rgb.min;\n  const max = parsed.space[0] === 'h' ? hsl.max : rgb.max;\n  values = Array(3);\n  values[0] = Math.min(Math.max(parsed.values[0], min[0]), max[0]);\n  values[1] = Math.min(Math.max(parsed.values[1], min[1]), max[1]);\n  values[2] = Math.min(Math.max(parsed.values[2], min[2]), max[2]);\n  if (parsed.space[0] === 'h') {\n    values = hsl.rgb(values);\n  }\n  values.push(Math.min(Math.max(parsed.alpha, 0), 1));\n  return values;\n}","map":{"version":3,"names":["parse","rgb","hsl","rgba","color","Array","isArray","raw","String","arguments","Number","values","i","l","parsed","space","min","max","Math","push","alpha"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/color-rgba/index.js"],"sourcesContent":["/** @module  color-rgba */\r\nimport parse from 'color-parse'\r\nimport rgb from 'color-space/rgb.js'\r\nimport hsl from 'color-space/hsl.js'\r\n\r\nexport default function rgba(color) {\r\n\t// template literals\r\n\tif (Array.isArray(color) && color.raw) color = String.raw(...arguments)\r\n\tif (color instanceof Number) color = +color\r\n\r\n\tvar values, i, l\r\n\r\n\t//attempt to parse non-array arguments\r\n\tvar parsed = parse(color)\r\n\r\n\tif (!parsed.space) return []\r\n\r\n\tconst min = parsed.space[0] === 'h' ? hsl.min : rgb.min\r\n\tconst max = parsed.space[0] === 'h' ? hsl.max : rgb.max\r\n\r\n\tvalues = Array(3)\r\n\tvalues[0] = Math.min(Math.max(parsed.values[0], min[0]), max[0])\r\n\tvalues[1] = Math.min(Math.max(parsed.values[1], min[1]), max[1])\r\n\tvalues[2] = Math.min(Math.max(parsed.values[2], min[2]), max[2])\r\n\r\n\tif (parsed.space[0] === 'h') {\r\n\t\tvalues = hsl.rgb(values)\r\n\t}\r\n\r\n\tvalues.push(Math.min(Math.max(parsed.alpha, 0), 1))\r\n\r\n\treturn values\r\n}\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,aAAa;AAC/B,OAAOC,GAAG,MAAM,oBAAoB;AACpC,OAAOC,GAAG,MAAM,oBAAoB;AAEpC,eAAe,SAASC,IAAIA,CAACC,KAAK,EAAE;EACnC;EACA,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACG,GAAG,EAAEH,KAAK,GAAGI,MAAM,CAACD,GAAG,CAAC,GAAGE,SAAS,CAAC;EACvE,IAAIL,KAAK,YAAYM,MAAM,EAAEN,KAAK,GAAG,CAACA,KAAK;EAE3C,IAAIO,MAAM,EAAEC,CAAC,EAAEC,CAAC;;EAEhB;EACA,IAAIC,MAAM,GAAGd,KAAK,CAACI,KAAK,CAAC;EAEzB,IAAI,CAACU,MAAM,CAACC,KAAK,EAAE,OAAO,EAAE;EAE5B,MAAMC,GAAG,GAAGF,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGb,GAAG,CAACc,GAAG,GAAGf,GAAG,CAACe,GAAG;EACvD,MAAMC,GAAG,GAAGH,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGb,GAAG,CAACe,GAAG,GAAGhB,GAAG,CAACgB,GAAG;EAEvDN,MAAM,GAAGN,KAAK,CAAC,CAAC,CAAC;EACjBM,MAAM,CAAC,CAAC,CAAC,GAAGO,IAAI,CAACF,GAAG,CAACE,IAAI,CAACD,GAAG,CAACH,MAAM,CAACH,MAAM,CAAC,CAAC,CAAC,EAAEK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAEC,GAAG,CAAC,CAAC,CAAC,CAAC;EAChEN,MAAM,CAAC,CAAC,CAAC,GAAGO,IAAI,CAACF,GAAG,CAACE,IAAI,CAACD,GAAG,CAACH,MAAM,CAACH,MAAM,CAAC,CAAC,CAAC,EAAEK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAEC,GAAG,CAAC,CAAC,CAAC,CAAC;EAChEN,MAAM,CAAC,CAAC,CAAC,GAAGO,IAAI,CAACF,GAAG,CAACE,IAAI,CAACD,GAAG,CAACH,MAAM,CAACH,MAAM,CAAC,CAAC,CAAC,EAAEK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAEC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEhE,IAAIH,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC5BJ,MAAM,GAAGT,GAAG,CAACD,GAAG,CAACU,MAAM,CAAC;EACzB;EAEAA,MAAM,CAACQ,IAAI,CAACD,IAAI,CAACF,GAAG,CAACE,IAAI,CAACD,GAAG,CAACH,MAAM,CAACM,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAEnD,OAAOT,MAAM;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}