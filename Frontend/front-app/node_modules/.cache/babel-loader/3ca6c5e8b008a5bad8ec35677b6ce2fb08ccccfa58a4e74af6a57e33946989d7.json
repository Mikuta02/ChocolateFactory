{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @module ol/tileurlfunction\r\n */\nimport { modulo } from './math.js';\nimport { hash as tileCoordHash } from './tilecoord.js';\n\n/**\r\n * @param {string} template Template.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\nexport function createFromTemplate(template, tileGrid) {\n  const zRegEx = /\\{z\\}/g;\n  const xRegEx = /\\{x\\}/g;\n  const yRegEx = /\\{y\\}/g;\n  const dashYRegEx = /\\{-y\\}/g;\n  return (\n    /**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      return template.replace(zRegEx, tileCoord[0].toString()).replace(xRegEx, tileCoord[1].toString()).replace(yRegEx, tileCoord[2].toString()).replace(dashYRegEx, function () {\n        const z = tileCoord[0];\n        const range = tileGrid.getFullTileRange(z);\n        if (!range) {\n          throw new Error('The {-y} placeholder requires a tile grid with extent');\n        }\n        const y = range.getHeight() - tileCoord[2] - 1;\n        return y.toString();\n      });\n    }\n  );\n}\n\n/**\r\n * @param {Array<string>} templates Templates.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\nexport function createFromTemplates(templates, tileGrid) {\n  const len = templates.length;\n  const tileUrlFunctions = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\n  }\n  return createFromTileUrlFunctions(tileUrlFunctions);\n}\n\n/**\r\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\n  if (tileUrlFunctions.length === 1) {\n    return tileUrlFunctions[0];\n  }\n  return (\n    /**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      const h = tileCoordHash(tileCoord);\n      const index = modulo(h, tileUrlFunctions.length);\n      return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n    }\n  );\n}\n\n/**\r\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {string|undefined} Tile URL.\r\n */\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\n  return undefined;\n}\n\n/**\r\n * @param {string} url URL.\r\n * @return {Array<string>} Array of urls.\r\n */\nexport function expandUrl(url) {\n  const urls = [];\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n  if (match) {\n    // char range\n    const startCharCode = match[1].charCodeAt(0);\n    const stopCharCode = match[2].charCodeAt(0);\n    let charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n    return urls;\n  }\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n  if (match) {\n    // number range\n    const stop = parseInt(match[2], 10);\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n    return urls;\n  }\n  urls.push(url);\n  return urls;\n}","map":{"version":3,"names":["modulo","hash","tileCoordHash","createFromTemplate","template","tileGrid","zRegEx","xRegEx","yRegEx","dashYRegEx","tileCoord","pixelRatio","projection","undefined","replace","toString","z","range","getFullTileRange","Error","y","getHeight","createFromTemplates","templates","len","length","tileUrlFunctions","Array","i","createFromTileUrlFunctions","h","index","nullTileUrlFunction","expandUrl","url","urls","match","exec","startCharCode","charCodeAt","stopCharCode","charCode","push","String","fromCharCode","stop","parseInt"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/tileurlfunction.js"],"sourcesContent":["/**\r\n * @module ol/tileurlfunction\r\n */\r\nimport {modulo} from './math.js';\r\nimport {hash as tileCoordHash} from './tilecoord.js';\r\n\r\n/**\r\n * @param {string} template Template.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\r\nexport function createFromTemplate(template, tileGrid) {\r\n  const zRegEx = /\\{z\\}/g;\r\n  const xRegEx = /\\{x\\}/g;\r\n  const yRegEx = /\\{y\\}/g;\r\n  const dashYRegEx = /\\{-y\\}/g;\r\n  return (\r\n    /**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */\r\n    function (tileCoord, pixelRatio, projection) {\r\n      if (!tileCoord) {\r\n        return undefined;\r\n      }\r\n      return template\r\n        .replace(zRegEx, tileCoord[0].toString())\r\n        .replace(xRegEx, tileCoord[1].toString())\r\n        .replace(yRegEx, tileCoord[2].toString())\r\n        .replace(dashYRegEx, function () {\r\n          const z = tileCoord[0];\r\n          const range = tileGrid.getFullTileRange(z);\r\n          if (!range) {\r\n            throw new Error(\r\n              'The {-y} placeholder requires a tile grid with extent',\r\n            );\r\n          }\r\n          const y = range.getHeight() - tileCoord[2] - 1;\r\n          return y.toString();\r\n        });\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Array<string>} templates Templates.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\r\nexport function createFromTemplates(templates, tileGrid) {\r\n  const len = templates.length;\r\n  const tileUrlFunctions = new Array(len);\r\n  for (let i = 0; i < len; ++i) {\r\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\r\n  }\r\n  return createFromTileUrlFunctions(tileUrlFunctions);\r\n}\r\n\r\n/**\r\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\r\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\r\n  if (tileUrlFunctions.length === 1) {\r\n    return tileUrlFunctions[0];\r\n  }\r\n  return (\r\n    /**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */\r\n    function (tileCoord, pixelRatio, projection) {\r\n      if (!tileCoord) {\r\n        return undefined;\r\n      }\r\n      const h = tileCoordHash(tileCoord);\r\n      const index = modulo(h, tileUrlFunctions.length);\r\n      return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {string|undefined} Tile URL.\r\n */\r\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {string} url URL.\r\n * @return {Array<string>} Array of urls.\r\n */\r\nexport function expandUrl(url) {\r\n  const urls = [];\r\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\r\n  if (match) {\r\n    // char range\r\n    const startCharCode = match[1].charCodeAt(0);\r\n    const stopCharCode = match[2].charCodeAt(0);\r\n    let charCode;\r\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\r\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\r\n    }\r\n    return urls;\r\n  }\r\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\r\n  if (match) {\r\n    // number range\r\n    const stop = parseInt(match[2], 10);\r\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\r\n      urls.push(url.replace(match[0], i.toString()));\r\n    }\r\n    return urls;\r\n  }\r\n  urls.push(url);\r\n  return urls;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}