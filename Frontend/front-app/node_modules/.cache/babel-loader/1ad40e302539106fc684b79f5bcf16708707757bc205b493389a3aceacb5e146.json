{"ast":null,"code":"/**\r\n * @module ol/render/Feature\r\n */\nimport Feature from '../Feature.js';\nimport { LineString, MultiLineString, MultiPoint, MultiPolygon, Point, Polygon } from '../geom.js';\nimport { compose as composeTransform, create as createTransform } from '../transform.js';\nimport { createOrUpdateFromCoordinate, createOrUpdateFromFlatCoordinates, getCenter, getHeight } from '../extent.js';\nimport { douglasPeucker, douglasPeuckerArray, quantizeArray } from '../geom/flat/simplify.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointOfArray, getInteriorPointsOfMultiArray } from '../geom/flat/interiorpoint.js';\nimport { get as getProjection } from '../proj.js';\nimport { inflateEnds } from '../geom/flat/orient.js';\nimport { interpolatePoint } from '../geom/flat/interpolate.js';\nimport { linearRingss as linearRingssCenter } from '../geom/flat/center.js';\nimport { memoizeOne } from '../functions.js';\nimport { transform2D } from '../geom/flat/transform.js';\n\n/**\r\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString'} Type\r\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\r\n * `'Polygon'`, `'MultiPoint'` or 'MultiLineString'`.\r\n */\n\n/**\r\n * @type {import(\"../transform.js\").Transform}\r\n */\nconst tmpTransform = createTransform();\n\n/**\r\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\r\n * structure, optimized for vector tile rendering and styling. Geometry access\r\n * through the API is limited to getting the type and extent of the geometry.\r\n */\nclass RenderFeature {\n  /**\r\n   * @param {Type} type Geometry type.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates. These always need\r\n   *     to be right-handed for polygons.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @param {Object<string, *>} properties Properties.\r\n   * @param {number|string|undefined} id Feature id.\r\n   */\n  constructor(type, flatCoordinates, ends, stride, properties, id) {\n    /**\r\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\r\n     */\n    this.styleFunction;\n\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent|undefined}\r\n     */\n    this.extent_;\n\n    /**\r\n     * @private\r\n     * @type {number|string|undefined}\r\n     */\n    this.id_ = id;\n\n    /**\r\n     * @private\r\n     * @type {Type}\r\n     */\n    this.type_ = type;\n\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\n    this.flatCoordinates_ = flatCoordinates;\n\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\n    this.flatInteriorPoints_ = null;\n\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\n    this.flatMidpoints_ = null;\n\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\n    this.ends_ = ends || null;\n\n    /**\r\n     * @private\r\n     * @type {Object<string, *>}\r\n     */\n    this.properties_ = properties;\n\n    /**\r\n     * @type {number}\r\n     */\n    this.squaredTolerance_;\n\n    /**\r\n     * @type {number}\r\n     */\n    this.stride_ = stride;\n\n    /**\r\n     * @private\r\n     * @type {RenderFeature}\r\n     */\n    this.simplifiedGeometry_;\n  }\n\n  /**\r\n   * Get a feature property by its key.\r\n   * @param {string} key Key\r\n   * @return {*} Value for the requested key.\r\n   * @api\r\n   */\n  get(key) {\n    return this.properties_[key];\n  }\n\n  /**\r\n   * Get the extent of this feature's geometry.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\n  getExtent() {\n    if (!this.extent_) {\n      this.extent_ = this.type_ === 'Point' ? createOrUpdateFromCoordinate(this.flatCoordinates_) : createOrUpdateFromFlatCoordinates(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);\n    }\n    return this.extent_;\n  }\n\n  /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */\n  getFlatInteriorPoint() {\n    if (!this.flatInteriorPoints_) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoints_ = getInteriorPointOfArray(this.flatCoordinates_, 0, this.ends_, 2, flatCenter, 0);\n    }\n    return this.flatInteriorPoints_;\n  }\n\n  /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */\n  getFlatInteriorPoints() {\n    if (!this.flatInteriorPoints_) {\n      const ends = inflateEnds(this.flatCoordinates_, this.ends_);\n      const flatCenters = linearRingssCenter(this.flatCoordinates_, 0, ends, 2);\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.flatCoordinates_, 0, ends, 2, flatCenters);\n    }\n    return this.flatInteriorPoints_;\n  }\n\n  /**\r\n   * @return {Array<number>} Flat midpoint.\r\n   */\n  getFlatMidpoint() {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = interpolatePoint(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);\n    }\n    return this.flatMidpoints_;\n  }\n\n  /**\r\n   * @return {Array<number>} Flat midpoints.\r\n   */\n  getFlatMidpoints() {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = [];\n      const flatCoordinates = this.flatCoordinates_;\n      let offset = 0;\n      const ends = /** @type {Array<number>} */this.ends_;\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        const end = ends[i];\n        const midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);\n        extend(this.flatMidpoints_, midpoint);\n        offset = end;\n      }\n    }\n    return this.flatMidpoints_;\n  }\n\n  /**\r\n   * Get the feature identifier.  This is a stable identifier for the feature and\r\n   * is set when reading data from a remote source.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */\n  getId() {\n    return this.id_;\n  }\n\n  /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\n  getOrientedFlatCoordinates() {\n    return this.flatCoordinates_;\n  }\n\n  /**\r\n   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\r\n   * determining the geometry type in style function (see {@link #getType}).\r\n   * @return {RenderFeature} Feature.\r\n   * @api\r\n   */\n  getGeometry() {\n    return this;\n  }\n\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {RenderFeature} Simplified geometry.\r\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return this;\n  }\n\n  /**\r\n   * Get a transformed and simplified version of the geometry.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n   * @return {RenderFeature} Simplified geometry.\r\n   */\n  simplifyTransformed(squaredTolerance, transform) {\n    return this;\n  }\n\n  /**\r\n   * Get the feature properties.\r\n   * @return {Object<string, *>} Feature properties.\r\n   * @api\r\n   */\n  getProperties() {\n    return this.properties_;\n  }\n\n  /**\r\n   * Get an object of all property names and values.  This has the same behavior as getProperties,\r\n   * but is here to conform with the {@link module:ol/Feature~Feature} interface.\r\n   * @return {Object<string, *>?} Object.\r\n   */\n  getPropertiesInternal() {\n    return this.properties_;\n  }\n\n  /**\r\n   * @return {number} Stride.\r\n   */\n  getStride() {\n    return this.stride_;\n  }\n\n  /**\r\n   * @return {import('../style/Style.js').StyleFunction|undefined} Style\r\n   */\n  getStyleFunction() {\n    return this.styleFunction;\n  }\n\n  /**\r\n   * Get the type of this feature's geometry.\r\n   * @return {Type} Geometry type.\r\n   * @api\r\n   */\n  getType() {\n    return this.type_;\n  }\n\n  /**\r\n   * Transform geometry coordinates from tile pixel space to projected.\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection The data projection\r\n   */\n  transform(projection) {\n    projection = getProjection(projection);\n    const pixelExtent = projection.getExtent();\n    const projectedExtent = projection.getWorldExtent();\n    if (pixelExtent && projectedExtent) {\n      const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n      composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n      transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform, this.flatCoordinates_);\n    }\n  }\n\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   */\n  applyTransform(transformFn) {\n    transformFn(this.flatCoordinates_, this.flatCoordinates_, this.stride_);\n  }\n\n  /**\r\n   * @return {RenderFeature} A cloned render feature.\r\n   */\n  clone() {\n    return new RenderFeature(this.type_, this.flatCoordinates_.slice(), this.ends_?.slice(), this.stride_, Object.assign({}, this.properties_), this.id_);\n  }\n\n  /**\r\n   * @return {Array<number>|null} Ends.\r\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\r\n   * Add transform and resolution based geometry simplification to this instance.\r\n   * @return {RenderFeature} This render feature.\r\n   */\n  enableSimplifyTransformed() {\n    this.simplifyTransformed = memoizeOne((squaredTolerance, transform) => {\n      if (squaredTolerance === this.squaredTolerance_) {\n        return this.simplifiedGeometry_;\n      }\n      this.simplifiedGeometry_ = this.clone();\n      if (transform) {\n        this.simplifiedGeometry_.applyTransform(transform);\n      }\n      const simplifiedFlatCoordinates = this.simplifiedGeometry_.getFlatCoordinates();\n      let simplifiedEnds;\n      switch (this.type_) {\n        case 'LineString':\n          simplifiedFlatCoordinates.length = douglasPeucker(simplifiedFlatCoordinates, 0, this.simplifiedGeometry_.flatCoordinates_.length, this.simplifiedGeometry_.stride_, squaredTolerance, simplifiedFlatCoordinates, 0);\n          simplifiedEnds = [simplifiedFlatCoordinates.length];\n          break;\n        case 'MultiLineString':\n          simplifiedEnds = [];\n          simplifiedFlatCoordinates.length = douglasPeuckerArray(simplifiedFlatCoordinates, 0, this.simplifiedGeometry_.ends_, this.simplifiedGeometry_.stride_, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n          break;\n        case 'Polygon':\n          simplifiedEnds = [];\n          simplifiedFlatCoordinates.length = quantizeArray(simplifiedFlatCoordinates, 0, this.simplifiedGeometry_.ends_, this.simplifiedGeometry_.stride_, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n          break;\n        default:\n      }\n      if (simplifiedEnds) {\n        this.simplifiedGeometry_ = new RenderFeature(this.type_, simplifiedFlatCoordinates, simplifiedEnds, 2, this.properties_, this.id_);\n      }\n      this.squaredTolerance_ = squaredTolerance;\n      return this.simplifiedGeometry_;\n    });\n    return this;\n  }\n}\n\n/**\r\n * @return {Array<number>} Flat coordinates.\r\n */\nRenderFeature.prototype.getFlatCoordinates = RenderFeature.prototype.getOrientedFlatCoordinates;\n\n/**\r\n * Create a geometry from an `ol/render/Feature`\r\n * @param {RenderFeature} renderFeature\r\n * Render Feature\r\n * @return {Point|MultiPoint|LineString|MultiLineString|Polygon|MultiPolygon}\r\n * New geometry instance.\r\n * @api\r\n */\nexport function toGeometry(renderFeature) {\n  const geometryType = renderFeature.getType();\n  switch (geometryType) {\n    case 'Point':\n      return new Point(renderFeature.getFlatCoordinates());\n    case 'MultiPoint':\n      return new MultiPoint(renderFeature.getFlatCoordinates(), 'XY');\n    case 'LineString':\n      return new LineString(renderFeature.getFlatCoordinates(), 'XY');\n    case 'MultiLineString':\n      return new MultiLineString(renderFeature.getFlatCoordinates(), 'XY', /** @type {Array<number>} */renderFeature.getEnds());\n    case 'Polygon':\n      const flatCoordinates = renderFeature.getFlatCoordinates();\n      const ends = renderFeature.getEnds();\n      const endss = inflateEnds(flatCoordinates, ends);\n      return endss.length > 1 ? new MultiPolygon(flatCoordinates, 'XY', endss) : new Polygon(flatCoordinates, 'XY', ends);\n    default:\n      throw new Error('Invalid geometry type:' + geometryType);\n  }\n}\n\n/**\r\n * Create an `ol/Feature` from an `ol/render/Feature`\r\n * @param {RenderFeature} renderFeature RenderFeature\r\n * @param {string} [geometryName='geometry'] Geometry name to use\r\n * when creating the Feature.\r\n * @return {Feature} Newly constructed `ol/Feature` with properties,\r\n * geometry, and id copied over.\r\n * @api\r\n */\nexport function toFeature(renderFeature, geometryName) {\n  const id = renderFeature.getId();\n  const geometry = toGeometry(renderFeature);\n  const properties = renderFeature.getProperties();\n  const feature = new Feature();\n  if (geometryName !== undefined) {\n    feature.setGeometryName(geometryName);\n  }\n  feature.setGeometry(geometry);\n  if (id !== undefined) {\n    feature.setId(id);\n  }\n  feature.setProperties(properties, true);\n  return feature;\n}\nexport default RenderFeature;","map":{"version":3,"names":["Feature","LineString","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","compose","composeTransform","create","createTransform","createOrUpdateFromCoordinate","createOrUpdateFromFlatCoordinates","getCenter","getHeight","douglasPeucker","douglasPeuckerArray","quantizeArray","extend","getInteriorPointOfArray","getInteriorPointsOfMultiArray","get","getProjection","inflateEnds","interpolatePoint","linearRingss","linearRingssCenter","memoizeOne","transform2D","tmpTransform","RenderFeature","constructor","type","flatCoordinates","ends","stride","properties","id","styleFunction","extent_","id_","type_","flatCoordinates_","flatInteriorPoints_","flatMidpoints_","ends_","properties_","squaredTolerance_","stride_","simplifiedGeometry_","key","getExtent","length","getFlatInteriorPoint","flatCenter","getFlatInteriorPoints","flatCenters","getFlatMidpoint","getFlatMidpoints","offset","i","ii","end","midpoint","getId","getOrientedFlatCoordinates","getGeometry","getSimplifiedGeometry","squaredTolerance","simplifyTransformed","transform","getProperties","getPropertiesInternal","getStride","getStyleFunction","getType","projection","pixelExtent","projectedExtent","getWorldExtent","scale","applyTransform","transformFn","clone","slice","Object","assign","getEnds","enableSimplifyTransformed","simplifiedFlatCoordinates","getFlatCoordinates","simplifiedEnds","Math","sqrt","prototype","toGeometry","renderFeature","geometryType","endss","Error","toFeature","geometryName","geometry","feature","undefined","setGeometryName","setGeometry","setId","setProperties"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/render/Feature.js"],"sourcesContent":["/**\r\n * @module ol/render/Feature\r\n */\r\nimport Feature from '../Feature.js';\r\nimport {\r\n  LineString,\r\n  MultiLineString,\r\n  MultiPoint,\r\n  MultiPolygon,\r\n  Point,\r\n  Polygon,\r\n} from '../geom.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../transform.js';\r\nimport {\r\n  createOrUpdateFromCoordinate,\r\n  createOrUpdateFromFlatCoordinates,\r\n  getCenter,\r\n  getHeight,\r\n} from '../extent.js';\r\nimport {\r\n  douglasPeucker,\r\n  douglasPeuckerArray,\r\n  quantizeArray,\r\n} from '../geom/flat/simplify.js';\r\nimport {extend} from '../array.js';\r\nimport {\r\n  getInteriorPointOfArray,\r\n  getInteriorPointsOfMultiArray,\r\n} from '../geom/flat/interiorpoint.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {inflateEnds} from '../geom/flat/orient.js';\r\nimport {interpolatePoint} from '../geom/flat/interpolate.js';\r\nimport {linearRingss as linearRingssCenter} from '../geom/flat/center.js';\r\nimport {memoizeOne} from '../functions.js';\r\nimport {transform2D} from '../geom/flat/transform.js';\r\n\r\n/**\r\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString'} Type\r\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\r\n * `'Polygon'`, `'MultiPoint'` or 'MultiLineString'`.\r\n */\r\n\r\n/**\r\n * @type {import(\"../transform.js\").Transform}\r\n */\r\nconst tmpTransform = createTransform();\r\n\r\n/**\r\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\r\n * structure, optimized for vector tile rendering and styling. Geometry access\r\n * through the API is limited to getting the type and extent of the geometry.\r\n */\r\nclass RenderFeature {\r\n  /**\r\n   * @param {Type} type Geometry type.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates. These always need\r\n   *     to be right-handed for polygons.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @param {Object<string, *>} properties Properties.\r\n   * @param {number|string|undefined} id Feature id.\r\n   */\r\n  constructor(type, flatCoordinates, ends, stride, properties, id) {\r\n    /**\r\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\r\n     */\r\n    this.styleFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent|undefined}\r\n     */\r\n    this.extent_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|string|undefined}\r\n     */\r\n    this.id_ = id;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Type}\r\n     */\r\n    this.type_ = type;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatCoordinates_ = flatCoordinates;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatInteriorPoints_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatMidpoints_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.ends_ = ends || null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, *>}\r\n     */\r\n    this.properties_ = properties;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.squaredTolerance_;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.stride_ = stride;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFeature}\r\n     */\r\n    this.simplifiedGeometry_;\r\n  }\r\n\r\n  /**\r\n   * Get a feature property by its key.\r\n   * @param {string} key Key\r\n   * @return {*} Value for the requested key.\r\n   * @api\r\n   */\r\n  get(key) {\r\n    return this.properties_[key];\r\n  }\r\n\r\n  /**\r\n   * Get the extent of this feature's geometry.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent() {\r\n    if (!this.extent_) {\r\n      this.extent_ =\r\n        this.type_ === 'Point'\r\n          ? createOrUpdateFromCoordinate(this.flatCoordinates_)\r\n          : createOrUpdateFromFlatCoordinates(\r\n              this.flatCoordinates_,\r\n              0,\r\n              this.flatCoordinates_.length,\r\n              2,\r\n            );\r\n    }\r\n    return this.extent_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */\r\n  getFlatInteriorPoint() {\r\n    if (!this.flatInteriorPoints_) {\r\n      const flatCenter = getCenter(this.getExtent());\r\n      this.flatInteriorPoints_ = getInteriorPointOfArray(\r\n        this.flatCoordinates_,\r\n        0,\r\n        this.ends_,\r\n        2,\r\n        flatCenter,\r\n        0,\r\n      );\r\n    }\r\n    return this.flatInteriorPoints_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */\r\n  getFlatInteriorPoints() {\r\n    if (!this.flatInteriorPoints_) {\r\n      const ends = inflateEnds(this.flatCoordinates_, this.ends_);\r\n      const flatCenters = linearRingssCenter(this.flatCoordinates_, 0, ends, 2);\r\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\r\n        this.flatCoordinates_,\r\n        0,\r\n        ends,\r\n        2,\r\n        flatCenters,\r\n      );\r\n    }\r\n    return this.flatInteriorPoints_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat midpoint.\r\n   */\r\n  getFlatMidpoint() {\r\n    if (!this.flatMidpoints_) {\r\n      this.flatMidpoints_ = interpolatePoint(\r\n        this.flatCoordinates_,\r\n        0,\r\n        this.flatCoordinates_.length,\r\n        2,\r\n        0.5,\r\n      );\r\n    }\r\n    return this.flatMidpoints_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat midpoints.\r\n   */\r\n  getFlatMidpoints() {\r\n    if (!this.flatMidpoints_) {\r\n      this.flatMidpoints_ = [];\r\n      const flatCoordinates = this.flatCoordinates_;\r\n      let offset = 0;\r\n      const ends = /** @type {Array<number>} */ (this.ends_);\r\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n        const end = ends[i];\r\n        const midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);\r\n        extend(this.flatMidpoints_, midpoint);\r\n        offset = end;\r\n      }\r\n    }\r\n    return this.flatMidpoints_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature identifier.  This is a stable identifier for the feature and\r\n   * is set when reading data from a remote source.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */\r\n  getId() {\r\n    return this.id_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\r\n  getOrientedFlatCoordinates() {\r\n    return this.flatCoordinates_;\r\n  }\r\n\r\n  /**\r\n   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\r\n   * determining the geometry type in style function (see {@link #getType}).\r\n   * @return {RenderFeature} Feature.\r\n   * @api\r\n   */\r\n  getGeometry() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {RenderFeature} Simplified geometry.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get a transformed and simplified version of the geometry.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n   * @return {RenderFeature} Simplified geometry.\r\n   */\r\n  simplifyTransformed(squaredTolerance, transform) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the feature properties.\r\n   * @return {Object<string, *>} Feature properties.\r\n   * @api\r\n   */\r\n  getProperties() {\r\n    return this.properties_;\r\n  }\r\n\r\n  /**\r\n   * Get an object of all property names and values.  This has the same behavior as getProperties,\r\n   * but is here to conform with the {@link module:ol/Feature~Feature} interface.\r\n   * @return {Object<string, *>?} Object.\r\n   */\r\n  getPropertiesInternal() {\r\n    return this.properties_;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Stride.\r\n   */\r\n  getStride() {\r\n    return this.stride_;\r\n  }\r\n\r\n  /**\r\n   * @return {import('../style/Style.js').StyleFunction|undefined} Style\r\n   */\r\n  getStyleFunction() {\r\n    return this.styleFunction;\r\n  }\r\n\r\n  /**\r\n   * Get the type of this feature's geometry.\r\n   * @return {Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return this.type_;\r\n  }\r\n\r\n  /**\r\n   * Transform geometry coordinates from tile pixel space to projected.\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection The data projection\r\n   */\r\n  transform(projection) {\r\n    projection = getProjection(projection);\r\n    const pixelExtent = projection.getExtent();\r\n    const projectedExtent = projection.getWorldExtent();\r\n    if (pixelExtent && projectedExtent) {\r\n      const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\r\n      composeTransform(\r\n        tmpTransform,\r\n        projectedExtent[0],\r\n        projectedExtent[3],\r\n        scale,\r\n        -scale,\r\n        0,\r\n        0,\r\n        0,\r\n      );\r\n      transform2D(\r\n        this.flatCoordinates_,\r\n        0,\r\n        this.flatCoordinates_.length,\r\n        2,\r\n        tmpTransform,\r\n        this.flatCoordinates_,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   */\r\n  applyTransform(transformFn) {\r\n    transformFn(this.flatCoordinates_, this.flatCoordinates_, this.stride_);\r\n  }\r\n\r\n  /**\r\n   * @return {RenderFeature} A cloned render feature.\r\n   */\r\n  clone() {\r\n    return new RenderFeature(\r\n      this.type_,\r\n      this.flatCoordinates_.slice(),\r\n      this.ends_?.slice(),\r\n      this.stride_,\r\n      Object.assign({}, this.properties_),\r\n      this.id_,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>|null} Ends.\r\n   */\r\n  getEnds() {\r\n    return this.ends_;\r\n  }\r\n\r\n  /**\r\n   * Add transform and resolution based geometry simplification to this instance.\r\n   * @return {RenderFeature} This render feature.\r\n   */\r\n  enableSimplifyTransformed() {\r\n    this.simplifyTransformed = memoizeOne((squaredTolerance, transform) => {\r\n      if (squaredTolerance === this.squaredTolerance_) {\r\n        return this.simplifiedGeometry_;\r\n      }\r\n      this.simplifiedGeometry_ = this.clone();\r\n      if (transform) {\r\n        this.simplifiedGeometry_.applyTransform(transform);\r\n      }\r\n      const simplifiedFlatCoordinates =\r\n        this.simplifiedGeometry_.getFlatCoordinates();\r\n      let simplifiedEnds;\r\n      switch (this.type_) {\r\n        case 'LineString':\r\n          simplifiedFlatCoordinates.length = douglasPeucker(\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            this.simplifiedGeometry_.flatCoordinates_.length,\r\n            this.simplifiedGeometry_.stride_,\r\n            squaredTolerance,\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n          );\r\n          simplifiedEnds = [simplifiedFlatCoordinates.length];\r\n          break;\r\n        case 'MultiLineString':\r\n          simplifiedEnds = [];\r\n          simplifiedFlatCoordinates.length = douglasPeuckerArray(\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            this.simplifiedGeometry_.ends_,\r\n            this.simplifiedGeometry_.stride_,\r\n            squaredTolerance,\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            simplifiedEnds,\r\n          );\r\n          break;\r\n        case 'Polygon':\r\n          simplifiedEnds = [];\r\n          simplifiedFlatCoordinates.length = quantizeArray(\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            this.simplifiedGeometry_.ends_,\r\n            this.simplifiedGeometry_.stride_,\r\n            Math.sqrt(squaredTolerance),\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            simplifiedEnds,\r\n          );\r\n          break;\r\n        default:\r\n      }\r\n      if (simplifiedEnds) {\r\n        this.simplifiedGeometry_ = new RenderFeature(\r\n          this.type_,\r\n          simplifiedFlatCoordinates,\r\n          simplifiedEnds,\r\n          2,\r\n          this.properties_,\r\n          this.id_,\r\n        );\r\n      }\r\n      this.squaredTolerance_ = squaredTolerance;\r\n      return this.simplifiedGeometry_;\r\n    });\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nRenderFeature.prototype.getFlatCoordinates =\r\n  RenderFeature.prototype.getOrientedFlatCoordinates;\r\n\r\n/**\r\n * Create a geometry from an `ol/render/Feature`\r\n * @param {RenderFeature} renderFeature\r\n * Render Feature\r\n * @return {Point|MultiPoint|LineString|MultiLineString|Polygon|MultiPolygon}\r\n * New geometry instance.\r\n * @api\r\n */\r\nexport function toGeometry(renderFeature) {\r\n  const geometryType = renderFeature.getType();\r\n  switch (geometryType) {\r\n    case 'Point':\r\n      return new Point(renderFeature.getFlatCoordinates());\r\n    case 'MultiPoint':\r\n      return new MultiPoint(renderFeature.getFlatCoordinates(), 'XY');\r\n    case 'LineString':\r\n      return new LineString(renderFeature.getFlatCoordinates(), 'XY');\r\n    case 'MultiLineString':\r\n      return new MultiLineString(\r\n        renderFeature.getFlatCoordinates(),\r\n        'XY',\r\n        /** @type {Array<number>} */ (renderFeature.getEnds()),\r\n      );\r\n    case 'Polygon':\r\n      const flatCoordinates = renderFeature.getFlatCoordinates();\r\n      const ends = renderFeature.getEnds();\r\n      const endss = inflateEnds(flatCoordinates, ends);\r\n      return endss.length > 1\r\n        ? new MultiPolygon(flatCoordinates, 'XY', endss)\r\n        : new Polygon(flatCoordinates, 'XY', ends);\r\n    default:\r\n      throw new Error('Invalid geometry type:' + geometryType);\r\n  }\r\n}\r\n\r\n/**\r\n * Create an `ol/Feature` from an `ol/render/Feature`\r\n * @param {RenderFeature} renderFeature RenderFeature\r\n * @param {string} [geometryName='geometry'] Geometry name to use\r\n * when creating the Feature.\r\n * @return {Feature} Newly constructed `ol/Feature` with properties,\r\n * geometry, and id copied over.\r\n * @api\r\n */\r\nexport function toFeature(renderFeature, geometryName) {\r\n  const id = renderFeature.getId();\r\n  const geometry = toGeometry(renderFeature);\r\n  const properties = renderFeature.getProperties();\r\n  const feature = new Feature();\r\n  if (geometryName !== undefined) {\r\n    feature.setGeometryName(geometryName);\r\n  }\r\n  feature.setGeometry(geometry);\r\n  if (id !== undefined) {\r\n    feature.setId(id);\r\n  }\r\n  feature.setProperties(properties, true);\r\n  return feature;\r\n}\r\n\r\nexport default RenderFeature;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}