{"ast":null,"code":"/**\r\n * @module ol/interaction/KeyboardPan\r\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, { pan } from './Interaction.js';\nimport Key from '../events/Key.js';\nimport { noModifierKeys, targetNotEditable } from '../events/condition.js';\nimport { rotate as rotateCoordinate } from '../coordinate.js';\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled. Default is\r\n * {@link module:ol/events/condition.noModifierKeys} and\r\n * {@link module:ol/events/condition.targetNotEditable}.\r\n * @property {number} [duration=100] Animation duration in milliseconds.\r\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\r\n * press.\r\n */\n\n/**\r\n * @classdesc\r\n * Allows the user to pan the map using keyboard arrows.\r\n * Note that, although this interaction is by default included in maps,\r\n * the keys can only be used when browser focus is on the element to which\r\n * the keyboard events are attached. By default, this is the map div,\r\n * though you can change this with the `keyboardEventTarget` in\r\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\r\n * element, focus will have to be on, and returned to, this element if the keys\r\n * are to function.\r\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\r\n * @api\r\n */\nclass KeyboardPan extends Interaction {\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /**\r\n     * @private\r\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\r\n     * @return {boolean} Combined condition result.\r\n     */\n    this.defaultCondition_ = function (mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent);\n    };\n\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\n    this.condition_ = options.condition !== undefined ? options.condition : this.defaultCondition_;\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;\n  }\n\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\r\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\r\n   * pressed).\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (mapBrowserEvent.type == EventType.KEYDOWN) {\n      const keyEvent = /** @type {KeyboardEvent} */\n      mapBrowserEvent.originalEvent;\n      const key = keyEvent.key;\n      if (this.condition_(mapBrowserEvent) && (key == Key.DOWN || key == Key.LEFT || key == Key.RIGHT || key == Key.UP)) {\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n        let deltaX = 0,\n          deltaY = 0;\n        if (key == Key.DOWN) {\n          deltaY = -mapUnitsDelta;\n        } else if (key == Key.LEFT) {\n          deltaX = -mapUnitsDelta;\n        } else if (key == Key.RIGHT) {\n          deltaX = mapUnitsDelta;\n        } else {\n          deltaY = mapUnitsDelta;\n        }\n        const delta = [deltaX, deltaY];\n        rotateCoordinate(delta, view.getRotation());\n        pan(view, delta, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\nexport default KeyboardPan;","map":{"version":3,"names":["EventType","Interaction","pan","Key","noModifierKeys","targetNotEditable","rotate","rotateCoordinate","KeyboardPan","constructor","options","defaultCondition_","mapBrowserEvent","condition_","condition","undefined","duration_","duration","pixelDelta_","pixelDelta","handleEvent","stopEvent","type","KEYDOWN","keyEvent","originalEvent","key","DOWN","LEFT","RIGHT","UP","map","view","getView","mapUnitsDelta","getResolution","deltaX","deltaY","delta","getRotation","preventDefault"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/interaction/KeyboardPan.js"],"sourcesContent":["/**\r\n * @module ol/interaction/KeyboardPan\r\n */\r\nimport EventType from '../events/EventType.js';\r\nimport Interaction, {pan} from './Interaction.js';\r\nimport Key from '../events/Key.js';\r\nimport {noModifierKeys, targetNotEditable} from '../events/condition.js';\r\nimport {rotate as rotateCoordinate} from '../coordinate.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled. Default is\r\n * {@link module:ol/events/condition.noModifierKeys} and\r\n * {@link module:ol/events/condition.targetNotEditable}.\r\n * @property {number} [duration=100] Animation duration in milliseconds.\r\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\r\n * press.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to pan the map using keyboard arrows.\r\n * Note that, although this interaction is by default included in maps,\r\n * the keys can only be used when browser focus is on the element to which\r\n * the keyboard events are attached. By default, this is the map div,\r\n * though you can change this with the `keyboardEventTarget` in\r\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\r\n * element, focus will have to be on, and returned to, this element if the keys\r\n * are to function.\r\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\r\n * @api\r\n */\r\nclass KeyboardPan extends Interaction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\r\n     * @return {boolean} Combined condition result.\r\n     */\r\n    this.defaultCondition_ = function (mapBrowserEvent) {\r\n      return (\r\n        noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent)\r\n      );\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\r\n    this.condition_ =\r\n      options.condition !== undefined\r\n        ? options.condition\r\n        : this.defaultCondition_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelDelta_ =\r\n      options.pixelDelta !== undefined ? options.pixelDelta : 128;\r\n  }\r\n\r\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\r\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\r\n   * pressed).\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   */\r\n  handleEvent(mapBrowserEvent) {\r\n    let stopEvent = false;\r\n    if (mapBrowserEvent.type == EventType.KEYDOWN) {\r\n      const keyEvent = /** @type {KeyboardEvent} */ (\r\n        mapBrowserEvent.originalEvent\r\n      );\r\n      const key = keyEvent.key;\r\n      if (\r\n        this.condition_(mapBrowserEvent) &&\r\n        (key == Key.DOWN ||\r\n          key == Key.LEFT ||\r\n          key == Key.RIGHT ||\r\n          key == Key.UP)\r\n      ) {\r\n        const map = mapBrowserEvent.map;\r\n        const view = map.getView();\r\n        const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\r\n        let deltaX = 0,\r\n          deltaY = 0;\r\n        if (key == Key.DOWN) {\r\n          deltaY = -mapUnitsDelta;\r\n        } else if (key == Key.LEFT) {\r\n          deltaX = -mapUnitsDelta;\r\n        } else if (key == Key.RIGHT) {\r\n          deltaX = mapUnitsDelta;\r\n        } else {\r\n          deltaY = mapUnitsDelta;\r\n        }\r\n        const delta = [deltaX, deltaY];\r\n        rotateCoordinate(delta, view.getRotation());\r\n        pan(view, delta, this.duration_);\r\n        keyEvent.preventDefault();\r\n        stopEvent = true;\r\n      }\r\n    }\r\n    return !stopEvent;\r\n  }\r\n}\r\n\r\nexport default KeyboardPan;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}