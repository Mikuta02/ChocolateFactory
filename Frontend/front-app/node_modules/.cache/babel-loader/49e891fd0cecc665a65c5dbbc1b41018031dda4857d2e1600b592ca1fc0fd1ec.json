{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @module ol/render/canvas/hitdetect\r\n */\n\nimport CanvasImmediateRenderer from './Immediate.js';\nimport { Icon } from '../../style.js';\nimport { ascending } from '../../array.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { getTransformFromProjections, getUserProjection, toUserExtent } from '../../proj.js';\nimport { intersects } from '../../extent.js';\nexport const HIT_DETECT_RESOLUTION = 0.5;\n\n/**\r\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\r\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\r\n * for rendering features to all worlds of the viewport, from coordinates to css\r\n * pixels.\r\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\r\n * Features to consider for hit detection.\r\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\r\n * Layer style function.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent in render projection.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @param {number} [squaredTolerance] Squared tolerance.\r\n * @param {import(\"../../proj/Projection.js\").default} [projection] Render projection.\r\n * @return {ImageData} Hit detection image data.\r\n */\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation, squaredTolerance, projection) {\n  const userExtent = projection ? toUserExtent(extent, projection) : extent;\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation, squaredTolerance, projection ? getTransformFromProjections(getUserProjection(), projection) : null);\n  const featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!featureStyleFunction) {\n      continue;\n    }\n    let styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    const index = i * indexFactor;\n    const color = index.toString(16).padStart(7, '#00000');\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(userExtent, geometry.getExtent())) {\n        continue;\n      }\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      const stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n      if (image) {\n        const imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n        const imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, {\n          alpha: false\n        });\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(new Icon({\n          img: img,\n          anchor: image.getAnchor(),\n          anchorXUnits: 'pixels',\n          anchorYUnits: 'pixels',\n          offset: image.getOrigin(),\n          opacity: 1,\n          size: image.getSize(),\n          scale: image.getScale(),\n          rotation: image.getRotation(),\n          rotateWithView: image.getRotateWithView()\n        }));\n      }\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n      const type = geometry.getType();\n      if (type === 'GeometryCollection') {\n        const geometries = /** @type {import(\"../../geom/GeometryCollection.js\").default} */geometry.getGeometriesArrayRecursive();\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\n          const geometry = geometries[i];\n          byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n        }\n      } else {\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\n      }\n    }\n  }\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\r\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\r\n * detection canvas in css pixels.\r\n * @param {Array<F>} features Features. Has to\r\n * match the `features` array that was passed to `createHitDetectionImageData()`.\r\n * @param {ImageData} imageData Hit detection image data generated by\r\n * `createHitDetectionImageData()`.\r\n * @return {Array<F>} Features.\r\n * @template {import(\"../../Feature.js\").FeatureLike} F\r\n */\nexport function hitDetect(pixel, features, imageData) {\n  /** @type {Array<F>} */\n  const resultFeatures = [];\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    const index = (clamp(x, 0, imageData.width - 1) + clamp(y, 0, imageData.height - 1) * imageData.width) * 4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  return resultFeatures;\n}","map":{"version":3,"names":["CanvasImmediateRenderer","Icon","ascending","clamp","createCanvasContext2D","getTransformFromProjections","getUserProjection","toUserExtent","intersects","HIT_DETECT_RESOLUTION","createHitDetectionImageData","size","transforms","features","styleFunction","extent","resolution","rotation","squaredTolerance","projection","userExtent","width","height","context","imageSmoothingEnabled","canvas","renderer","featureCount","length","indexFactor","Math","floor","featuresByZIndex","i","feature","featureStyleFunction","getStyleFunction","styles","Array","isArray","index","color","toString","padStart","j","jj","originalStyle","geometry","getGeometryFunction","getExtent","style","clone","fill","getFill","setColor","stroke","getStroke","setLineDash","setText","undefined","image","getImage","imgSize","getImageSize","imgContext","alpha","img","fillStyle","fillRect","setImage","anchor","getAnchor","anchorXUnits","anchorYUnits","offset","getOrigin","opacity","getSize","scale","getScale","getRotation","rotateWithView","getRotateWithView","zIndex","getZIndex","byGeometryType","type","getType","geometries","getGeometriesArrayRecursive","ii","replace","push","zIndexKeys","Object","keys","map","Number","sort","geomAndStyle","setStyle","k","kk","setTransform","drawGeometry","getImageData","hitDetect","pixel","imageData","resultFeatures","x","round","y","r","data","g","b"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/render/canvas/hitdetect.js"],"sourcesContent":["/**\r\n * @module ol/render/canvas/hitdetect\r\n */\r\n\r\nimport CanvasImmediateRenderer from './Immediate.js';\r\nimport {Icon} from '../../style.js';\r\nimport {ascending} from '../../array.js';\r\nimport {clamp} from '../../math.js';\r\nimport {createCanvasContext2D} from '../../dom.js';\r\nimport {\r\n  getTransformFromProjections,\r\n  getUserProjection,\r\n  toUserExtent,\r\n} from '../../proj.js';\r\nimport {intersects} from '../../extent.js';\r\n\r\nexport const HIT_DETECT_RESOLUTION = 0.5;\r\n\r\n/**\r\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\r\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\r\n * for rendering features to all worlds of the viewport, from coordinates to css\r\n * pixels.\r\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\r\n * Features to consider for hit detection.\r\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\r\n * Layer style function.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent in render projection.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @param {number} [squaredTolerance] Squared tolerance.\r\n * @param {import(\"../../proj/Projection.js\").default} [projection] Render projection.\r\n * @return {ImageData} Hit detection image data.\r\n */\r\nexport function createHitDetectionImageData(\r\n  size,\r\n  transforms,\r\n  features,\r\n  styleFunction,\r\n  extent,\r\n  resolution,\r\n  rotation,\r\n  squaredTolerance,\r\n  projection,\r\n) {\r\n  const userExtent = projection ? toUserExtent(extent, projection) : extent;\r\n  const width = size[0] * HIT_DETECT_RESOLUTION;\r\n  const height = size[1] * HIT_DETECT_RESOLUTION;\r\n  const context = createCanvasContext2D(width, height);\r\n  context.imageSmoothingEnabled = false;\r\n  const canvas = context.canvas;\r\n  const renderer = new CanvasImmediateRenderer(\r\n    context,\r\n    HIT_DETECT_RESOLUTION,\r\n    extent,\r\n    null,\r\n    rotation,\r\n    squaredTolerance,\r\n    projection\r\n      ? getTransformFromProjections(getUserProjection(), projection)\r\n      : null,\r\n  );\r\n  const featureCount = features.length;\r\n  // Stretch hit detection index to use the whole available color range\r\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\r\n  const featuresByZIndex = {};\r\n  for (let i = 1; i <= featureCount; ++i) {\r\n    const feature = features[i - 1];\r\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\r\n    if (!featureStyleFunction) {\r\n      continue;\r\n    }\r\n    let styles = featureStyleFunction(feature, resolution);\r\n    if (!styles) {\r\n      continue;\r\n    }\r\n    if (!Array.isArray(styles)) {\r\n      styles = [styles];\r\n    }\r\n    const index = i * indexFactor;\r\n    const color = index.toString(16).padStart(7, '#00000');\r\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\r\n      const originalStyle = styles[j];\r\n      const geometry = originalStyle.getGeometryFunction()(feature);\r\n      if (!geometry || !intersects(userExtent, geometry.getExtent())) {\r\n        continue;\r\n      }\r\n      const style = originalStyle.clone();\r\n      const fill = style.getFill();\r\n      if (fill) {\r\n        fill.setColor(color);\r\n      }\r\n      const stroke = style.getStroke();\r\n      if (stroke) {\r\n        stroke.setColor(color);\r\n        stroke.setLineDash(null);\r\n      }\r\n      style.setText(undefined);\r\n      const image = originalStyle.getImage();\r\n      if (image) {\r\n        const imgSize = image.getImageSize();\r\n        if (!imgSize) {\r\n          continue;\r\n        }\r\n\r\n        const imgContext = createCanvasContext2D(\r\n          imgSize[0],\r\n          imgSize[1],\r\n          undefined,\r\n          {alpha: false},\r\n        );\r\n        const img = imgContext.canvas;\r\n        imgContext.fillStyle = color;\r\n        imgContext.fillRect(0, 0, img.width, img.height);\r\n        style.setImage(\r\n          new Icon({\r\n            img: img,\r\n            anchor: image.getAnchor(),\r\n            anchorXUnits: 'pixels',\r\n            anchorYUnits: 'pixels',\r\n            offset: image.getOrigin(),\r\n            opacity: 1,\r\n            size: image.getSize(),\r\n            scale: image.getScale(),\r\n            rotation: image.getRotation(),\r\n            rotateWithView: image.getRotateWithView(),\r\n          }),\r\n        );\r\n      }\r\n      const zIndex = style.getZIndex() || 0;\r\n      let byGeometryType = featuresByZIndex[zIndex];\r\n      if (!byGeometryType) {\r\n        byGeometryType = {};\r\n        featuresByZIndex[zIndex] = byGeometryType;\r\n        byGeometryType['Polygon'] = [];\r\n        byGeometryType['Circle'] = [];\r\n        byGeometryType['LineString'] = [];\r\n        byGeometryType['Point'] = [];\r\n      }\r\n      const type = geometry.getType();\r\n      if (type === 'GeometryCollection') {\r\n        const geometries =\r\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\r\n            geometry\r\n          ).getGeometriesArrayRecursive();\r\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n          const geometry = geometries[i];\r\n          byGeometryType[geometry.getType().replace('Multi', '')].push(\r\n            geometry,\r\n            style,\r\n          );\r\n        }\r\n      } else {\r\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\r\n      }\r\n    }\r\n  }\r\n\r\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\r\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\r\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\r\n    for (const type in byGeometryType) {\r\n      const geomAndStyle = byGeometryType[type];\r\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\r\n        renderer.setStyle(geomAndStyle[j + 1]);\r\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\r\n          renderer.setTransform(transforms[k]);\r\n          renderer.drawGeometry(geomAndStyle[j]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return context.getImageData(0, 0, canvas.width, canvas.height);\r\n}\r\n\r\n/**\r\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\r\n * detection canvas in css pixels.\r\n * @param {Array<F>} features Features. Has to\r\n * match the `features` array that was passed to `createHitDetectionImageData()`.\r\n * @param {ImageData} imageData Hit detection image data generated by\r\n * `createHitDetectionImageData()`.\r\n * @return {Array<F>} Features.\r\n * @template {import(\"../../Feature.js\").FeatureLike} F\r\n */\r\nexport function hitDetect(pixel, features, imageData) {\r\n  /** @type {Array<F>} */\r\n  const resultFeatures = [];\r\n  if (imageData) {\r\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\r\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\r\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\r\n    // for browsers returning coordinates slightly larger than the actual canvas size\r\n    // due to a non-integer pixel ratio.\r\n    const index =\r\n      (clamp(x, 0, imageData.width - 1) +\r\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\r\n      4;\r\n    const r = imageData.data[index];\r\n    const g = imageData.data[index + 1];\r\n    const b = imageData.data[index + 2];\r\n    const i = b + 256 * (g + 256 * r);\r\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\r\n    if (i && i % indexFactor === 0) {\r\n      resultFeatures.push(features[i / indexFactor - 1]);\r\n    }\r\n  }\r\n  return resultFeatures;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}