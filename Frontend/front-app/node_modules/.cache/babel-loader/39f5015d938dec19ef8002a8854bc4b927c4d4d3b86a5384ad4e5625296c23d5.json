{"ast":null,"code":"/**\r\n * @module ol/Overlay\r\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n\n/**\r\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\r\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\r\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\r\n * `'top-center'`, or `'top-right'`.\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\r\n * with the {@link module:ol/Map~Map#getOverlayById} method.\r\n * @property {HTMLElement} [element] The overlay element.\r\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\r\n * the overlay. The first element in the\r\n * array is the horizontal offset. A positive value shifts the overlay right.\r\n * The second element in the array is the vertical offset. A positive value\r\n * shifts the overlay down.\r\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\r\n * in map projection.\r\n * @property {Positioning} [positioning='top-left'] Defines how\r\n * the overlay is actually positioned with respect to its `position` property.\r\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\r\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\r\n * `'top-center'`, and `'top-right'`.\r\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\r\n * viewport should be stopped. If `true` the overlay is placed in the same\r\n * container as that of the controls (CSS class name\r\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\r\n * with CSS class name specified by the `className` property.\r\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\r\n * in the overlay container, or appended. If the overlay is placed in the same\r\n * container as that of the controls (see the `stopEvent` option) you will\r\n * probably set `insertFirst` to `true` so the overlay is displayed below the\r\n * controls.\r\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\r\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\r\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\r\n * name.\r\n */\n\n/**\r\n * @typedef {Object} PanOptions\r\n * @property {number} [duration=1000] The duration of the animation in\r\n * milliseconds.\r\n * @property {function(number):number} [easing] The easing function to use. Can\r\n * be one from {@link module:ol/easing} or a custom function.\r\n * Default is {@link module:ol/easing.inAndOut}.\r\n */\n\n/**\r\n * @typedef {Object} PanIntoViewOptions\r\n * @property {PanOptions} [animation={}] The animation parameters for the pan\r\n * @property {number} [margin=20] The margin (in pixels) between the\r\n * overlay and the borders of the map when panning into view.\r\n */\n\n/**\r\n * @enum {string}\r\n * @protected\r\n */\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n\n/**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\r\n *   'change:positioning'} OverlayObjectEventTypes\r\n */\n\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\r\n */\n\n/**\r\n * @classdesc\r\n * An element to be displayed over the map and attached to a single map\r\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\r\n * visible widgets. Unlike Controls, they are not in a fixed position on the\r\n * screen, but are tied to a geographical coordinate, so panning the map will\r\n * move an Overlay but not a Control.\r\n *\r\n * Example:\r\n *\r\n *     import Overlay from 'ol/Overlay.js';\r\n *\r\n *     // ...\r\n *     const popup = new Overlay({\r\n *       element: document.getElementById('popup'),\r\n *     });\r\n *     popup.setPosition(coordinate);\r\n *     map.addOverlay(popup);\r\n *\r\n * @api\r\n */\nclass Overlay extends BaseObject {\n  /**\r\n   * @param {Options} options Overlay options.\r\n   */\n  constructor(options) {\n    super();\n\n    /***\r\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\r\n     */\n    this.on;\n\n    /***\r\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\r\n     */\n    this.once;\n\n    /***\r\n     * @type {OverlayOnSignature<void>}\r\n     */\n    this.un;\n\n    /**\r\n     * @protected\r\n     * @type {Options}\r\n     */\n    this.options = options;\n\n    /**\r\n     * @protected\r\n     * @type {number|string|undefined}\r\n     */\n    this.id = options.id;\n\n    /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */\n    this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n\n    /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n\n    /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */\n    this.element = document.createElement('div');\n    this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n    this.element.style.pointerEvents = 'auto';\n\n    /**\r\n     * @protected\r\n     * @type {PanIntoViewOptions|undefined}\r\n     */\n    this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\n\n    /**\r\n     * @protected\r\n     * @type {{transform_: string,\r\n     *         visible: boolean}}\r\n     */\n    this.rendered = {\n      transform_: '',\n      visible: true\n    };\n\n    /**\r\n     * @protected\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\n    this.mapPostrenderListenerKey = null;\n    this.addChangeListener(Property.ELEMENT, this.handleElementChanged);\n    this.addChangeListener(Property.MAP, this.handleMapChanged);\n    this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);\n    this.addChangeListener(Property.POSITION, this.handlePositionChanged);\n    this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n    this.setPositioning(options.positioning || 'top-left');\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n  }\n\n  /**\r\n   * Get the DOM element of this overlay.\r\n   * @return {HTMLElement|undefined} The Element containing the overlay.\r\n   * @observable\r\n   * @api\r\n   */\n  getElement() {\n    return /** @type {HTMLElement|undefined} */this.get(Property.ELEMENT);\n  }\n\n  /**\r\n   * Get the overlay identifier which is set on constructor.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\r\n   * Get the map associated with this overlay.\r\n   * @return {import(\"./Map.js\").default|null} The map that the\r\n   * overlay is part of.\r\n   * @observable\r\n   * @api\r\n   */\n  getMap() {\n    return /** @type {import(\"./Map.js\").default|null} */(\n      this.get(Property.MAP) || null\n    );\n  }\n\n  /**\r\n   * Get the offset of this overlay.\r\n   * @return {Array<number>} The offset.\r\n   * @observable\r\n   * @api\r\n   */\n  getOffset() {\n    return /** @type {Array<number>} */this.get(Property.OFFSET);\n  }\n\n  /**\r\n   * Get the current position of this overlay.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\r\n   *     anchored at.\r\n   * @observable\r\n   * @api\r\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */(\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\r\n   * Get the current positioning of this overlay.\r\n   * @return {Positioning} How the overlay is positioned\r\n   *     relative to its point on the map.\r\n   * @observable\r\n   * @api\r\n   */\n  getPositioning() {\n    return /** @type {Positioning} */this.get(Property.POSITIONING);\n  }\n\n  /**\r\n   * @protected\r\n   */\n  handleElementChanged() {\n    removeChildren(this.element);\n    const element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  }\n\n  /**\r\n   * @protected\r\n   */\n  handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    const map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n      this.updatePixelPosition();\n      const container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n      this.performAutoPan();\n    }\n  }\n\n  /**\r\n   * @protected\r\n   */\n  render() {\n    this.updatePixelPosition();\n  }\n\n  /**\r\n   * @protected\r\n   */\n  handleOffsetChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\r\n   * @protected\r\n   */\n  handlePositionChanged() {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  }\n\n  /**\r\n   * @protected\r\n   */\n  handlePositioningChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\r\n   * Set the DOM element to be associated with this overlay.\r\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\r\n   * @observable\r\n   * @api\r\n   */\n  setElement(element) {\n    this.set(Property.ELEMENT, element);\n  }\n\n  /**\r\n   * Set the map to be associated with this overlay.\r\n   * @param {import(\"./Map.js\").default|null} map The map that the\r\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\r\n   * @observable\r\n   * @api\r\n   */\n  setMap(map) {\n    this.set(Property.MAP, map);\n  }\n\n  /**\r\n   * Set the offset for this overlay.\r\n   * @param {Array<number>} offset Offset.\r\n   * @observable\r\n   * @api\r\n   */\n  setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  }\n\n  /**\r\n   * Set the position for this overlay. If the position is `undefined` the\r\n   * overlay is hidden.\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\r\n   *     is anchored at.\r\n   * @observable\r\n   * @api\r\n   */\n  setPosition(position) {\n    this.set(Property.POSITION, position);\n  }\n\n  /**\r\n   * Pan the map so that the overlay is entirely visible in the current viewport\r\n   * (if necessary) using the configured autoPan parameters\r\n   * @protected\r\n   */\n  performAutoPan() {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  }\n\n  /**\r\n   * Pan the map so that the overlay is entirely visible in the current viewport\r\n   * (if necessary).\r\n   * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\r\n   * @api\r\n   */\n  panIntoView(panIntoViewOptions) {\n    const map = this.getMap();\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    const element = this.getElement();\n    const overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n    panIntoViewOptions = panIntoViewOptions || {};\n    const myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      const offsetLeft = overlayRect[0] - mapRect[0];\n      const offsetRight = mapRect[2] - overlayRect[2];\n      const offsetTop = overlayRect[1] - mapRect[1];\n      const offsetBottom = mapRect[3] - overlayRect[3];\n      const delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        const center = /** @type {import(\"./coordinate.js\").Coordinate} */\n        map.getView().getCenterInternal();\n        const centerPx = map.getPixelFromCoordinateInternal(center);\n        if (!centerPx) {\n          return;\n        }\n        const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n        const panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing\n        });\n      }\n    }\n  }\n\n  /**\r\n   * Get the extent of an element relative to the document\r\n   * @param {HTMLElement} element The element.\r\n   * @param {import(\"./size.js\").Size} size The size of the element.\r\n   * @return {import(\"./extent.js\").Extent} The extent.\r\n   * @protected\r\n   */\n  getRect(element, size) {\n    const box = element.getBoundingClientRect();\n    const offsetX = box.left + window.pageXOffset;\n    const offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  }\n\n  /**\r\n   * Set the positioning for this overlay.\r\n   * @param {Positioning} positioning how the overlay is\r\n   *     positioned relative to its point on the map.\r\n   * @observable\r\n   * @api\r\n   */\n  setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  }\n\n  /**\r\n   * Modify the visibility of the element.\r\n   * @param {boolean} visible Element visibility.\r\n   * @protected\r\n   */\n  setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  }\n\n  /**\r\n   * Update pixel position.\r\n   * @protected\r\n   */\n  updatePixelPosition() {\n    const map = this.getMap();\n    const position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n    const pixel = map.getPixelFromCoordinate(position);\n    const mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  }\n\n  /**\r\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\r\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\r\n   * @protected\r\n   */\n  updateRenderedPosition(pixel, mapSize) {\n    const style = this.element.style;\n    const offset = this.getOffset();\n    const positioning = this.getPositioning();\n    this.setVisible(true);\n    const x = Math.round(pixel[0] + offset[0]) + 'px';\n    const y = Math.round(pixel[1] + offset[1]) + 'px';\n    let posX = '0%';\n    let posY = '0%';\n    if (positioning == 'bottom-right' || positioning == 'center-right' || positioning == 'top-right') {\n      posX = '-100%';\n    } else if (positioning == 'bottom-center' || positioning == 'center-center' || positioning == 'top-center') {\n      posX = '-50%';\n    }\n    if (positioning == 'bottom-left' || positioning == 'bottom-center' || positioning == 'bottom-right') {\n      posY = '-100%';\n    } else if (positioning == 'center-left' || positioning == 'center-center' || positioning == 'center-right') {\n      posY = '-50%';\n    }\n    const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n    }\n  }\n\n  /**\r\n   * returns the options this Overlay has been created with\r\n   * @return {Options} overlay options\r\n   */\n  getOptions() {\n    return this.options;\n  }\n}\nexport default Overlay;","map":{"version":3,"names":["BaseObject","MapEventType","CLASS_SELECTABLE","containsExtent","listen","unlistenByKey","outerHeight","outerWidth","removeChildren","removeNode","Property","ELEMENT","MAP","OFFSET","POSITION","POSITIONING","Overlay","constructor","options","on","once","un","id","insertFirst","undefined","stopEvent","element","document","createElement","className","style","position","pointerEvents","autoPan","rendered","transform_","visible","mapPostrenderListenerKey","addChangeListener","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","offset","setPositioning","positioning","setPosition","getElement","get","getId","getMap","getOffset","getPosition","getPositioning","appendChild","map","POSTRENDER","render","updatePixelPosition","container","getOverlayContainerStopEvent","getOverlayContainer","insertBefore","childNodes","performAutoPan","set","setMap","panIntoView","panIntoViewOptions","getTargetElement","mapRect","getRect","getSize","overlayRect","myMargin","margin","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","Math","abs","center","getView","getCenterInternal","centerPx","getPixelFromCoordinateInternal","newCenterPx","panOptions","animation","animateInternal","getCoordinateFromPixelInternal","duration","easing","size","box","getBoundingClientRect","offsetX","left","window","pageXOffset","offsetY","top","pageYOffset","setVisible","display","isRendered","pixel","getPixelFromCoordinate","mapSize","updateRenderedPosition","x","round","y","posX","posY","transform","getOptions"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/Overlay.js"],"sourcesContent":["/**\r\n * @module ol/Overlay\r\n */\r\nimport BaseObject from './Object.js';\r\nimport MapEventType from './MapEventType.js';\r\nimport {CLASS_SELECTABLE} from './css.js';\r\nimport {containsExtent} from './extent.js';\r\nimport {listen, unlistenByKey} from './events.js';\r\nimport {outerHeight, outerWidth, removeChildren, removeNode} from './dom.js';\r\n\r\n/**\r\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\r\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\r\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\r\n * `'top-center'`, or `'top-right'`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\r\n * with the {@link module:ol/Map~Map#getOverlayById} method.\r\n * @property {HTMLElement} [element] The overlay element.\r\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\r\n * the overlay. The first element in the\r\n * array is the horizontal offset. A positive value shifts the overlay right.\r\n * The second element in the array is the vertical offset. A positive value\r\n * shifts the overlay down.\r\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\r\n * in map projection.\r\n * @property {Positioning} [positioning='top-left'] Defines how\r\n * the overlay is actually positioned with respect to its `position` property.\r\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\r\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\r\n * `'top-center'`, and `'top-right'`.\r\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\r\n * viewport should be stopped. If `true` the overlay is placed in the same\r\n * container as that of the controls (CSS class name\r\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\r\n * with CSS class name specified by the `className` property.\r\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\r\n * in the overlay container, or appended. If the overlay is placed in the same\r\n * container as that of the controls (see the `stopEvent` option) you will\r\n * probably set `insertFirst` to `true` so the overlay is displayed below the\r\n * controls.\r\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\r\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\r\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\r\n * name.\r\n */\r\n\r\n/**\r\n * @typedef {Object} PanOptions\r\n * @property {number} [duration=1000] The duration of the animation in\r\n * milliseconds.\r\n * @property {function(number):number} [easing] The easing function to use. Can\r\n * be one from {@link module:ol/easing} or a custom function.\r\n * Default is {@link module:ol/easing.inAndOut}.\r\n */\r\n\r\n/**\r\n * @typedef {Object} PanIntoViewOptions\r\n * @property {PanOptions} [animation={}] The animation parameters for the pan\r\n * @property {number} [margin=20] The margin (in pixels) between the\r\n * overlay and the borders of the map when panning into view.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @protected\r\n */\r\nconst Property = {\r\n  ELEMENT: 'element',\r\n  MAP: 'map',\r\n  OFFSET: 'offset',\r\n  POSITION: 'position',\r\n  POSITIONING: 'positioning',\r\n};\r\n\r\n/**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\r\n *   'change:positioning'} OverlayObjectEventTypes\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * An element to be displayed over the map and attached to a single map\r\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\r\n * visible widgets. Unlike Controls, they are not in a fixed position on the\r\n * screen, but are tied to a geographical coordinate, so panning the map will\r\n * move an Overlay but not a Control.\r\n *\r\n * Example:\r\n *\r\n *     import Overlay from 'ol/Overlay.js';\r\n *\r\n *     // ...\r\n *     const popup = new Overlay({\r\n *       element: document.getElementById('popup'),\r\n *     });\r\n *     popup.setPosition(coordinate);\r\n *     map.addOverlay(popup);\r\n *\r\n * @api\r\n */\r\nclass Overlay extends BaseObject {\r\n  /**\r\n   * @param {Options} options Overlay options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /***\r\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {OverlayOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Options}\r\n     */\r\n    this.options = options;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number|string|undefined}\r\n     */\r\n    this.id = options.id;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */\r\n    this.insertFirst =\r\n      options.insertFirst !== undefined ? options.insertFirst : true;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */\r\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */\r\n    this.element = document.createElement('div');\r\n    this.element.className =\r\n      options.className !== undefined\r\n        ? options.className\r\n        : 'ol-overlay-container ' + CLASS_SELECTABLE;\r\n    this.element.style.position = 'absolute';\r\n    this.element.style.pointerEvents = 'auto';\r\n\r\n    /**\r\n     * @protected\r\n     * @type {PanIntoViewOptions|undefined}\r\n     */\r\n    this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {{transform_: string,\r\n     *         visible: boolean}}\r\n     */\r\n    this.rendered = {\r\n      transform_: '',\r\n      visible: true,\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\r\n    this.mapPostrenderListenerKey = null;\r\n\r\n    this.addChangeListener(Property.ELEMENT, this.handleElementChanged);\r\n    this.addChangeListener(Property.MAP, this.handleMapChanged);\r\n    this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);\r\n    this.addChangeListener(Property.POSITION, this.handlePositionChanged);\r\n    this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);\r\n\r\n    if (options.element !== undefined) {\r\n      this.setElement(options.element);\r\n    }\r\n\r\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\r\n\r\n    this.setPositioning(options.positioning || 'top-left');\r\n\r\n    if (options.position !== undefined) {\r\n      this.setPosition(options.position);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM element of this overlay.\r\n   * @return {HTMLElement|undefined} The Element containing the overlay.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getElement() {\r\n    return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\r\n  }\r\n\r\n  /**\r\n   * Get the overlay identifier which is set on constructor.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */\r\n  getId() {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Get the map associated with this overlay.\r\n   * @return {import(\"./Map.js\").default|null} The map that the\r\n   * overlay is part of.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getMap() {\r\n    return /** @type {import(\"./Map.js\").default|null} */ (\r\n      this.get(Property.MAP) || null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the offset of this overlay.\r\n   * @return {Array<number>} The offset.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getOffset() {\r\n    return /** @type {Array<number>} */ (this.get(Property.OFFSET));\r\n  }\r\n\r\n  /**\r\n   * Get the current position of this overlay.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\r\n   *     anchored at.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getPosition() {\r\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\r\n      this.get(Property.POSITION)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the current positioning of this overlay.\r\n   * @return {Positioning} How the overlay is positioned\r\n   *     relative to its point on the map.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getPositioning() {\r\n    return /** @type {Positioning} */ (this.get(Property.POSITIONING));\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handleElementChanged() {\r\n    removeChildren(this.element);\r\n    const element = this.getElement();\r\n    if (element) {\r\n      this.element.appendChild(element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handleMapChanged() {\r\n    if (this.mapPostrenderListenerKey) {\r\n      removeNode(this.element);\r\n      unlistenByKey(this.mapPostrenderListenerKey);\r\n      this.mapPostrenderListenerKey = null;\r\n    }\r\n    const map = this.getMap();\r\n    if (map) {\r\n      this.mapPostrenderListenerKey = listen(\r\n        map,\r\n        MapEventType.POSTRENDER,\r\n        this.render,\r\n        this,\r\n      );\r\n      this.updatePixelPosition();\r\n      const container = this.stopEvent\r\n        ? map.getOverlayContainerStopEvent()\r\n        : map.getOverlayContainer();\r\n      if (this.insertFirst) {\r\n        container.insertBefore(this.element, container.childNodes[0] || null);\r\n      } else {\r\n        container.appendChild(this.element);\r\n      }\r\n      this.performAutoPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  render() {\r\n    this.updatePixelPosition();\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handleOffsetChanged() {\r\n    this.updatePixelPosition();\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handlePositionChanged() {\r\n    this.updatePixelPosition();\r\n    this.performAutoPan();\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handlePositioningChanged() {\r\n    this.updatePixelPosition();\r\n  }\r\n\r\n  /**\r\n   * Set the DOM element to be associated with this overlay.\r\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setElement(element) {\r\n    this.set(Property.ELEMENT, element);\r\n  }\r\n\r\n  /**\r\n   * Set the map to be associated with this overlay.\r\n   * @param {import(\"./Map.js\").default|null} map The map that the\r\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setMap(map) {\r\n    this.set(Property.MAP, map);\r\n  }\r\n\r\n  /**\r\n   * Set the offset for this overlay.\r\n   * @param {Array<number>} offset Offset.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setOffset(offset) {\r\n    this.set(Property.OFFSET, offset);\r\n  }\r\n\r\n  /**\r\n   * Set the position for this overlay. If the position is `undefined` the\r\n   * overlay is hidden.\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\r\n   *     is anchored at.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setPosition(position) {\r\n    this.set(Property.POSITION, position);\r\n  }\r\n\r\n  /**\r\n   * Pan the map so that the overlay is entirely visible in the current viewport\r\n   * (if necessary) using the configured autoPan parameters\r\n   * @protected\r\n   */\r\n  performAutoPan() {\r\n    if (this.autoPan) {\r\n      this.panIntoView(this.autoPan);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pan the map so that the overlay is entirely visible in the current viewport\r\n   * (if necessary).\r\n   * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\r\n   * @api\r\n   */\r\n  panIntoView(panIntoViewOptions) {\r\n    const map = this.getMap();\r\n\r\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\r\n      return;\r\n    }\r\n\r\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\r\n    const element = this.getElement();\r\n    const overlayRect = this.getRect(element, [\r\n      outerWidth(element),\r\n      outerHeight(element),\r\n    ]);\r\n\r\n    panIntoViewOptions = panIntoViewOptions || {};\r\n\r\n    const myMargin =\r\n      panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\r\n    if (!containsExtent(mapRect, overlayRect)) {\r\n      // the overlay is not completely inside the viewport, so pan the map\r\n      const offsetLeft = overlayRect[0] - mapRect[0];\r\n      const offsetRight = mapRect[2] - overlayRect[2];\r\n      const offsetTop = overlayRect[1] - mapRect[1];\r\n      const offsetBottom = mapRect[3] - overlayRect[3];\r\n\r\n      const delta = [0, 0];\r\n      if (offsetLeft < 0) {\r\n        // move map to the left\r\n        delta[0] = offsetLeft - myMargin;\r\n      } else if (offsetRight < 0) {\r\n        // move map to the right\r\n        delta[0] = Math.abs(offsetRight) + myMargin;\r\n      }\r\n      if (offsetTop < 0) {\r\n        // move map up\r\n        delta[1] = offsetTop - myMargin;\r\n      } else if (offsetBottom < 0) {\r\n        // move map down\r\n        delta[1] = Math.abs(offsetBottom) + myMargin;\r\n      }\r\n\r\n      if (delta[0] !== 0 || delta[1] !== 0) {\r\n        const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\r\n          map.getView().getCenterInternal()\r\n        );\r\n        const centerPx = map.getPixelFromCoordinateInternal(center);\r\n        if (!centerPx) {\r\n          return;\r\n        }\r\n        const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\r\n\r\n        const panOptions = panIntoViewOptions.animation || {};\r\n        map.getView().animateInternal({\r\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\r\n          duration: panOptions.duration,\r\n          easing: panOptions.easing,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the extent of an element relative to the document\r\n   * @param {HTMLElement} element The element.\r\n   * @param {import(\"./size.js\").Size} size The size of the element.\r\n   * @return {import(\"./extent.js\").Extent} The extent.\r\n   * @protected\r\n   */\r\n  getRect(element, size) {\r\n    const box = element.getBoundingClientRect();\r\n    const offsetX = box.left + window.pageXOffset;\r\n    const offsetY = box.top + window.pageYOffset;\r\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\r\n  }\r\n\r\n  /**\r\n   * Set the positioning for this overlay.\r\n   * @param {Positioning} positioning how the overlay is\r\n   *     positioned relative to its point on the map.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setPositioning(positioning) {\r\n    this.set(Property.POSITIONING, positioning);\r\n  }\r\n\r\n  /**\r\n   * Modify the visibility of the element.\r\n   * @param {boolean} visible Element visibility.\r\n   * @protected\r\n   */\r\n  setVisible(visible) {\r\n    if (this.rendered.visible !== visible) {\r\n      this.element.style.display = visible ? '' : 'none';\r\n      this.rendered.visible = visible;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update pixel position.\r\n   * @protected\r\n   */\r\n  updatePixelPosition() {\r\n    const map = this.getMap();\r\n    const position = this.getPosition();\r\n    if (!map || !map.isRendered() || !position) {\r\n      this.setVisible(false);\r\n      return;\r\n    }\r\n\r\n    const pixel = map.getPixelFromCoordinate(position);\r\n    const mapSize = map.getSize();\r\n    this.updateRenderedPosition(pixel, mapSize);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\r\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\r\n   * @protected\r\n   */\r\n  updateRenderedPosition(pixel, mapSize) {\r\n    const style = this.element.style;\r\n    const offset = this.getOffset();\r\n\r\n    const positioning = this.getPositioning();\r\n\r\n    this.setVisible(true);\r\n\r\n    const x = Math.round(pixel[0] + offset[0]) + 'px';\r\n    const y = Math.round(pixel[1] + offset[1]) + 'px';\r\n    let posX = '0%';\r\n    let posY = '0%';\r\n    if (\r\n      positioning == 'bottom-right' ||\r\n      positioning == 'center-right' ||\r\n      positioning == 'top-right'\r\n    ) {\r\n      posX = '-100%';\r\n    } else if (\r\n      positioning == 'bottom-center' ||\r\n      positioning == 'center-center' ||\r\n      positioning == 'top-center'\r\n    ) {\r\n      posX = '-50%';\r\n    }\r\n    if (\r\n      positioning == 'bottom-left' ||\r\n      positioning == 'bottom-center' ||\r\n      positioning == 'bottom-right'\r\n    ) {\r\n      posY = '-100%';\r\n    } else if (\r\n      positioning == 'center-left' ||\r\n      positioning == 'center-center' ||\r\n      positioning == 'center-right'\r\n    ) {\r\n      posY = '-50%';\r\n    }\r\n    const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\r\n    if (this.rendered.transform_ != transform) {\r\n      this.rendered.transform_ = transform;\r\n      style.transform = transform;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * returns the options this Overlay has been created with\r\n   * @return {Options} overlay options\r\n   */\r\n  getOptions() {\r\n    return this.options;\r\n  }\r\n}\r\n\r\nexport default Overlay;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,aAAa;AACpC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,SAAQC,gBAAgB,QAAO,UAAU;AACzC,SAAQC,cAAc,QAAO,aAAa;AAC1C,SAAQC,MAAM,EAAEC,aAAa,QAAO,aAAa;AACjD,SAAQC,WAAW,EAAEC,UAAU,EAAEC,cAAc,EAAEC,UAAU,QAAO,UAAU;;AAE5E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG;EACfC,OAAO,EAAE,SAAS;EAClBC,GAAG,EAAE,KAAK;EACVC,MAAM,EAAE,QAAQ;EAChBC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE;AACf,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,SAAShB,UAAU,CAAC;EAC/B;AACF;AACA;EACEiB,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;;IAEP;AACJ;AACA;IACI,IAAI,CAACC,EAAE;;IAEP;AACJ;AACA;IACI,IAAI,CAACC,IAAI;;IAET;AACJ;AACA;IACI,IAAI,CAACC,EAAE;;IAEP;AACJ;AACA;AACA;IACI,IAAI,CAACH,OAAO,GAAGA,OAAO;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACI,EAAE,GAAGJ,OAAO,CAACI,EAAE;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACC,WAAW,GACdL,OAAO,CAACK,WAAW,KAAKC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}