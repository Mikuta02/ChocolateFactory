{"ast":null,"code":"/**\r\n * @module ol/geom/SimpleGeometry\r\n */\nimport Geometry from './Geometry.js';\nimport { abstract } from '../util.js';\nimport { createOrUpdateFromFlatCoordinates, getCenter } from '../extent.js';\nimport { rotate, scale, transform2D, translate } from './flat/transform.js';\n\n/**\r\n * @classdesc\r\n * Abstract base class; only used for creating subclasses; do not instantiate\r\n * in apps, as cannot be rendered.\r\n *\r\n * @abstract\r\n * @api\r\n */\nclass SimpleGeometry extends Geometry {\n  constructor() {\n    super();\n\n    /**\r\n     * @protected\r\n     * @type {import(\"./Geometry.js\").GeometryLayout}\r\n     */\n    this.layout = 'XY';\n\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\n    this.stride = 2;\n\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\n    this.flatCoordinates;\n  }\n\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  }\n\n  /**\r\n   * @abstract\r\n   * @return {Array<*> | null} Coordinates.\r\n   */\n  getCoordinates() {\n    return abstract();\n  }\n\n  /**\r\n   * Return the first coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\r\n   * @api\r\n   */\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n\n  /**\r\n   * Return the last coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\r\n   * @api\r\n   */\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n  }\n\n  /**\r\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\r\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\r\n   * @api\r\n   */\n  getLayout() {\n    return this.layout;\n  }\n\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n    const simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    }\n    // Simplification did not actually remove any coordinates.  We now know\n    // that any calls to getSimplifiedGeometry with a squaredTolerance less\n    // than or equal to the current squaredTolerance will also not have any\n    // effect.  This allows us to short circuit simplification (saving CPU\n    // cycles) and prevents the cache of simplified geometries from filling\n    // up with useless identical copies of this geometry (saving memory).\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   * @protected\r\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n\n  /**\r\n   * @return {number} Stride.\r\n   */\n  getStride() {\n    return this.stride;\n  }\n\n  /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   */\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n\n  /**\r\n   * @abstract\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\n  setCoordinates(coordinates, layout) {\n    abstract();\n  }\n\n  /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\r\n   * @param {Array<*>} coordinates Coordinates.\r\n   * @param {number} nesting Nesting.\r\n   * @protected\r\n   */\n  setLayout(layout, coordinates, nesting) {\n    let stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = 'XY';\n          this.stride = 2;\n          return;\n        }\n        coordinates = /** @type {Array<unknown>} */coordinates[0];\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  }\n\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   * @api\r\n   */\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  }\n\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in counter-clockwise radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n      this.changed();\n    }\n  }\n\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */\n  scale(sx, sy, anchor) {\n    if (sy === undefined) {\n      sy = sx;\n    }\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n      this.changed();\n    }\n  }\n\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n      this.changed();\n    }\n  }\n}\n\n/**\r\n * @param {number} stride Stride.\r\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n */\nexport function getLayoutForStride(stride) {\n  let layout;\n  if (stride == 2) {\n    layout = 'XY';\n  } else if (stride == 3) {\n    layout = 'XYZ';\n  } else if (stride == 4) {\n    layout = 'XYZM';\n  }\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */layout;\n}\n\n/**\r\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n * @return {number} Stride.\r\n */\nexport function getStrideForLayout(layout) {\n  let stride;\n  if (layout == 'XY') {\n    stride = 2;\n  } else if (layout == 'XYZ' || layout == 'XYM') {\n    stride = 3;\n  } else if (layout == 'XYZM') {\n    stride = 4;\n  }\n  return /** @type {number} */stride;\n}\n\n/**\r\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\r\n * @param {import(\"../transform.js\").Transform} transform Transform.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed flat coordinates.\r\n */\nexport function transformGeom2D(simpleGeometry, transform, dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  }\n  const stride = simpleGeometry.getStride();\n  return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, dest);\n}\nexport default SimpleGeometry;","map":{"version":3,"names":["Geometry","abstract","createOrUpdateFromFlatCoordinates","getCenter","rotate","scale","transform2D","translate","SimpleGeometry","constructor","layout","stride","flatCoordinates","computeExtent","extent","length","getCoordinates","getFirstCoordinate","slice","getFlatCoordinates","getLastCoordinate","getLayout","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometry","getSimplifiedGeometryInternal","simplifiedFlatCoordinates","getStride","setFlatCoordinates","getStrideForLayout","setCoordinates","coordinates","setLayout","nesting","i","getLayoutForStride","applyTransform","transformFn","changed","angle","anchor","sx","sy","undefined","getExtent","deltaX","deltaY","transformGeom2D","simpleGeometry","transform","dest"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/geom/SimpleGeometry.js"],"sourcesContent":["/**\r\n * @module ol/geom/SimpleGeometry\r\n */\r\nimport Geometry from './Geometry.js';\r\nimport {abstract} from '../util.js';\r\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\r\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; only used for creating subclasses; do not instantiate\r\n * in apps, as cannot be rendered.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass SimpleGeometry extends Geometry {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./Geometry.js\").GeometryLayout}\r\n     */\r\n    this.layout = 'XY';\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.stride = 2;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    return createOrUpdateFromFlatCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      extent,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {Array<*> | null} Coordinates.\r\n   */\r\n  getCoordinates() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Return the first coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\r\n   * @api\r\n   */\r\n  getFirstCoordinate() {\r\n    return this.flatCoordinates.slice(0, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\r\n  getFlatCoordinates() {\r\n    return this.flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * Return the last coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\r\n   * @api\r\n   */\r\n  getLastCoordinate() {\r\n    return this.flatCoordinates.slice(\r\n      this.flatCoordinates.length - this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\r\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\r\n   * @api\r\n   */\r\n  getLayout() {\r\n    return this.layout;\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\r\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n      this.simplifiedGeometryRevision = this.getRevision();\r\n    }\r\n    // If squaredTolerance is negative or if we know that simplification will not\r\n    // have any effect then just return this.\r\n    if (\r\n      squaredTolerance < 0 ||\r\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\r\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    const simplifiedGeometry =\r\n      this.getSimplifiedGeometryInternal(squaredTolerance);\r\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\r\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\r\n      return simplifiedGeometry;\r\n    }\r\n    // Simplification did not actually remove any coordinates.  We now know\r\n    // that any calls to getSimplifiedGeometry with a squaredTolerance less\r\n    // than or equal to the current squaredTolerance will also not have any\r\n    // effect.  This allows us to short circuit simplification (saving CPU\r\n    // cycles) and prevents the cache of simplified geometries from filling\r\n    // up with useless identical copies of this geometry (saving memory).\r\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Stride.\r\n   */\r\n  getStride() {\r\n    return this.stride;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   */\r\n  setFlatCoordinates(layout, flatCoordinates) {\r\n    this.stride = getStrideForLayout(layout);\r\n    this.layout = layout;\r\n    this.flatCoordinates = flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\r\n   * @param {Array<*>} coordinates Coordinates.\r\n   * @param {number} nesting Nesting.\r\n   * @protected\r\n   */\r\n  setLayout(layout, coordinates, nesting) {\r\n    let stride;\r\n    if (layout) {\r\n      stride = getStrideForLayout(layout);\r\n    } else {\r\n      for (let i = 0; i < nesting; ++i) {\r\n        if (coordinates.length === 0) {\r\n          this.layout = 'XY';\r\n          this.stride = 2;\r\n          return;\r\n        }\r\n        coordinates = /** @type {Array<unknown>} */ (coordinates[0]);\r\n      }\r\n      stride = coordinates.length;\r\n      layout = getLayoutForStride(stride);\r\n    }\r\n    this.layout = layout;\r\n    this.stride = stride;\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   * @api\r\n   */\r\n  applyTransform(transformFn) {\r\n    if (this.flatCoordinates) {\r\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in counter-clockwise radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(angle, anchor) {\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      rotate(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        angle,\r\n        anchor,\r\n        flatCoordinates,\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */\r\n  scale(sx, sy, anchor) {\r\n    if (sy === undefined) {\r\n      sy = sx;\r\n    }\r\n    if (!anchor) {\r\n      anchor = getCenter(this.getExtent());\r\n    }\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      scale(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        sx,\r\n        sy,\r\n        anchor,\r\n        flatCoordinates,\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      translate(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        deltaX,\r\n        deltaY,\r\n        flatCoordinates,\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} stride Stride.\r\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n */\r\nexport function getLayoutForStride(stride) {\r\n  let layout;\r\n  if (stride == 2) {\r\n    layout = 'XY';\r\n  } else if (stride == 3) {\r\n    layout = 'XYZ';\r\n  } else if (stride == 4) {\r\n    layout = 'XYZM';\r\n  }\r\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */ (layout);\r\n}\r\n\r\n/**\r\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n * @return {number} Stride.\r\n */\r\nexport function getStrideForLayout(layout) {\r\n  let stride;\r\n  if (layout == 'XY') {\r\n    stride = 2;\r\n  } else if (layout == 'XYZ' || layout == 'XYM') {\r\n    stride = 3;\r\n  } else if (layout == 'XYZM') {\r\n    stride = 4;\r\n  }\r\n  return /** @type {number} */ (stride);\r\n}\r\n\r\n/**\r\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\r\n * @param {import(\"../transform.js\").Transform} transform Transform.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed flat coordinates.\r\n */\r\nexport function transformGeom2D(simpleGeometry, transform, dest) {\r\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\r\n  if (!flatCoordinates) {\r\n    return null;\r\n  }\r\n  const stride = simpleGeometry.getStride();\r\n  return transform2D(\r\n    flatCoordinates,\r\n    0,\r\n    flatCoordinates.length,\r\n    stride,\r\n    transform,\r\n    dest,\r\n  );\r\n}\r\n\r\nexport default SimpleGeometry;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}