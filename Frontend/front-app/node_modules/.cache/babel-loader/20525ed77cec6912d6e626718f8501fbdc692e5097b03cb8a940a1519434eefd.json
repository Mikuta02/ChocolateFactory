{"ast":null,"code":"/**\r\n * @module ol/geom/flat/deflate\r\n */\n\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\n    flatCoordinates[offset++] = coordinate[i];\n  }\n  return offset;\n}\n\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\nexport function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    const coordinate = coordinates[i];\n    for (let j = 0; j < stride; ++j) {\n      flatCoordinates[offset++] = coordinate[j];\n    }\n  }\n  return offset;\n}\n\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} [ends] Ends.\r\n * @return {Array<number>} Ends.\r\n */\nexport function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, ends) {\n  ends = ends ? ends : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\n    const end = deflateCoordinates(flatCoordinates, offset, coordinatess[j], stride);\n    ends[i++] = end;\n    offset = end;\n  }\n  ends.length = i;\n  return ends;\n}\n\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\r\n * @param {number} stride Stride.\r\n * @param {Array<Array<number>>} [endss] Endss.\r\n * @return {Array<Array<number>>} Endss.\r\n */\nexport function deflateMultiCoordinatesArray(flatCoordinates, offset, coordinatesss, stride, endss) {\n  endss = endss ? endss : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\n    const ends = deflateCoordinatesArray(flatCoordinates, offset, coordinatesss[j], stride, endss[i]);\n    if (ends.length === 0) {\n      ends[0] = offset;\n    }\n    endss[i++] = ends;\n    offset = ends[ends.length - 1];\n  }\n  endss.length = i;\n  return endss;\n}","map":{"version":3,"names":["deflateCoordinate","flatCoordinates","offset","coordinate","stride","i","ii","length","deflateCoordinates","coordinates","j","deflateCoordinatesArray","coordinatess","ends","jj","end","deflateMultiCoordinatesArray","coordinatesss","endss"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/geom/flat/deflate.js"],"sourcesContent":["/**\r\n * @module ol/geom/flat/deflate\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\r\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\r\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\r\n    flatCoordinates[offset++] = coordinate[i];\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\r\nexport function deflateCoordinates(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinates,\r\n  stride,\r\n) {\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    const coordinate = coordinates[i];\r\n    for (let j = 0; j < stride; ++j) {\r\n      flatCoordinates[offset++] = coordinate[j];\r\n    }\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} [ends] Ends.\r\n * @return {Array<number>} Ends.\r\n */\r\nexport function deflateCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinatess,\r\n  stride,\r\n  ends,\r\n) {\r\n  ends = ends ? ends : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\r\n    const end = deflateCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      coordinatess[j],\r\n      stride,\r\n    );\r\n    ends[i++] = end;\r\n    offset = end;\r\n  }\r\n  ends.length = i;\r\n  return ends;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\r\n * @param {number} stride Stride.\r\n * @param {Array<Array<number>>} [endss] Endss.\r\n * @return {Array<Array<number>>} Endss.\r\n */\r\nexport function deflateMultiCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinatesss,\r\n  stride,\r\n  endss,\r\n) {\r\n  endss = endss ? endss : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\r\n    const ends = deflateCoordinatesArray(\r\n      flatCoordinates,\r\n      offset,\r\n      coordinatesss[j],\r\n      stride,\r\n      endss[i],\r\n    );\r\n    if (ends.length === 0) {\r\n      ends[0] = offset;\r\n    }\r\n    endss[i++] = ends;\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  endss.length = i;\r\n  return endss;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAiBA,CAACC,eAAe,EAAEC,MAAM,EAAEC,UAAU,EAAEC,MAAM,EAAE;EAC7E,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGH,UAAU,CAACI,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;IACnDJ,eAAe,CAACC,MAAM,EAAE,CAAC,GAAGC,UAAU,CAACE,CAAC,CAAC;EAC3C;EACA,OAAOH,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,kBAAkBA,CAChCP,eAAe,EACfC,MAAM,EACNO,WAAW,EACXL,MAAM,EACN;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGG,WAAW,CAACF,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;IACpD,MAAMF,UAAU,GAAGM,WAAW,CAACJ,CAAC,CAAC;IACjC,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,EAAE,EAAEM,CAAC,EAAE;MAC/BT,eAAe,CAACC,MAAM,EAAE,CAAC,GAAGC,UAAU,CAACO,CAAC,CAAC;IAC3C;EACF;EACA,OAAOR,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,uBAAuBA,CACrCV,eAAe,EACfC,MAAM,EACNU,YAAY,EACZR,MAAM,EACNS,IAAI,EACJ;EACAA,IAAI,GAAGA,IAAI,GAAGA,IAAI,GAAG,EAAE;EACvB,IAAIR,CAAC,GAAG,CAAC;EACT,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEI,EAAE,GAAGF,YAAY,CAACL,MAAM,EAAEG,CAAC,GAAGI,EAAE,EAAE,EAAEJ,CAAC,EAAE;IACrD,MAAMK,GAAG,GAAGP,kBAAkB,CAC5BP,eAAe,EACfC,MAAM,EACNU,YAAY,CAACF,CAAC,CAAC,EACfN,MACF,CAAC;IACDS,IAAI,CAACR,CAAC,EAAE,CAAC,GAAGU,GAAG;IACfb,MAAM,GAAGa,GAAG;EACd;EACAF,IAAI,CAACN,MAAM,GAAGF,CAAC;EACf,OAAOQ,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,4BAA4BA,CAC1Cf,eAAe,EACfC,MAAM,EACNe,aAAa,EACbb,MAAM,EACNc,KAAK,EACL;EACAA,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAG,EAAE;EAC1B,IAAIb,CAAC,GAAG,CAAC;EACT,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEI,EAAE,GAAGG,aAAa,CAACV,MAAM,EAAEG,CAAC,GAAGI,EAAE,EAAE,EAAEJ,CAAC,EAAE;IACtD,MAAMG,IAAI,GAAGF,uBAAuB,CAClCV,eAAe,EACfC,MAAM,EACNe,aAAa,CAACP,CAAC,CAAC,EAChBN,MAAM,EACNc,KAAK,CAACb,CAAC,CACT,CAAC;IACD,IAAIQ,IAAI,CAACN,MAAM,KAAK,CAAC,EAAE;MACrBM,IAAI,CAAC,CAAC,CAAC,GAAGX,MAAM;IAClB;IACAgB,KAAK,CAACb,CAAC,EAAE,CAAC,GAAGQ,IAAI;IACjBX,MAAM,GAAGW,IAAI,CAACA,IAAI,CAACN,MAAM,GAAG,CAAC,CAAC;EAChC;EACAW,KAAK,CAACX,MAAM,GAAGF,CAAC;EAChB,OAAOa,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}