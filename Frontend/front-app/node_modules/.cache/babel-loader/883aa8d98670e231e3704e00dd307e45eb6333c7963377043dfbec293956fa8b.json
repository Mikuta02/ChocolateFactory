{"ast":null,"code":"/**\r\n * @module ol/VectorTile\r\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nclass VectorTile extends Tile {\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {string} src Data source url.\r\n   * @param {import(\"./format/Feature.js\").default<typeof import(\"./Feature.js\").default|typeof import(\"./render/Feature.js\").default>} format Feature format.\r\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\r\n   */\n  constructor(tileCoord, state, src, format, tileLoadFunction, options) {\n    super(tileCoord, state, options);\n\n    /**\r\n     * Extent of this tile; set by the source.\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */\n    this.extent = null;\n\n    /**\r\n     * @private\r\n     * @type {import(\"./format/Feature.js\").default<typeof import(\"./Feature.js\").default|typeof import(\"./render/Feature.js\").default>}\r\n     */\n    this.format_ = format;\n\n    /**\r\n     * @private\r\n     * @type {Array<import(\"./Feature.js\").FeatureLike>}\r\n     */\n    this.features_ = null;\n\n    /**\r\n     * @private\r\n     * @type {import(\"./featureloader.js\").FeatureLoader}\r\n     */\n    this.loader_;\n\n    /**\r\n     * Feature projection of this tile; set by the source.\r\n     * @type {import(\"./proj/Projection.js\").default}\r\n     */\n    this.projection = null;\n\n    /**\r\n     * Resolution of this tile; set by the source.\r\n     * @type {number}\r\n     */\n    this.resolution;\n\n    /**\r\n     * @private\r\n     * @type {import(\"./Tile.js\").LoadFunction}\r\n     */\n    this.tileLoadFunction_ = tileLoadFunction;\n\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\n    this.url_ = src;\n    this.key = src;\n  }\n\n  /**\r\n   * Get the feature format assigned for reading this tile's features.\r\n   * @return {import(\"./format/Feature.js\").default<typeof import(\"./Feature.js\").default|typeof import(\"./render/Feature.js\").default>} Feature format.\r\n   * @api\r\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\r\n   * Get the features for this tile. Geometries will be in the view projection.\r\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} Features.\r\n   * @api\r\n   */\n  getFeatures() {\n    return this.features_;\n  }\n\n  /**\r\n   * Load not yet loaded URI.\r\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.setState(TileState.LOADING);\n      this.tileLoadFunction_(this, this.url_);\n      if (this.loader_) {\n        this.loader_(this.extent, this.resolution, this.projection);\n      }\n    }\n  }\n\n  /**\r\n   * Handler for successful tile load.\r\n   * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\r\n   * @param {import(\"./proj/Projection.js\").default} dataProjection Data projection.\r\n   */\n  onLoad(features, dataProjection) {\n    this.setFeatures(features);\n  }\n\n  /**\r\n   * Handler for tile load errors.\r\n   */\n  onError() {\n    this.setState(TileState.ERROR);\n  }\n\n  /**\r\n   * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.\r\n   * Sets the features for the tile.\r\n   * @param {Array<import(\"./Feature.js\").FeatureLike>} features Features.\r\n   * @api\r\n   */\n  setFeatures(features) {\n    this.features_ = features;\n    this.setState(TileState.LOADED);\n  }\n\n  /**\r\n   * Set the feature loader for reading this tile's features.\r\n   * @param {import(\"./featureloader.js\").FeatureLoader} loader Feature loader.\r\n   * @api\r\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n}\nexport default VectorTile;","map":{"version":3,"names":["Tile","TileState","VectorTile","constructor","tileCoord","state","src","format","tileLoadFunction","options","extent","format_","features_","loader_","projection","resolution","tileLoadFunction_","url_","key","getFormat","getFeatures","load","IDLE","setState","LOADING","onLoad","features","dataProjection","setFeatures","onError","ERROR","LOADED","setLoader","loader"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/VectorTile.js"],"sourcesContent":["/**\r\n * @module ol/VectorTile\r\n */\r\nimport Tile from './Tile.js';\r\nimport TileState from './TileState.js';\r\n\r\nclass VectorTile extends Tile {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {string} src Data source url.\r\n   * @param {import(\"./format/Feature.js\").default<typeof import(\"./Feature.js\").default|typeof import(\"./render/Feature.js\").default>} format Feature format.\r\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\r\n   */\r\n  constructor(tileCoord, state, src, format, tileLoadFunction, options) {\r\n    super(tileCoord, state, options);\r\n\r\n    /**\r\n     * Extent of this tile; set by the source.\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */\r\n    this.extent = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./format/Feature.js\").default<typeof import(\"./Feature.js\").default|typeof import(\"./render/Feature.js\").default>}\r\n     */\r\n    this.format_ = format;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"./Feature.js\").FeatureLike>}\r\n     */\r\n    this.features_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./featureloader.js\").FeatureLoader}\r\n     */\r\n    this.loader_;\r\n\r\n    /**\r\n     * Feature projection of this tile; set by the source.\r\n     * @type {import(\"./proj/Projection.js\").default}\r\n     */\r\n    this.projection = null;\r\n\r\n    /**\r\n     * Resolution of this tile; set by the source.\r\n     * @type {number}\r\n     */\r\n    this.resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Tile.js\").LoadFunction}\r\n     */\r\n    this.tileLoadFunction_ = tileLoadFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.url_ = src;\r\n\r\n    this.key = src;\r\n  }\r\n\r\n  /**\r\n   * Get the feature format assigned for reading this tile's features.\r\n   * @return {import(\"./format/Feature.js\").default<typeof import(\"./Feature.js\").default|typeof import(\"./render/Feature.js\").default>} Feature format.\r\n   * @api\r\n   */\r\n  getFormat() {\r\n    return this.format_;\r\n  }\r\n\r\n  /**\r\n   * Get the features for this tile. Geometries will be in the view projection.\r\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} Features.\r\n   * @api\r\n   */\r\n  getFeatures() {\r\n    return this.features_;\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.state == TileState.IDLE) {\r\n      this.setState(TileState.LOADING);\r\n      this.tileLoadFunction_(this, this.url_);\r\n      if (this.loader_) {\r\n        this.loader_(this.extent, this.resolution, this.projection);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler for successful tile load.\r\n   * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\r\n   * @param {import(\"./proj/Projection.js\").default} dataProjection Data projection.\r\n   */\r\n  onLoad(features, dataProjection) {\r\n    this.setFeatures(features);\r\n  }\r\n\r\n  /**\r\n   * Handler for tile load errors.\r\n   */\r\n  onError() {\r\n    this.setState(TileState.ERROR);\r\n  }\r\n\r\n  /**\r\n   * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.\r\n   * Sets the features for the tile.\r\n   * @param {Array<import(\"./Feature.js\").FeatureLike>} features Features.\r\n   * @api\r\n   */\r\n  setFeatures(features) {\r\n    this.features_ = features;\r\n    this.setState(TileState.LOADED);\r\n  }\r\n\r\n  /**\r\n   * Set the feature loader for reading this tile's features.\r\n   * @param {import(\"./featureloader.js\").FeatureLoader} loader Feature loader.\r\n   * @api\r\n   */\r\n  setLoader(loader) {\r\n    this.loader_ = loader;\r\n  }\r\n}\r\n\r\nexport default VectorTile;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,WAAW;AAC5B,OAAOC,SAAS,MAAM,gBAAgB;AAEtC,MAAMC,UAAU,SAASF,IAAI,CAAC;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,WAAWA,CAACC,SAAS,EAAEC,KAAK,EAAEC,GAAG,EAAEC,MAAM,EAAEC,gBAAgB,EAAEC,OAAO,EAAE;IACpE,KAAK,CAACL,SAAS,EAAEC,KAAK,EAAEI,OAAO,CAAC;;IAEhC;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAG,IAAI;;IAElB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGJ,MAAM;;IAErB;AACJ;AACA;AACA;IACI,IAAI,CAACK,SAAS,GAAG,IAAI;;IAErB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO;;IAEZ;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAG,IAAI;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU;;IAEf;AACJ;AACA;AACA;IACI,IAAI,CAACC,iBAAiB,GAAGR,gBAAgB;;IAEzC;AACJ;AACA;AACA;IACI,IAAI,CAACS,IAAI,GAAGX,GAAG;IAEf,IAAI,CAACY,GAAG,GAAGZ,GAAG;EAChB;;EAEA;AACF;AACA;AACA;AACA;EACEa,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACR,OAAO;EACrB;;EAEA;AACF;AACA;AACA;AACA;EACES,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACR,SAAS;EACvB;;EAEA;AACF;AACA;EACES,IAAIA,CAAA,EAAG;IACL,IAAI,IAAI,CAAChB,KAAK,IAAIJ,SAAS,CAACqB,IAAI,EAAE;MAChC,IAAI,CAACC,QAAQ,CAACtB,SAAS,CAACuB,OAAO,CAAC;MAChC,IAAI,CAACR,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC;MACvC,IAAI,IAAI,CAACJ,OAAO,EAAE;QAChB,IAAI,CAACA,OAAO,CAAC,IAAI,CAACH,MAAM,EAAE,IAAI,CAACK,UAAU,EAAE,IAAI,CAACD,UAAU,CAAC;MAC7D;IACF;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEW,MAAMA,CAACC,QAAQ,EAAEC,cAAc,EAAE;IAC/B,IAAI,CAACC,WAAW,CAACF,QAAQ,CAAC;EAC5B;;EAEA;AACF;AACA;EACEG,OAAOA,CAAA,EAAG;IACR,IAAI,CAACN,QAAQ,CAACtB,SAAS,CAAC6B,KAAK,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEF,WAAWA,CAACF,QAAQ,EAAE;IACpB,IAAI,CAACd,SAAS,GAAGc,QAAQ;IACzB,IAAI,CAACH,QAAQ,CAACtB,SAAS,CAAC8B,MAAM,CAAC;EACjC;;EAEA;AACF;AACA;AACA;AACA;EACEC,SAASA,CAACC,MAAM,EAAE;IAChB,IAAI,CAACpB,OAAO,GAAGoB,MAAM;EACvB;AACF;AAEA,eAAe/B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}