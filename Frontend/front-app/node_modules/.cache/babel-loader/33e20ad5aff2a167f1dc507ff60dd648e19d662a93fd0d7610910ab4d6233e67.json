{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @module ol/reproj\r\n */\nimport { containsCoordinate, createEmpty, extend, forEachCorner, getCenter, getHeight, getTopLeft, getWidth } from './extent.js';\nimport { createCanvasContext2D, releaseCanvas } from './dom.js';\nimport { getPointResolution, transform } from './proj.js';\nimport { solveLinearSystem } from './math.js';\nlet brokenDiagonalRendering_;\n\n/**\r\n * @type {Array<HTMLCanvasElement>}\r\n */\nexport const canvasPool = [];\n\n/**\r\n * This draws a small triangle into a canvas by setting the triangle as the clip region\r\n * and then drawing a (too large) rectangle\r\n *\r\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\r\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\r\n * @param {number} v1 The y-coordinate of the second point.\r\n * @param {number} u2 The x-coordinate of the third point.\r\n * @param {number} v2 The y-coordinate of the third point.\r\n */\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n\n/**\r\n * Given the data from getImageData, see if the right values appear at the provided offset.\r\n * Returns true if either the color or transparency is off\r\n *\r\n * @param {Uint8ClampedArray} data The data returned from getImageData\r\n * @param {number} offset The pixel offset from the start of data.\r\n * @return {boolean} true if the diagonal rendering is broken\r\n */\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return Math.abs(data[offset * 4] - 210) > 2 || Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2;\n}\n\n/**\r\n * Determines if the current browser configuration can render triangular clip regions correctly.\r\n * This value is cached so the function is only expensive the first time called.\r\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\r\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\r\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\r\n * running, but lets hope not.\r\n *\r\n * @return {boolean} true if the Diagonal Rendering is broken.\r\n */\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    const ctx = createCanvasContext2D(6, 6, canvasPool);\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    const data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ = verifyBrokenDiagonalRendering(data, 0) || verifyBrokenDiagonalRendering(data, 4) || verifyBrokenDiagonalRendering(data, 8);\n    releaseCanvas(ctx);\n    canvasPool.push(ctx.canvas);\n  }\n  return brokenDiagonalRendering_;\n}\n\n/**\r\n * Calculates ideal resolution to use from the source in order to achieve\r\n * pixel mapping as close as possible to 1:1 during reprojection.\r\n * The resolution is calculated regardless of what resolutions\r\n * are actually available in the dataset (TileGrid, Image, ...).\r\n *\r\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\r\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\r\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\r\n * @param {number} targetResolution Target resolution.\r\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\r\n */\nexport function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\n\n  // calculate the ideal resolution of the source data\n  let sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  }\n\n  // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n  const sourceExtent = sourceProj.getExtent();\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    const compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) / sourceResolution;\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n  return sourceResolution;\n}\n\n/**\r\n * Calculates ideal resolution to use from the source in order to achieve\r\n * pixel mapping as close as possible to 1:1 during reprojection.\r\n * The resolution is calculated regardless of what resolutions\r\n * are actually available in the dataset (TileGrid, Image, ...).\r\n *\r\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\r\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\r\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\r\n * @param {number} targetResolution Target resolution.\r\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\r\n */\nexport function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {\n  const targetCenter = getCenter(targetExtent);\n  let sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n  return sourceResolution;\n}\n\n/**\r\n * @typedef {Object} ImageExtent\r\n * @property {import(\"./extent.js\").Extent} extent Extent.\r\n * @property {import(\"./extent.js\").Extent} [clipExtent] Clip extent.\r\n * @property {import('./DataTile.js').ImageLike} image Image.\r\n */\n\n/**\r\n * Renders the source data into new canvas based on the triangulation.\r\n *\r\n * @param {number} width Width of the canvas.\r\n * @param {number} height Height of the canvas.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @param {number} sourceResolution Source resolution.\r\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\r\n * @param {number} targetResolution Target resolution.\r\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\r\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\r\n * @param {Array<ImageExtent>} sources Array of sources.\r\n * @param {number} gutter Gutter of the sources.\r\n * @param {boolean} [renderEdges] Render reprojection edges.\r\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\r\n * @param {boolean} [drawSingle] Draw single source images directly without stitchContext.\r\n * @param {boolean} [clipExtent] Clip stitchContext to sourceExtent.\r\n * @return {HTMLCanvasElement} Canvas with reprojected data.\r\n */\nexport function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, renderEdges, interpolate, drawSingle, clipExtent) {\n  const context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height), canvasPool);\n  if (!interpolate) {\n    context.imageSmoothingEnabled = false;\n  }\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n  context.scale(pixelRatio, pixelRatio);\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n  context.globalCompositeOperation = 'lighter';\n  const sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n  let stitchContext;\n  const stitchScale = pixelRatio / sourceResolution;\n  // Round up Float32 scale values to prevent interpolation in Firefox.\n  const inverseScale = (interpolate ? 1 : 1 + Math.pow(2, -24)) / stitchScale;\n  if (!drawSingle || sources.length !== 1 || gutter !== 0) {\n    stitchContext = createCanvasContext2D(Math.round(getWidth(sourceDataExtent) * stitchScale), Math.round(getHeight(sourceDataExtent) * stitchScale), canvasPool);\n    if (!interpolate) {\n      stitchContext.imageSmoothingEnabled = false;\n    }\n    if (sourceExtent && clipExtent) {\n      const xPos = (sourceExtent[0] - sourceDataExtent[0]) * stitchScale;\n      const yPos = -(sourceExtent[3] - sourceDataExtent[3]) * stitchScale;\n      const width = getWidth(sourceExtent) * stitchScale;\n      const height = getHeight(sourceExtent) * stitchScale;\n      stitchContext.rect(xPos, yPos, width, height);\n      stitchContext.clip();\n    }\n    sources.forEach(function (src, i, arr) {\n      // This test should never fail -- but it does. Need to find a fix the upstream condition\n      if (src.image.width > 0 && src.image.height > 0) {\n        if (src.clipExtent) {\n          stitchContext.save();\n          const xPos = (src.clipExtent[0] - sourceDataExtent[0]) * stitchScale;\n          const yPos = -(src.clipExtent[3] - sourceDataExtent[3]) * stitchScale;\n          const width = getWidth(src.clipExtent) * stitchScale;\n          const height = getHeight(src.clipExtent) * stitchScale;\n          stitchContext.rect(interpolate ? xPos : Math.round(xPos), interpolate ? yPos : Math.round(yPos), interpolate ? width : Math.round(xPos + width) - Math.round(xPos), interpolate ? height : Math.round(yPos + height) - Math.round(yPos));\n          stitchContext.clip();\n        }\n        const xPos = (src.extent[0] - sourceDataExtent[0]) * stitchScale;\n        const yPos = -(src.extent[3] - sourceDataExtent[3]) * stitchScale;\n        const srcWidth = getWidth(src.extent) * stitchScale;\n        const srcHeight = getHeight(src.extent) * stitchScale;\n        stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, interpolate ? xPos : Math.round(xPos), interpolate ? yPos : Math.round(yPos), interpolate ? srcWidth : Math.round(xPos + srcWidth) - Math.round(xPos), interpolate ? srcHeight : Math.round(yPos + srcHeight) - Math.round(yPos));\n        if (src.clipExtent) {\n          stitchContext.restore();\n        }\n      }\n    });\n  }\n  const targetTopLeft = getTopLeft(targetExtent);\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\r\n     * Resulting matrix can be used to transform coordinate\r\n     * from `sourceProjection` to destination pixels.\r\n     *\r\n     * To optimize number of context calls and increase numerical stability,\r\n     * we also do the following operations:\r\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\r\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\r\n     *\r\n     * Src points: xi, yi\r\n     * Dst points: ui, vi\r\n     * Affine coefficients: aij\r\n     *\r\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\r\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\r\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\r\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\r\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\r\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\r\n     */\n    const source = triangle.source;\n    const target = triangle.target;\n    let x0 = source[0][0],\n      y0 = source[0][1];\n    let x1 = source[1][0],\n      y1 = source[1][1];\n    let x2 = source[2][0],\n      y2 = source[2][1];\n    // Make sure that everything is on pixel boundaries\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    const v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    const v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    const v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);\n\n    // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n    const sourceNumericalShiftX = x0;\n    const sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n    const augmentedMatrix = [[x1, y1, 0, 0, u1 - u0], [x2, y2, 0, 0, u2 - u0], [0, 0, x1, y1, v1 - v0], [0, 0, x2, y2, v2 - v0]];\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\n    if (!affineCoefs) {\n      return;\n    }\n    context.save();\n    context.beginPath();\n    if (isBrokenDiagonalRendering() || !interpolate) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1);\n      // This is the diagonal line. Do it in 4 steps\n      const steps = 4;\n      const ud = u0 - u1;\n      const vd = v0 - v1;\n      for (let step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound(step * vd / (steps - 1)));\n        // Go vertically\n        if (step != steps - 1) {\n          context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound((step + 1) * vd / (steps - 1)));\n        }\n      }\n      // We are almost at u0r, v0r\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n    context.clip();\n    context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);\n    context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);\n    let image;\n    if (stitchContext) {\n      image = stitchContext.canvas;\n      context.scale(inverseScale, -inverseScale);\n    } else {\n      const source = sources[0];\n      const extent = source.extent;\n      image = source.image;\n      context.scale(getWidth(extent) / image.width, -getHeight(extent) / image.height);\n    }\n    context.drawImage(image, 0, 0);\n    context.restore();\n  });\n  if (stitchContext) {\n    releaseCanvas(stitchContext);\n    canvasPool.push(stitchContext.canvas);\n  }\n  if (renderEdges) {\n    context.save();\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      const target = triangle.target;\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n    context.restore();\n  }\n  return context.canvas;\n}","map":{"version":3,"names":["containsCoordinate","createEmpty","extend","forEachCorner","getCenter","getHeight","getTopLeft","getWidth","createCanvasContext2D","releaseCanvas","getPointResolution","transform","solveLinearSystem","brokenDiagonalRendering_","canvasPool","drawTestTriangle","ctx","u1","v1","u2","v2","beginPath","moveTo","lineTo","closePath","save","clip","fillRect","Math","max","restore","verifyBrokenDiagonalRendering","data","offset","abs","isBrokenDiagonalRendering","undefined","globalCompositeOperation","fillStyle","getImageData","push","canvas","calculateSourceResolution","sourceProj","targetProj","targetCenter","targetResolution","sourceCenter","sourceResolution","targetMetersPerUnit","getMetersPerUnit","sourceMetersPerUnit","sourceExtent","getExtent","compensationFactor","isFinite","calculateSourceExtentResolution","targetExtent","corner","render","width","height","pixelRatio","triangulation","sources","gutter","renderEdges","interpolate","drawSingle","clipExtent","context","round","imageSmoothingEnabled","length","scale","pixelRound","value","sourceDataExtent","forEach","src","i","arr","extent","stitchContext","stitchScale","inverseScale","pow","xPos","yPos","rect","image","srcWidth","srcHeight","drawImage","targetTopLeft","getTriangles","triangle","source","target","x0","y0","x1","y1","x2","y2","u0","v0","sourceNumericalShiftX","sourceNumericalShiftY","augmentedMatrix","affineCoefs","steps","ud","vd","step","translate","strokeStyle","lineWidth","stroke"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/reproj.js"],"sourcesContent":["/**\r\n * @module ol/reproj\r\n */\r\nimport {\r\n  containsCoordinate,\r\n  createEmpty,\r\n  extend,\r\n  forEachCorner,\r\n  getCenter,\r\n  getHeight,\r\n  getTopLeft,\r\n  getWidth,\r\n} from './extent.js';\r\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\r\nimport {getPointResolution, transform} from './proj.js';\r\nimport {solveLinearSystem} from './math.js';\r\n\r\nlet brokenDiagonalRendering_;\r\n\r\n/**\r\n * @type {Array<HTMLCanvasElement>}\r\n */\r\nexport const canvasPool = [];\r\n\r\n/**\r\n * This draws a small triangle into a canvas by setting the triangle as the clip region\r\n * and then drawing a (too large) rectangle\r\n *\r\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\r\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\r\n * @param {number} v1 The y-coordinate of the second point.\r\n * @param {number} u2 The x-coordinate of the third point.\r\n * @param {number} v2 The y-coordinate of the third point.\r\n */\r\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\r\n  ctx.beginPath();\r\n  ctx.moveTo(0, 0);\r\n  ctx.lineTo(u1, v1);\r\n  ctx.lineTo(u2, v2);\r\n  ctx.closePath();\r\n  ctx.save();\r\n  ctx.clip();\r\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\r\n  ctx.restore();\r\n}\r\n\r\n/**\r\n * Given the data from getImageData, see if the right values appear at the provided offset.\r\n * Returns true if either the color or transparency is off\r\n *\r\n * @param {Uint8ClampedArray} data The data returned from getImageData\r\n * @param {number} offset The pixel offset from the start of data.\r\n * @return {boolean} true if the diagonal rendering is broken\r\n */\r\nfunction verifyBrokenDiagonalRendering(data, offset) {\r\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\r\n  return (\r\n    Math.abs(data[offset * 4] - 210) > 2 ||\r\n    Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2\r\n  );\r\n}\r\n\r\n/**\r\n * Determines if the current browser configuration can render triangular clip regions correctly.\r\n * This value is cached so the function is only expensive the first time called.\r\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\r\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\r\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\r\n * running, but lets hope not.\r\n *\r\n * @return {boolean} true if the Diagonal Rendering is broken.\r\n */\r\nfunction isBrokenDiagonalRendering() {\r\n  if (brokenDiagonalRendering_ === undefined) {\r\n    const ctx = createCanvasContext2D(6, 6, canvasPool);\r\n    ctx.globalCompositeOperation = 'lighter';\r\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\r\n    drawTestTriangle(ctx, 4, 5, 4, 0);\r\n    drawTestTriangle(ctx, 4, 5, 0, 5);\r\n    const data = ctx.getImageData(0, 0, 3, 3).data;\r\n    brokenDiagonalRendering_ =\r\n      verifyBrokenDiagonalRendering(data, 0) ||\r\n      verifyBrokenDiagonalRendering(data, 4) ||\r\n      verifyBrokenDiagonalRendering(data, 8);\r\n    releaseCanvas(ctx);\r\n    canvasPool.push(ctx.canvas);\r\n  }\r\n\r\n  return brokenDiagonalRendering_;\r\n}\r\n\r\n/**\r\n * Calculates ideal resolution to use from the source in order to achieve\r\n * pixel mapping as close as possible to 1:1 during reprojection.\r\n * The resolution is calculated regardless of what resolutions\r\n * are actually available in the dataset (TileGrid, Image, ...).\r\n *\r\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\r\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\r\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\r\n * @param {number} targetResolution Target resolution.\r\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\r\n */\r\nexport function calculateSourceResolution(\r\n  sourceProj,\r\n  targetProj,\r\n  targetCenter,\r\n  targetResolution,\r\n) {\r\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\r\n\r\n  // calculate the ideal resolution of the source data\r\n  let sourceResolution = getPointResolution(\r\n    targetProj,\r\n    targetResolution,\r\n    targetCenter,\r\n  );\r\n\r\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\r\n  if (targetMetersPerUnit !== undefined) {\r\n    sourceResolution *= targetMetersPerUnit;\r\n  }\r\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\r\n  if (sourceMetersPerUnit !== undefined) {\r\n    sourceResolution /= sourceMetersPerUnit;\r\n  }\r\n\r\n  // Based on the projection properties, the point resolution at the specified\r\n  // coordinates may be slightly different. We need to reverse-compensate this\r\n  // in order to achieve optimal results.\r\n\r\n  const sourceExtent = sourceProj.getExtent();\r\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\r\n    const compensationFactor =\r\n      getPointResolution(sourceProj, sourceResolution, sourceCenter) /\r\n      sourceResolution;\r\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\r\n      sourceResolution /= compensationFactor;\r\n    }\r\n  }\r\n\r\n  return sourceResolution;\r\n}\r\n\r\n/**\r\n * Calculates ideal resolution to use from the source in order to achieve\r\n * pixel mapping as close as possible to 1:1 during reprojection.\r\n * The resolution is calculated regardless of what resolutions\r\n * are actually available in the dataset (TileGrid, Image, ...).\r\n *\r\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\r\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\r\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\r\n * @param {number} targetResolution Target resolution.\r\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\r\n */\r\nexport function calculateSourceExtentResolution(\r\n  sourceProj,\r\n  targetProj,\r\n  targetExtent,\r\n  targetResolution,\r\n) {\r\n  const targetCenter = getCenter(targetExtent);\r\n  let sourceResolution = calculateSourceResolution(\r\n    sourceProj,\r\n    targetProj,\r\n    targetCenter,\r\n    targetResolution,\r\n  );\r\n\r\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\r\n    forEachCorner(targetExtent, function (corner) {\r\n      sourceResolution = calculateSourceResolution(\r\n        sourceProj,\r\n        targetProj,\r\n        corner,\r\n        targetResolution,\r\n      );\r\n      return isFinite(sourceResolution) && sourceResolution > 0;\r\n    });\r\n  }\r\n\r\n  return sourceResolution;\r\n}\r\n\r\n/**\r\n * @typedef {Object} ImageExtent\r\n * @property {import(\"./extent.js\").Extent} extent Extent.\r\n * @property {import(\"./extent.js\").Extent} [clipExtent] Clip extent.\r\n * @property {import('./DataTile.js').ImageLike} image Image.\r\n */\r\n\r\n/**\r\n * Renders the source data into new canvas based on the triangulation.\r\n *\r\n * @param {number} width Width of the canvas.\r\n * @param {number} height Height of the canvas.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @param {number} sourceResolution Source resolution.\r\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\r\n * @param {number} targetResolution Target resolution.\r\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\r\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\r\n * @param {Array<ImageExtent>} sources Array of sources.\r\n * @param {number} gutter Gutter of the sources.\r\n * @param {boolean} [renderEdges] Render reprojection edges.\r\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\r\n * @param {boolean} [drawSingle] Draw single source images directly without stitchContext.\r\n * @param {boolean} [clipExtent] Clip stitchContext to sourceExtent.\r\n * @return {HTMLCanvasElement} Canvas with reprojected data.\r\n */\r\nexport function render(\r\n  width,\r\n  height,\r\n  pixelRatio,\r\n  sourceResolution,\r\n  sourceExtent,\r\n  targetResolution,\r\n  targetExtent,\r\n  triangulation,\r\n  sources,\r\n  gutter,\r\n  renderEdges,\r\n  interpolate,\r\n  drawSingle,\r\n  clipExtent,\r\n) {\r\n  const context = createCanvasContext2D(\r\n    Math.round(pixelRatio * width),\r\n    Math.round(pixelRatio * height),\r\n    canvasPool,\r\n  );\r\n\r\n  if (!interpolate) {\r\n    context.imageSmoothingEnabled = false;\r\n  }\r\n\r\n  if (sources.length === 0) {\r\n    return context.canvas;\r\n  }\r\n\r\n  context.scale(pixelRatio, pixelRatio);\r\n\r\n  function pixelRound(value) {\r\n    return Math.round(value * pixelRatio) / pixelRatio;\r\n  }\r\n\r\n  context.globalCompositeOperation = 'lighter';\r\n\r\n  const sourceDataExtent = createEmpty();\r\n  sources.forEach(function (src, i, arr) {\r\n    extend(sourceDataExtent, src.extent);\r\n  });\r\n\r\n  let stitchContext;\r\n  const stitchScale = pixelRatio / sourceResolution;\r\n  // Round up Float32 scale values to prevent interpolation in Firefox.\r\n  const inverseScale = (interpolate ? 1 : 1 + Math.pow(2, -24)) / stitchScale;\r\n\r\n  if (!drawSingle || sources.length !== 1 || gutter !== 0) {\r\n    stitchContext = createCanvasContext2D(\r\n      Math.round(getWidth(sourceDataExtent) * stitchScale),\r\n      Math.round(getHeight(sourceDataExtent) * stitchScale),\r\n      canvasPool,\r\n    );\r\n\r\n    if (!interpolate) {\r\n      stitchContext.imageSmoothingEnabled = false;\r\n    }\r\n    if (sourceExtent && clipExtent) {\r\n      const xPos = (sourceExtent[0] - sourceDataExtent[0]) * stitchScale;\r\n      const yPos = -(sourceExtent[3] - sourceDataExtent[3]) * stitchScale;\r\n      const width = getWidth(sourceExtent) * stitchScale;\r\n      const height = getHeight(sourceExtent) * stitchScale;\r\n      stitchContext.rect(xPos, yPos, width, height);\r\n      stitchContext.clip();\r\n    }\r\n\r\n    sources.forEach(function (src, i, arr) {\r\n      // This test should never fail -- but it does. Need to find a fix the upstream condition\r\n      if (src.image.width > 0 && src.image.height > 0) {\r\n        if (src.clipExtent) {\r\n          stitchContext.save();\r\n          const xPos = (src.clipExtent[0] - sourceDataExtent[0]) * stitchScale;\r\n          const yPos = -(src.clipExtent[3] - sourceDataExtent[3]) * stitchScale;\r\n          const width = getWidth(src.clipExtent) * stitchScale;\r\n          const height = getHeight(src.clipExtent) * stitchScale;\r\n          stitchContext.rect(\r\n            interpolate ? xPos : Math.round(xPos),\r\n            interpolate ? yPos : Math.round(yPos),\r\n            interpolate ? width : Math.round(xPos + width) - Math.round(xPos),\r\n            interpolate ? height : Math.round(yPos + height) - Math.round(yPos),\r\n          );\r\n          stitchContext.clip();\r\n        }\r\n\r\n        const xPos = (src.extent[0] - sourceDataExtent[0]) * stitchScale;\r\n        const yPos = -(src.extent[3] - sourceDataExtent[3]) * stitchScale;\r\n        const srcWidth = getWidth(src.extent) * stitchScale;\r\n        const srcHeight = getHeight(src.extent) * stitchScale;\r\n        stitchContext.drawImage(\r\n          src.image,\r\n          gutter,\r\n          gutter,\r\n          src.image.width - 2 * gutter,\r\n          src.image.height - 2 * gutter,\r\n          interpolate ? xPos : Math.round(xPos),\r\n          interpolate ? yPos : Math.round(yPos),\r\n          interpolate\r\n            ? srcWidth\r\n            : Math.round(xPos + srcWidth) - Math.round(xPos),\r\n          interpolate\r\n            ? srcHeight\r\n            : Math.round(yPos + srcHeight) - Math.round(yPos),\r\n        );\r\n\r\n        if (src.clipExtent) {\r\n          stitchContext.restore();\r\n        }\r\n      }\r\n    });\r\n  }\r\n  const targetTopLeft = getTopLeft(targetExtent);\r\n\r\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\r\n    /* Calculate affine transform (src -> dst)\r\n     * Resulting matrix can be used to transform coordinate\r\n     * from `sourceProjection` to destination pixels.\r\n     *\r\n     * To optimize number of context calls and increase numerical stability,\r\n     * we also do the following operations:\r\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\r\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\r\n     *\r\n     * Src points: xi, yi\r\n     * Dst points: ui, vi\r\n     * Affine coefficients: aij\r\n     *\r\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\r\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\r\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\r\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\r\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\r\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\r\n     */\r\n    const source = triangle.source;\r\n    const target = triangle.target;\r\n    let x0 = source[0][0],\r\n      y0 = source[0][1];\r\n    let x1 = source[1][0],\r\n      y1 = source[1][1];\r\n    let x2 = source[2][0],\r\n      y2 = source[2][1];\r\n    // Make sure that everything is on pixel boundaries\r\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\r\n    const v0 = pixelRound(\r\n      -(target[0][1] - targetTopLeft[1]) / targetResolution,\r\n    );\r\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\r\n    const v1 = pixelRound(\r\n      -(target[1][1] - targetTopLeft[1]) / targetResolution,\r\n    );\r\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\r\n    const v2 = pixelRound(\r\n      -(target[2][1] - targetTopLeft[1]) / targetResolution,\r\n    );\r\n\r\n    // Shift all the source points to improve numerical stability\r\n    // of all the subsequent calculations. The [x0, y0] is used here.\r\n    // This is also used to simplify the linear system.\r\n    const sourceNumericalShiftX = x0;\r\n    const sourceNumericalShiftY = y0;\r\n    x0 = 0;\r\n    y0 = 0;\r\n    x1 -= sourceNumericalShiftX;\r\n    y1 -= sourceNumericalShiftY;\r\n    x2 -= sourceNumericalShiftX;\r\n    y2 -= sourceNumericalShiftY;\r\n\r\n    const augmentedMatrix = [\r\n      [x1, y1, 0, 0, u1 - u0],\r\n      [x2, y2, 0, 0, u2 - u0],\r\n      [0, 0, x1, y1, v1 - v0],\r\n      [0, 0, x2, y2, v2 - v0],\r\n    ];\r\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\r\n    if (!affineCoefs) {\r\n      return;\r\n    }\r\n\r\n    context.save();\r\n    context.beginPath();\r\n\r\n    if (isBrokenDiagonalRendering() || !interpolate) {\r\n      // Make sure that all lines are horizontal or vertical\r\n      context.moveTo(u1, v1);\r\n      // This is the diagonal line. Do it in 4 steps\r\n      const steps = 4;\r\n      const ud = u0 - u1;\r\n      const vd = v0 - v1;\r\n      for (let step = 0; step < steps; step++) {\r\n        // Go horizontally\r\n        context.lineTo(\r\n          u1 + pixelRound(((step + 1) * ud) / steps),\r\n          v1 + pixelRound((step * vd) / (steps - 1)),\r\n        );\r\n        // Go vertically\r\n        if (step != steps - 1) {\r\n          context.lineTo(\r\n            u1 + pixelRound(((step + 1) * ud) / steps),\r\n            v1 + pixelRound(((step + 1) * vd) / (steps - 1)),\r\n          );\r\n        }\r\n      }\r\n      // We are almost at u0r, v0r\r\n      context.lineTo(u2, v2);\r\n    } else {\r\n      context.moveTo(u1, v1);\r\n      context.lineTo(u0, v0);\r\n      context.lineTo(u2, v2);\r\n    }\r\n\r\n    context.clip();\r\n\r\n    context.transform(\r\n      affineCoefs[0],\r\n      affineCoefs[2],\r\n      affineCoefs[1],\r\n      affineCoefs[3],\r\n      u0,\r\n      v0,\r\n    );\r\n\r\n    context.translate(\r\n      sourceDataExtent[0] - sourceNumericalShiftX,\r\n      sourceDataExtent[3] - sourceNumericalShiftY,\r\n    );\r\n\r\n    let image;\r\n    if (stitchContext) {\r\n      image = stitchContext.canvas;\r\n      context.scale(inverseScale, -inverseScale);\r\n    } else {\r\n      const source = sources[0];\r\n      const extent = source.extent;\r\n      image = source.image;\r\n      context.scale(\r\n        getWidth(extent) / image.width,\r\n        -getHeight(extent) / image.height,\r\n      );\r\n    }\r\n\r\n    context.drawImage(image, 0, 0);\r\n    context.restore();\r\n  });\r\n\r\n  if (stitchContext) {\r\n    releaseCanvas(stitchContext);\r\n    canvasPool.push(stitchContext.canvas);\r\n  }\r\n\r\n  if (renderEdges) {\r\n    context.save();\r\n\r\n    context.globalCompositeOperation = 'source-over';\r\n    context.strokeStyle = 'black';\r\n    context.lineWidth = 1;\r\n\r\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\r\n      const target = triangle.target;\r\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\r\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\r\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\r\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\r\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\r\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\r\n\r\n      context.beginPath();\r\n      context.moveTo(u1, v1);\r\n      context.lineTo(u0, v0);\r\n      context.lineTo(u2, v2);\r\n      context.closePath();\r\n      context.stroke();\r\n    });\r\n\r\n    context.restore();\r\n  }\r\n  return context.canvas;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}