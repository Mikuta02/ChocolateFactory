{"ast":null,"code":"/**\r\n * @module ol/rotationconstraint\r\n */\nimport { toRadians } from './math.js';\n\n/**\r\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\r\n */\n\n/**\r\n * @param {number|undefined} rotation Rotation.\r\n * @return {number|undefined} Rotation.\r\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  }\n  return undefined;\n}\n\n/**\r\n * @param {number|undefined} rotation Rotation.\r\n * @return {number|undefined} Rotation.\r\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  }\n  return undefined;\n}\n\n/**\r\n * @param {number} n N.\r\n * @return {Type} Rotation constraint.\r\n */\nexport function createSnapToN(n) {\n  const theta = 2 * Math.PI / n;\n  return (\n    /**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Rotation.\r\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\r\n * @param {number} [tolerance] Tolerance.\r\n * @return {Type} Rotation constraint.\r\n */\nexport function createSnapToZero(tolerance) {\n  const t = tolerance === undefined ? toRadians(5) : tolerance;\n  return (\n    /**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Rotation.\r\n     */\n    function (rotation, isMoving) {\n      if (isMoving || rotation === undefined) {\n        return rotation;\n      }\n      if (Math.abs(rotation) <= t) {\n        return 0;\n      }\n      return rotation;\n    }\n  );\n}","map":{"version":3,"names":["toRadians","disable","rotation","undefined","none","createSnapToN","n","theta","Math","PI","isMoving","floor","createSnapToZero","tolerance","t","abs"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/rotationconstraint.js"],"sourcesContent":["/**\r\n * @module ol/rotationconstraint\r\n */\r\nimport {toRadians} from './math.js';\r\n\r\n/**\r\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\r\n */\r\n\r\n/**\r\n * @param {number|undefined} rotation Rotation.\r\n * @return {number|undefined} Rotation.\r\n */\r\nexport function disable(rotation) {\r\n  if (rotation !== undefined) {\r\n    return 0;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {number|undefined} rotation Rotation.\r\n * @return {number|undefined} Rotation.\r\n */\r\nexport function none(rotation) {\r\n  if (rotation !== undefined) {\r\n    return rotation;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {number} n N.\r\n * @return {Type} Rotation constraint.\r\n */\r\nexport function createSnapToN(n) {\r\n  const theta = (2 * Math.PI) / n;\r\n  return (\r\n    /**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Rotation.\r\n     */\r\n    function (rotation, isMoving) {\r\n      if (isMoving) {\r\n        return rotation;\r\n      }\r\n\r\n      if (rotation !== undefined) {\r\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\r\n        return rotation;\r\n      }\r\n      return undefined;\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {number} [tolerance] Tolerance.\r\n * @return {Type} Rotation constraint.\r\n */\r\nexport function createSnapToZero(tolerance) {\r\n  const t = tolerance === undefined ? toRadians(5) : tolerance;\r\n  return (\r\n    /**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Rotation.\r\n     */\r\n    function (rotation, isMoving) {\r\n      if (isMoving || rotation === undefined) {\r\n        return rotation;\r\n      }\r\n\r\n      if (Math.abs(rotation) <= t) {\r\n        return 0;\r\n      }\r\n      return rotation;\r\n    }\r\n  );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,SAAS,QAAO,WAAW;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,QAAQ,EAAE;EAChC,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IAC1B,OAAO,CAAC;EACV;EACA,OAAOA,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACF,QAAQ,EAAE;EAC7B,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IAC1B,OAAOD,QAAQ;EACjB;EACA,OAAOC,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASE,aAAaA,CAACC,CAAC,EAAE;EAC/B,MAAMC,KAAK,GAAI,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAIH,CAAC;EAC/B;IACE;AACJ;AACA;AACA;AACA;IACI,UAAUJ,QAAQ,EAAEQ,QAAQ,EAAE;MAC5B,IAAIA,QAAQ,EAAE;QACZ,OAAOR,QAAQ;MACjB;MAEA,IAAIA,QAAQ,KAAKC,SAAS,EAAE;QAC1BD,QAAQ,GAAGM,IAAI,CAACG,KAAK,CAACT,QAAQ,GAAGK,KAAK,GAAG,GAAG,CAAC,GAAGA,KAAK;QACrD,OAAOL,QAAQ;MACjB;MACA,OAAOC,SAAS;IAClB;EAAC;AAEL;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASS,gBAAgBA,CAACC,SAAS,EAAE;EAC1C,MAAMC,CAAC,GAAGD,SAAS,KAAKV,SAAS,GAAGH,SAAS,CAAC,CAAC,CAAC,GAAGa,SAAS;EAC5D;IACE;AACJ;AACA;AACA;AACA;IACI,UAAUX,QAAQ,EAAEQ,QAAQ,EAAE;MAC5B,IAAIA,QAAQ,IAAIR,QAAQ,KAAKC,SAAS,EAAE;QACtC,OAAOD,QAAQ;MACjB;MAEA,IAAIM,IAAI,CAACO,GAAG,CAACb,QAAQ,CAAC,IAAIY,CAAC,EAAE;QAC3B,OAAO,CAAC;MACV;MACA,OAAOZ,QAAQ;IACjB;EAAC;AAEL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}