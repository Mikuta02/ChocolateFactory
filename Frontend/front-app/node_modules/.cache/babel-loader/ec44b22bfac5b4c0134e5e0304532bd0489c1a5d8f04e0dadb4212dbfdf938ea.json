{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @module ol/render/canvas\r\n */\nimport BaseObject from '../Object.js';\nimport { WORKER_OFFSCREEN_CANVAS } from '../has.js';\nimport { clear } from '../obj.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { getFontParameters } from '../css.js';\n\n/**\r\n * @typedef {'Circle' | 'Image' | 'LineString' | 'Polygon' | 'Text' | 'Default'} BuilderType\r\n */\n\n/**\r\n * @typedef {Object} FillState\r\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle FillStyle.\r\n */\n\n/**\r\n * @typedef Label\r\n * @property {number} width Width.\r\n * @property {number} height Height.\r\n * @property {Array<string|number>} contextInstructions ContextInstructions.\r\n */\n\n/**\r\n * @typedef {Object} FillStrokeState\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle] Current FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle] Current StrokeStyle.\r\n * @property {CanvasLineCap} [currentLineCap] Current LineCap.\r\n * @property {Array<number>} currentLineDash Current LineDash.\r\n * @property {number} [currentLineDashOffset] Current LineDashOffset.\r\n * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.\r\n * @property {number} [currentLineWidth] Current LineWidth.\r\n * @property {number} [currentMiterLimit] Current MiterLimit.\r\n * @property {number} [lastStroke] Last stroke.\r\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle] FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\r\n * @property {CanvasLineCap} [lineCap] LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} [lineDashOffset] LineDashOffset.\r\n * @property {CanvasLineJoin} [lineJoin] LineJoin.\r\n * @property {number} [lineWidth] LineWidth.\r\n * @property {number} [miterLimit] MiterLimit.\r\n * @property {number} [fillPatternScale] Fill pattern scale.\r\n */\n\n/**\r\n * @typedef {Object} StrokeState\r\n * @property {CanvasLineCap} lineCap LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} lineDashOffset LineDashOffset.\r\n * @property {CanvasLineJoin} lineJoin LineJoin.\r\n * @property {number} lineWidth LineWidth.\r\n * @property {number} miterLimit MiterLimit.\r\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle StrokeStyle.\r\n */\n\n/**\r\n * @typedef {Object} TextState\r\n * @property {string} font Font.\r\n * @property {CanvasTextAlign} [textAlign] TextAlign.\r\n * @property {number} [repeat] Repeat.\r\n * @property {import(\"../style/Text.js\").TextJustify} [justify] Justify.\r\n * @property {CanvasTextBaseline} textBaseline TextBaseline.\r\n * @property {import(\"../style/Text.js\").TextPlacement} [placement] Placement.\r\n * @property {number} [maxAngle] MaxAngle.\r\n * @property {boolean} [overflow] Overflow.\r\n * @property {import(\"../style/Fill.js\").default} [backgroundFill] BackgroundFill.\r\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke] BackgroundStroke.\r\n * @property {import(\"../size.js\").Size} [scale] Scale.\r\n * @property {Array<number>} [padding] Padding.\r\n */\n\n/**\r\n * @typedef {Object} SerializableInstructions\r\n * @property {Array<*>} instructions The rendering instructions.\r\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\r\n * @property {Array<number>} coordinates The array of all coordinates.\r\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\r\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\r\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\r\n */\n\n/**\r\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\r\n */\n\n/**\r\n * @const\r\n * @type {string}\r\n */\nexport const defaultFont = '10px sans-serif';\n\n/**\r\n * @const\r\n * @type {string}\r\n */\nexport const defaultFillStyle = '#000';\n\n/**\r\n * @const\r\n * @type {CanvasLineCap}\r\n */\nexport const defaultLineCap = 'round';\n\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\nexport const defaultLineDash = [];\n\n/**\r\n * @const\r\n * @type {number}\r\n */\nexport const defaultLineDashOffset = 0;\n\n/**\r\n * @const\r\n * @type {CanvasLineJoin}\r\n */\nexport const defaultLineJoin = 'round';\n\n/**\r\n * @const\r\n * @type {number}\r\n */\nexport const defaultMiterLimit = 10;\n\n/**\r\n * @const\r\n * @type {import(\"../colorlike.js\").ColorLike}\r\n */\nexport const defaultStrokeStyle = '#000';\n\n/**\r\n * @const\r\n * @type {CanvasTextAlign}\r\n */\nexport const defaultTextAlign = 'center';\n\n/**\r\n * @const\r\n * @type {CanvasTextBaseline}\r\n */\nexport const defaultTextBaseline = 'middle';\n\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\nexport const defaultPadding = [0, 0, 0, 0];\n\n/**\r\n * @const\r\n * @type {number}\r\n */\nexport const defaultLineWidth = 1;\n\n/**\r\n * @type {BaseObject}\r\n */\nexport const checkedFonts = new BaseObject();\n\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\nlet measureContext = null;\n\n/**\r\n * @type {string}\r\n */\nlet measureFont;\n\n/**\r\n * @type {!Object<string, number>}\r\n */\nexport const textHeights = {};\n\n/**\r\n * Clears the label cache when a font becomes available.\r\n * @param {string} fontSpec CSS font spec.\r\n */\nexport const registerFont = function () {\n  const retries = 100;\n  const size = '32px ';\n  const referenceFonts = ['monospace', 'serif'];\n  const len = referenceFonts.length;\n  const text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\n  let interval, referenceWidth;\n\n  /**\r\n   * @param {string} fontStyle Css font-style\r\n   * @param {string} fontWeight Css font-weight\r\n   * @param {*} fontFamily Css font-family\r\n   * @return {boolean} Font with style and weight is available\r\n   */\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\n    let available = true;\n    for (let i = 0; i < len; ++i) {\n      const referenceFont = referenceFonts[i];\n      referenceWidth = measureTextWidth(fontStyle + ' ' + fontWeight + ' ' + size + referenceFont, text);\n      if (fontFamily != referenceFont) {\n        const width = measureTextWidth(fontStyle + ' ' + fontWeight + ' ' + size + fontFamily + ',' + referenceFont, text);\n        // If width and referenceWidth are the same, then the fallback was used\n        // instead of the font we wanted, so the font is not available.\n        available = available && width != referenceWidth;\n      }\n    }\n    if (available) {\n      return true;\n    }\n    return false;\n  }\n  function check() {\n    let done = true;\n    const fonts = checkedFonts.getKeys();\n    for (let i = 0, ii = fonts.length; i < ii; ++i) {\n      const font = fonts[i];\n      if (checkedFonts.get(font) < retries) {\n        if (isAvailable.apply(this, font.split('\\n'))) {\n          clear(textHeights);\n          // Make sure that loaded fonts are picked up by Safari\n          measureContext = null;\n          measureFont = undefined;\n          checkedFonts.set(font, retries);\n        } else {\n          checkedFonts.set(font, checkedFonts.get(font) + 1, true);\n          done = false;\n        }\n      }\n    }\n    if (done) {\n      clearInterval(interval);\n      interval = undefined;\n    }\n  }\n  return function (fontSpec) {\n    const font = getFontParameters(fontSpec);\n    if (!font) {\n      return;\n    }\n    const families = font.families;\n    for (let i = 0, ii = families.length; i < ii; ++i) {\n      const family = families[i];\n      const key = font.style + '\\n' + font.weight + '\\n' + family;\n      if (checkedFonts.get(key) === undefined) {\n        checkedFonts.set(key, retries, true);\n        if (!isAvailable(font.style, font.weight, family)) {\n          checkedFonts.set(key, 0, true);\n          if (interval === undefined) {\n            interval = setInterval(check, 32);\n          }\n        }\n      }\n    }\n  };\n}();\n\n/**\r\n * @param {string} font Font to use for measuring.\r\n * @return {import(\"../size.js\").Size} Measurement.\r\n */\nexport const measureTextHeight = function () {\n  /**\r\n   * @type {HTMLDivElement}\r\n   */\n  let measureElement;\n  return function (fontSpec) {\n    let height = textHeights[fontSpec];\n    if (height == undefined) {\n      if (WORKER_OFFSCREEN_CANVAS) {\n        const font = getFontParameters(fontSpec);\n        const metrics = measureText(fontSpec, 'Å½g');\n        const lineHeight = isNaN(Number(font.lineHeight)) ? 1.2 : Number(font.lineHeight);\n        height = lineHeight * (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\n      } else {\n        if (!measureElement) {\n          measureElement = document.createElement('div');\n          measureElement.innerHTML = 'M';\n          measureElement.style.minHeight = '0';\n          measureElement.style.maxHeight = 'none';\n          measureElement.style.height = 'auto';\n          measureElement.style.padding = '0';\n          measureElement.style.border = 'none';\n          measureElement.style.position = 'absolute';\n          measureElement.style.display = 'block';\n          measureElement.style.left = '-99999px';\n        }\n        measureElement.style.font = fontSpec;\n        document.body.appendChild(measureElement);\n        height = measureElement.offsetHeight;\n        document.body.removeChild(measureElement);\n      }\n      textHeights[fontSpec] = height;\n    }\n    return height;\n  };\n}();\n\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {TextMetrics} Text metrics.\r\n */\nfunction measureText(font, text) {\n  if (!measureContext) {\n    measureContext = createCanvasContext2D(1, 1);\n  }\n  if (font != measureFont) {\n    measureContext.font = font;\n    measureFont = measureContext.font;\n  }\n  return measureContext.measureText(text);\n}\n\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {number} Width.\r\n */\nexport function measureTextWidth(font, text) {\n  return measureText(font, text).width;\n}\n\n/**\r\n * Measure text width using a cache.\r\n * @param {string} font The font.\r\n * @param {string} text The text to measure.\r\n * @param {Object<string, number>} cache A lookup of cached widths by text.\r\n * @return {number} The text width.\r\n */\nexport function measureAndCacheTextWidth(font, text, cache) {\n  if (text in cache) {\n    return cache[text];\n  }\n  const width = text.split('\\n').reduce((prev, curr) => Math.max(prev, measureTextWidth(font, curr)), 0);\n  cache[text] = width;\n  return width;\n}\n\n/**\r\n * @param {TextState} baseStyle Base style.\r\n * @param {Array<string>} chunks Text chunks to measure.\r\n * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.\r\n */\nexport function getTextDimensions(baseStyle, chunks) {\n  const widths = [];\n  const heights = [];\n  const lineWidths = [];\n  let width = 0;\n  let lineWidth = 0;\n  let height = 0;\n  let lineHeight = 0;\n  for (let i = 0, ii = chunks.length; i <= ii; i += 2) {\n    const text = chunks[i];\n    if (text === '\\n' || i === ii) {\n      width = Math.max(width, lineWidth);\n      lineWidths.push(lineWidth);\n      lineWidth = 0;\n      height += lineHeight;\n      lineHeight = 0;\n      continue;\n    }\n    const font = chunks[i + 1] || baseStyle.font;\n    const currentWidth = measureTextWidth(font, text);\n    widths.push(currentWidth);\n    lineWidth += currentWidth;\n    const currentHeight = measureTextHeight(font);\n    heights.push(currentHeight);\n    lineHeight = Math.max(lineHeight, currentHeight);\n  }\n  return {\n    width,\n    height,\n    widths,\n    heights,\n    lineWidths\n  };\n}\n\n/**\r\n * @param {CanvasRenderingContext2D} context Context.\r\n * @param {number} rotation Rotation.\r\n * @param {number} offsetX X offset.\r\n * @param {number} offsetY Y offset.\r\n */\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\n  if (rotation !== 0) {\n    context.translate(offsetX, offsetY);\n    context.rotate(rotation);\n    context.translate(-offsetX, -offsetY);\n  }\n}\n\n/**\r\n * @param {CanvasRenderingContext2D|import(\"../render/canvas/ZIndexContext.js\").ZIndexContextProxy} context Context.\r\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\r\n * @param {number} opacity Opacity.\r\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\r\n * @param {number} originX Origin X.\r\n * @param {number} originY Origin Y.\r\n * @param {number} w Width.\r\n * @param {number} h Height.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {import(\"../size.js\").Size} scale Scale.\r\n */\nexport function drawImageOrLabel(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {\n  context.save();\n  if (opacity !== 1) {\n    if (context.globalAlpha === undefined) {\n      context.globalAlpha = context => context.globalAlpha *= opacity;\n    } else {\n      context.globalAlpha *= opacity;\n    }\n  }\n  if (transform) {\n    context.transform.apply(context, transform);\n  }\n  if ( /** @type {*} */labelOrImage.contextInstructions) {\n    // label\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    executeLabelInstructions( /** @type {Label} */labelOrImage, context);\n  } else if (scale[0] < 0 || scale[1] < 0) {\n    // flipped image\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    context.drawImage( /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */\n    labelOrImage, originX, originY, w, h, 0, 0, w, h);\n  } else {\n    // if image not flipped translate and scale can be avoided\n    context.drawImage( /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */\n    labelOrImage, originX, originY, w, h, x, y, w * scale[0], h * scale[1]);\n  }\n  context.restore();\n}\n\n/**\r\n * @param {Label} label Label.\r\n * @param {CanvasRenderingContext2D} context Context.\r\n */\nfunction executeLabelInstructions(label, context) {\n  const contextInstructions = label.contextInstructions;\n  for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {\n    if (Array.isArray(contextInstructions[i + 1])) {\n      context[contextInstructions[i]].apply(context, contextInstructions[i + 1]);\n    } else {\n      context[contextInstructions[i]] = contextInstructions[i + 1];\n    }\n  }\n}","map":{"version":3,"names":["BaseObject","WORKER_OFFSCREEN_CANVAS","clear","createCanvasContext2D","getFontParameters","defaultFont","defaultFillStyle","defaultLineCap","defaultLineDash","defaultLineDashOffset","defaultLineJoin","defaultMiterLimit","defaultStrokeStyle","defaultTextAlign","defaultTextBaseline","defaultPadding","defaultLineWidth","checkedFonts","measureContext","measureFont","textHeights","registerFont","retries","size","referenceFonts","len","length","text","interval","referenceWidth","isAvailable","fontStyle","fontWeight","fontFamily","available","i","referenceFont","measureTextWidth","width","check","done","fonts","getKeys","ii","font","get","apply","split","undefined","set","clearInterval","fontSpec","families","family","key","style","weight","setInterval","measureTextHeight","measureElement","height","metrics","measureText","lineHeight","isNaN","Number","actualBoundingBoxAscent","actualBoundingBoxDescent","document","createElement","innerHTML","minHeight","maxHeight","padding","border","position","display","left","body","appendChild","offsetHeight","removeChild","measureAndCacheTextWidth","cache","reduce","prev","curr","Math","max","getTextDimensions","baseStyle","chunks","widths","heights","lineWidths","lineWidth","push","currentWidth","currentHeight","rotateAtOffset","context","rotation","offsetX","offsetY","translate","rotate","drawImageOrLabel","transform","opacity","labelOrImage","originX","originY","w","h","x","y","scale","save","globalAlpha","contextInstructions","executeLabelInstructions","drawImage","restore","label","Array","isArray"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/render/canvas.js"],"sourcesContent":["/**\r\n * @module ol/render/canvas\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {WORKER_OFFSCREEN_CANVAS} from '../has.js';\r\nimport {clear} from '../obj.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {getFontParameters} from '../css.js';\r\n\r\n/**\r\n * @typedef {'Circle' | 'Image' | 'LineString' | 'Polygon' | 'Text' | 'Default'} BuilderType\r\n */\r\n\r\n/**\r\n * @typedef {Object} FillState\r\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle FillStyle.\r\n */\r\n\r\n/**\r\n * @typedef Label\r\n * @property {number} width Width.\r\n * @property {number} height Height.\r\n * @property {Array<string|number>} contextInstructions ContextInstructions.\r\n */\r\n\r\n/**\r\n * @typedef {Object} FillStrokeState\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle] Current FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle] Current StrokeStyle.\r\n * @property {CanvasLineCap} [currentLineCap] Current LineCap.\r\n * @property {Array<number>} currentLineDash Current LineDash.\r\n * @property {number} [currentLineDashOffset] Current LineDashOffset.\r\n * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.\r\n * @property {number} [currentLineWidth] Current LineWidth.\r\n * @property {number} [currentMiterLimit] Current MiterLimit.\r\n * @property {number} [lastStroke] Last stroke.\r\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle] FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\r\n * @property {CanvasLineCap} [lineCap] LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} [lineDashOffset] LineDashOffset.\r\n * @property {CanvasLineJoin} [lineJoin] LineJoin.\r\n * @property {number} [lineWidth] LineWidth.\r\n * @property {number} [miterLimit] MiterLimit.\r\n * @property {number} [fillPatternScale] Fill pattern scale.\r\n */\r\n\r\n/**\r\n * @typedef {Object} StrokeState\r\n * @property {CanvasLineCap} lineCap LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} lineDashOffset LineDashOffset.\r\n * @property {CanvasLineJoin} lineJoin LineJoin.\r\n * @property {number} lineWidth LineWidth.\r\n * @property {number} miterLimit MiterLimit.\r\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle StrokeStyle.\r\n */\r\n\r\n/**\r\n * @typedef {Object} TextState\r\n * @property {string} font Font.\r\n * @property {CanvasTextAlign} [textAlign] TextAlign.\r\n * @property {number} [repeat] Repeat.\r\n * @property {import(\"../style/Text.js\").TextJustify} [justify] Justify.\r\n * @property {CanvasTextBaseline} textBaseline TextBaseline.\r\n * @property {import(\"../style/Text.js\").TextPlacement} [placement] Placement.\r\n * @property {number} [maxAngle] MaxAngle.\r\n * @property {boolean} [overflow] Overflow.\r\n * @property {import(\"../style/Fill.js\").default} [backgroundFill] BackgroundFill.\r\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke] BackgroundStroke.\r\n * @property {import(\"../size.js\").Size} [scale] Scale.\r\n * @property {Array<number>} [padding] Padding.\r\n */\r\n\r\n/**\r\n * @typedef {Object} SerializableInstructions\r\n * @property {Array<*>} instructions The rendering instructions.\r\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\r\n * @property {Array<number>} coordinates The array of all coordinates.\r\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\r\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\r\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\r\n */\r\n\r\n/**\r\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const defaultFont = '10px sans-serif';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const defaultFillStyle = '#000';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasLineCap}\r\n */\r\nexport const defaultLineCap = 'round';\r\n\r\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\r\nexport const defaultLineDash = [];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultLineDashOffset = 0;\r\n\r\n/**\r\n * @const\r\n * @type {CanvasLineJoin}\r\n */\r\nexport const defaultLineJoin = 'round';\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultMiterLimit = 10;\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../colorlike.js\").ColorLike}\r\n */\r\nexport const defaultStrokeStyle = '#000';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasTextAlign}\r\n */\r\nexport const defaultTextAlign = 'center';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasTextBaseline}\r\n */\r\nexport const defaultTextBaseline = 'middle';\r\n\r\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\r\nexport const defaultPadding = [0, 0, 0, 0];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultLineWidth = 1;\r\n\r\n/**\r\n * @type {BaseObject}\r\n */\r\nexport const checkedFonts = new BaseObject();\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet measureContext = null;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nlet measureFont;\r\n\r\n/**\r\n * @type {!Object<string, number>}\r\n */\r\nexport const textHeights = {};\r\n\r\n/**\r\n * Clears the label cache when a font becomes available.\r\n * @param {string} fontSpec CSS font spec.\r\n */\r\nexport const registerFont = (function () {\r\n  const retries = 100;\r\n  const size = '32px ';\r\n  const referenceFonts = ['monospace', 'serif'];\r\n  const len = referenceFonts.length;\r\n  const text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\r\n  let interval, referenceWidth;\r\n\r\n  /**\r\n   * @param {string} fontStyle Css font-style\r\n   * @param {string} fontWeight Css font-weight\r\n   * @param {*} fontFamily Css font-family\r\n   * @return {boolean} Font with style and weight is available\r\n   */\r\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\r\n    let available = true;\r\n    for (let i = 0; i < len; ++i) {\r\n      const referenceFont = referenceFonts[i];\r\n      referenceWidth = measureTextWidth(\r\n        fontStyle + ' ' + fontWeight + ' ' + size + referenceFont,\r\n        text,\r\n      );\r\n      if (fontFamily != referenceFont) {\r\n        const width = measureTextWidth(\r\n          fontStyle +\r\n            ' ' +\r\n            fontWeight +\r\n            ' ' +\r\n            size +\r\n            fontFamily +\r\n            ',' +\r\n            referenceFont,\r\n          text,\r\n        );\r\n        // If width and referenceWidth are the same, then the fallback was used\r\n        // instead of the font we wanted, so the font is not available.\r\n        available = available && width != referenceWidth;\r\n      }\r\n    }\r\n    if (available) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function check() {\r\n    let done = true;\r\n    const fonts = checkedFonts.getKeys();\r\n    for (let i = 0, ii = fonts.length; i < ii; ++i) {\r\n      const font = fonts[i];\r\n      if (checkedFonts.get(font) < retries) {\r\n        if (isAvailable.apply(this, font.split('\\n'))) {\r\n          clear(textHeights);\r\n          // Make sure that loaded fonts are picked up by Safari\r\n          measureContext = null;\r\n          measureFont = undefined;\r\n          checkedFonts.set(font, retries);\r\n        } else {\r\n          checkedFonts.set(font, checkedFonts.get(font) + 1, true);\r\n          done = false;\r\n        }\r\n      }\r\n    }\r\n    if (done) {\r\n      clearInterval(interval);\r\n      interval = undefined;\r\n    }\r\n  }\r\n\r\n  return function (fontSpec) {\r\n    const font = getFontParameters(fontSpec);\r\n    if (!font) {\r\n      return;\r\n    }\r\n    const families = font.families;\r\n    for (let i = 0, ii = families.length; i < ii; ++i) {\r\n      const family = families[i];\r\n      const key = font.style + '\\n' + font.weight + '\\n' + family;\r\n      if (checkedFonts.get(key) === undefined) {\r\n        checkedFonts.set(key, retries, true);\r\n        if (!isAvailable(font.style, font.weight, family)) {\r\n          checkedFonts.set(key, 0, true);\r\n          if (interval === undefined) {\r\n            interval = setInterval(check, 32);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n})();\r\n\r\n/**\r\n * @param {string} font Font to use for measuring.\r\n * @return {import(\"../size.js\").Size} Measurement.\r\n */\r\nexport const measureTextHeight = (function () {\r\n  /**\r\n   * @type {HTMLDivElement}\r\n   */\r\n  let measureElement;\r\n  return function (fontSpec) {\r\n    let height = textHeights[fontSpec];\r\n    if (height == undefined) {\r\n      if (WORKER_OFFSCREEN_CANVAS) {\r\n        const font = getFontParameters(fontSpec);\r\n        const metrics = measureText(fontSpec, 'Å½g');\r\n        const lineHeight = isNaN(Number(font.lineHeight))\r\n          ? 1.2\r\n          : Number(font.lineHeight);\r\n        height =\r\n          lineHeight *\r\n          (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\r\n      } else {\r\n        if (!measureElement) {\r\n          measureElement = document.createElement('div');\r\n          measureElement.innerHTML = 'M';\r\n          measureElement.style.minHeight = '0';\r\n          measureElement.style.maxHeight = 'none';\r\n          measureElement.style.height = 'auto';\r\n          measureElement.style.padding = '0';\r\n          measureElement.style.border = 'none';\r\n          measureElement.style.position = 'absolute';\r\n          measureElement.style.display = 'block';\r\n          measureElement.style.left = '-99999px';\r\n        }\r\n        measureElement.style.font = fontSpec;\r\n        document.body.appendChild(measureElement);\r\n        height = measureElement.offsetHeight;\r\n        document.body.removeChild(measureElement);\r\n      }\r\n      textHeights[fontSpec] = height;\r\n    }\r\n    return height;\r\n  };\r\n})();\r\n\r\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {TextMetrics} Text metrics.\r\n */\r\nfunction measureText(font, text) {\r\n  if (!measureContext) {\r\n    measureContext = createCanvasContext2D(1, 1);\r\n  }\r\n  if (font != measureFont) {\r\n    measureContext.font = font;\r\n    measureFont = measureContext.font;\r\n  }\r\n  return measureContext.measureText(text);\r\n}\r\n\r\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {number} Width.\r\n */\r\nexport function measureTextWidth(font, text) {\r\n  return measureText(font, text).width;\r\n}\r\n\r\n/**\r\n * Measure text width using a cache.\r\n * @param {string} font The font.\r\n * @param {string} text The text to measure.\r\n * @param {Object<string, number>} cache A lookup of cached widths by text.\r\n * @return {number} The text width.\r\n */\r\nexport function measureAndCacheTextWidth(font, text, cache) {\r\n  if (text in cache) {\r\n    return cache[text];\r\n  }\r\n  const width = text\r\n    .split('\\n')\r\n    .reduce((prev, curr) => Math.max(prev, measureTextWidth(font, curr)), 0);\r\n  cache[text] = width;\r\n  return width;\r\n}\r\n\r\n/**\r\n * @param {TextState} baseStyle Base style.\r\n * @param {Array<string>} chunks Text chunks to measure.\r\n * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.\r\n */\r\nexport function getTextDimensions(baseStyle, chunks) {\r\n  const widths = [];\r\n  const heights = [];\r\n  const lineWidths = [];\r\n  let width = 0;\r\n  let lineWidth = 0;\r\n  let height = 0;\r\n  let lineHeight = 0;\r\n  for (let i = 0, ii = chunks.length; i <= ii; i += 2) {\r\n    const text = chunks[i];\r\n    if (text === '\\n' || i === ii) {\r\n      width = Math.max(width, lineWidth);\r\n      lineWidths.push(lineWidth);\r\n      lineWidth = 0;\r\n      height += lineHeight;\r\n      lineHeight = 0;\r\n      continue;\r\n    }\r\n    const font = chunks[i + 1] || baseStyle.font;\r\n    const currentWidth = measureTextWidth(font, text);\r\n    widths.push(currentWidth);\r\n    lineWidth += currentWidth;\r\n    const currentHeight = measureTextHeight(font);\r\n    heights.push(currentHeight);\r\n    lineHeight = Math.max(lineHeight, currentHeight);\r\n  }\r\n  return {width, height, widths, heights, lineWidths};\r\n}\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D} context Context.\r\n * @param {number} rotation Rotation.\r\n * @param {number} offsetX X offset.\r\n * @param {number} offsetY Y offset.\r\n */\r\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\r\n  if (rotation !== 0) {\r\n    context.translate(offsetX, offsetY);\r\n    context.rotate(rotation);\r\n    context.translate(-offsetX, -offsetY);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D|import(\"../render/canvas/ZIndexContext.js\").ZIndexContextProxy} context Context.\r\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\r\n * @param {number} opacity Opacity.\r\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\r\n * @param {number} originX Origin X.\r\n * @param {number} originY Origin Y.\r\n * @param {number} w Width.\r\n * @param {number} h Height.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {import(\"../size.js\").Size} scale Scale.\r\n */\r\nexport function drawImageOrLabel(\r\n  context,\r\n  transform,\r\n  opacity,\r\n  labelOrImage,\r\n  originX,\r\n  originY,\r\n  w,\r\n  h,\r\n  x,\r\n  y,\r\n  scale,\r\n) {\r\n  context.save();\r\n\r\n  if (opacity !== 1) {\r\n    if (context.globalAlpha === undefined) {\r\n      context.globalAlpha = (context) => (context.globalAlpha *= opacity);\r\n    } else {\r\n      context.globalAlpha *= opacity;\r\n    }\r\n  }\r\n  if (transform) {\r\n    context.transform.apply(context, transform);\r\n  }\r\n\r\n  if (/** @type {*} */ (labelOrImage).contextInstructions) {\r\n    // label\r\n    context.translate(x, y);\r\n    context.scale(scale[0], scale[1]);\r\n    executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\r\n  } else if (scale[0] < 0 || scale[1] < 0) {\r\n    // flipped image\r\n    context.translate(x, y);\r\n    context.scale(scale[0], scale[1]);\r\n    context.drawImage(\r\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\r\n        labelOrImage\r\n      ),\r\n      originX,\r\n      originY,\r\n      w,\r\n      h,\r\n      0,\r\n      0,\r\n      w,\r\n      h,\r\n    );\r\n  } else {\r\n    // if image not flipped translate and scale can be avoided\r\n    context.drawImage(\r\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\r\n        labelOrImage\r\n      ),\r\n      originX,\r\n      originY,\r\n      w,\r\n      h,\r\n      x,\r\n      y,\r\n      w * scale[0],\r\n      h * scale[1],\r\n    );\r\n  }\r\n\r\n  context.restore();\r\n}\r\n\r\n/**\r\n * @param {Label} label Label.\r\n * @param {CanvasRenderingContext2D} context Context.\r\n */\r\nfunction executeLabelInstructions(label, context) {\r\n  const contextInstructions = label.contextInstructions;\r\n  for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {\r\n    if (Array.isArray(contextInstructions[i + 1])) {\r\n      context[contextInstructions[i]].apply(\r\n        context,\r\n        contextInstructions[i + 1],\r\n      );\r\n    } else {\r\n      context[contextInstructions[i]] = contextInstructions[i + 1];\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,cAAc;AACrC,SAAQC,uBAAuB,QAAO,WAAW;AACjD,SAAQC,KAAK,QAAO,WAAW;AAC/B,SAAQC,qBAAqB,QAAO,WAAW;AAC/C,SAAQC,iBAAiB,QAAO,WAAW;;AAE3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,iBAAiB;;AAE5C;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;;AAEtC;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,OAAO;;AAErC;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,EAAE;;AAEjC;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAG,CAAC;;AAEtC;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,OAAO;;AAEtC;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,EAAE;;AAEnC;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;;AAExC;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,QAAQ;;AAExC;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAG,QAAQ;;AAE3C;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;AAE1C;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}