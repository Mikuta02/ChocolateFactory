{"ast":null,"code":"/**\r\n * @module ol/interaction/Pointer\r\n */\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\n\n/**\r\n * @typedef {Object} Options\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\r\n * Function handling \"down\" events. If the function returns `true` then a drag\r\n * sequence is started.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\r\n * Function handling \"drag\" events. This function is called on \"move\" events\r\n * during a drag sequence.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\r\n * Method called by the map to notify the interaction that a browser event was\r\n * dispatched to the map. The function may return `false` to prevent the\r\n * propagation of the event to other interactions in the map's interactions\r\n * chain.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\r\n * Function handling \"move\" events. This function is called on \"move\" events.\r\n * This functions is also called during a drag sequence, so during a drag\r\n * sequence both the `handleDragEvent` function and this function are called.\r\n * If `handleDownEvent` is defined and it returns true this function will not\r\n * be called during a drag sequence.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\r\n *  Function handling \"up\" events. If the function returns `false` then the\r\n * current drag sequence is stopped.\r\n * @property {function(boolean):boolean} [stopDown]\r\n * Should the down event be propagated to other interactions, or should be\r\n * stopped?\r\n */\n\n/**\r\n * @classdesc\r\n * Base class that calls user-defined functions on `down`, `move` and `up`\r\n * events. This class also manages \"drag sequences\".\r\n *\r\n * When the `handleDownEvent` user function returns `true` a drag sequence is\r\n * started. During a drag sequence the `handleDragEvent` user function is\r\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\r\n * user function is called and returns `false`.\r\n * @api\r\n */\nclass PointerInteraction extends Interaction {\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super( /** @type {import(\"./Interaction.js\").InteractionOptions} */options);\n    if (options.handleDownEvent) {\n      this.handleDownEvent = options.handleDownEvent;\n    }\n    if (options.handleDragEvent) {\n      this.handleDragEvent = options.handleDragEvent;\n    }\n    if (options.handleMoveEvent) {\n      this.handleMoveEvent = options.handleMoveEvent;\n    }\n    if (options.handleUpEvent) {\n      this.handleUpEvent = options.handleUpEvent;\n    }\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n\n    /**\r\n     * @type {boolean}\r\n     * @protected\r\n     */\n    this.handlingDownUpSequence = false;\n\n    /**\r\n     * @type {Array<PointerEvent>}\r\n     * @protected\r\n     */\n    this.targetPointers = [];\n  }\n\n  /**\r\n   * Returns the current number of pointers involved in the interaction,\r\n   * e.g. `2` when two fingers are used.\r\n   * @return {number} The number of pointers.\r\n   * @api\r\n   */\n  getPointerCount() {\n    return this.targetPointers.length;\n  }\n\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @protected\r\n   */\n  handleDownEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @protected\r\n   */\n  handleDragEvent(mapBrowserEvent) {}\n\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\r\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\r\n   * detected.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @api\r\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n    let stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n        // prevent page scrolling during dragging\n        mapBrowserEvent.originalEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        const handled = this.handleDownEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n    return !stopEvent;\n  }\n\n  /**\r\n   * Handle pointer move events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @protected\r\n   */\n  handleMoveEvent(mapBrowserEvent) {}\n\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @protected\r\n   */\n  handleUpEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\r\n   * This function is used to determine if \"down\" events should be propagated\r\n   * to other interactions or should be stopped.\r\n   * @param {boolean} handled Was the event handled by the interaction?\r\n   * @return {boolean} Should the `down` event be stopped?\r\n   */\n  stopDown(handled) {\n    return handled;\n  }\n\n  /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @private\r\n   */\n  updateTrackedPointers_(mapBrowserEvent) {\n    if (mapBrowserEvent.activePointers) {\n      this.targetPointers = mapBrowserEvent.activePointers;\n    }\n  }\n}\n\n/**\r\n * @param {Array<PointerEvent>} pointerEvents List of events.\r\n * @return {{clientX: number, clientY: number}} Centroid pixel.\r\n */\nexport function centroid(pointerEvents) {\n  const length = pointerEvents.length;\n  let clientX = 0;\n  let clientY = 0;\n  for (let i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return {\n    clientX: clientX / length,\n    clientY: clientY / length\n  };\n}\nexport default PointerInteraction;","map":{"version":3,"names":["Interaction","MapBrowserEventType","PointerInteraction","constructor","options","handleDownEvent","handleDragEvent","handleMoveEvent","handleUpEvent","stopDown","handlingDownUpSequence","targetPointers","getPointerCount","length","mapBrowserEvent","handleEvent","originalEvent","stopEvent","updateTrackedPointers_","type","POINTERDRAG","preventDefault","POINTERUP","handledUp","POINTERDOWN","handled","POINTERMOVE","activePointers","centroid","pointerEvents","clientX","clientY","i"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/interaction/Pointer.js"],"sourcesContent":["/**\r\n * @module ol/interaction/Pointer\r\n */\r\nimport Interaction from './Interaction.js';\r\nimport MapBrowserEventType from '../MapBrowserEventType.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\r\n * Function handling \"down\" events. If the function returns `true` then a drag\r\n * sequence is started.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\r\n * Function handling \"drag\" events. This function is called on \"move\" events\r\n * during a drag sequence.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\r\n * Method called by the map to notify the interaction that a browser event was\r\n * dispatched to the map. The function may return `false` to prevent the\r\n * propagation of the event to other interactions in the map's interactions\r\n * chain.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\r\n * Function handling \"move\" events. This function is called on \"move\" events.\r\n * This functions is also called during a drag sequence, so during a drag\r\n * sequence both the `handleDragEvent` function and this function are called.\r\n * If `handleDownEvent` is defined and it returns true this function will not\r\n * be called during a drag sequence.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\r\n *  Function handling \"up\" events. If the function returns `false` then the\r\n * current drag sequence is stopped.\r\n * @property {function(boolean):boolean} [stopDown]\r\n * Should the down event be propagated to other interactions, or should be\r\n * stopped?\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class that calls user-defined functions on `down`, `move` and `up`\r\n * events. This class also manages \"drag sequences\".\r\n *\r\n * When the `handleDownEvent` user function returns `true` a drag sequence is\r\n * started. During a drag sequence the `handleDragEvent` user function is\r\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\r\n * user function is called and returns `false`.\r\n * @api\r\n */\r\nclass PointerInteraction extends Interaction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super(\r\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options),\r\n    );\r\n\r\n    if (options.handleDownEvent) {\r\n      this.handleDownEvent = options.handleDownEvent;\r\n    }\r\n\r\n    if (options.handleDragEvent) {\r\n      this.handleDragEvent = options.handleDragEvent;\r\n    }\r\n\r\n    if (options.handleMoveEvent) {\r\n      this.handleMoveEvent = options.handleMoveEvent;\r\n    }\r\n\r\n    if (options.handleUpEvent) {\r\n      this.handleUpEvent = options.handleUpEvent;\r\n    }\r\n\r\n    if (options.stopDown) {\r\n      this.stopDown = options.stopDown;\r\n    }\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @protected\r\n     */\r\n    this.handlingDownUpSequence = false;\r\n\r\n    /**\r\n     * @type {Array<PointerEvent>}\r\n     * @protected\r\n     */\r\n    this.targetPointers = [];\r\n  }\r\n\r\n  /**\r\n   * Returns the current number of pointers involved in the interaction,\r\n   * e.g. `2` when two fingers are used.\r\n   * @return {number} The number of pointers.\r\n   * @api\r\n   */\r\n  getPointerCount() {\r\n    return this.targetPointers.length;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @protected\r\n   */\r\n  handleDownEvent(mapBrowserEvent) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @protected\r\n   */\r\n  handleDragEvent(mapBrowserEvent) {}\r\n\r\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\r\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\r\n   * detected.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @api\r\n   */\r\n  handleEvent(mapBrowserEvent) {\r\n    if (!mapBrowserEvent.originalEvent) {\r\n      return true;\r\n    }\r\n\r\n    let stopEvent = false;\r\n    this.updateTrackedPointers_(mapBrowserEvent);\r\n    if (this.handlingDownUpSequence) {\r\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\r\n        this.handleDragEvent(mapBrowserEvent);\r\n        // prevent page scrolling during dragging\r\n        mapBrowserEvent.originalEvent.preventDefault();\r\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\r\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\r\n        this.handlingDownUpSequence =\r\n          handledUp && this.targetPointers.length > 0;\r\n      }\r\n    } else {\r\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\r\n        const handled = this.handleDownEvent(mapBrowserEvent);\r\n        this.handlingDownUpSequence = handled;\r\n        stopEvent = this.stopDown(handled);\r\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\r\n        this.handleMoveEvent(mapBrowserEvent);\r\n      }\r\n    }\r\n    return !stopEvent;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer move events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @protected\r\n   */\r\n  handleMoveEvent(mapBrowserEvent) {}\r\n\r\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @protected\r\n   */\r\n  handleUpEvent(mapBrowserEvent) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * This function is used to determine if \"down\" events should be propagated\r\n   * to other interactions or should be stopped.\r\n   * @param {boolean} handled Was the event handled by the interaction?\r\n   * @return {boolean} Should the `down` event be stopped?\r\n   */\r\n  stopDown(handled) {\r\n    return handled;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @private\r\n   */\r\n  updateTrackedPointers_(mapBrowserEvent) {\r\n    if (mapBrowserEvent.activePointers) {\r\n      this.targetPointers = mapBrowserEvent.activePointers;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<PointerEvent>} pointerEvents List of events.\r\n * @return {{clientX: number, clientY: number}} Centroid pixel.\r\n */\r\nexport function centroid(pointerEvents) {\r\n  const length = pointerEvents.length;\r\n  let clientX = 0;\r\n  let clientY = 0;\r\n  for (let i = 0; i < length; i++) {\r\n    clientX += pointerEvents[i].clientX;\r\n    clientY += pointerEvents[i].clientY;\r\n  }\r\n  return {clientX: clientX / length, clientY: clientY / length};\r\n}\r\n\r\nexport default PointerInteraction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}