{"ast":null,"code":"/**\r\n * @module ol/color\r\n */\nimport lchuv from 'color-space/lchuv.js';\nimport parseRgba from 'color-rgba';\nimport rgb from 'color-space/rgb.js';\nimport xyz from 'color-space/xyz.js';\nimport { clamp } from './math.js';\n\n/**\r\n * A color represented as a short array [red, green, blue, alpha].\r\n * red, green, and blue should be integers in the range 0..255 inclusive.\r\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\r\n * given then `1` will be used.\r\n * @typedef {Array<number>} Color\r\n * @api\r\n */\n\n/**\r\n * Return the color as an rgba string.\r\n * @param {Color|string} color Color.\r\n * @return {string} Rgba string.\r\n * @api\r\n */\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  }\n  return toString(color);\n}\n\n/**\r\n * @type {number}\r\n */\nconst MAX_CACHE_SIZE = 1024;\n\n/**\r\n * We maintain a small cache of parsed strings.  Whenever the cache grows too large,\r\n * we delete an arbitrary set of the entries.\r\n *\r\n * @type {Object<string, Color>}\r\n */\nconst cache = {};\n\n/**\r\n * @type {number}\r\n */\nlet cacheSize = 0;\n\n/**\r\n * @param {Color} color A color that may or may not have an alpha channel.\r\n * @return {Color} The input color with an alpha channel.  If the input color has\r\n * an alpha channel, the input color will be returned unchanged.  Otherwise, a new\r\n * array will be returned with the input color and an alpha channel of 1.\r\n */\nexport function withAlpha(color) {\n  if (color.length === 4) {\n    return color;\n  }\n  const output = color.slice();\n  output[3] = 1;\n  return output;\n}\n\n/**\r\n * @param {Color} color RGBA color.\r\n * @return {Color} LCHuv color with alpha.\r\n */\nexport function rgbaToLcha(color) {\n  const output = xyz.lchuv(rgb.xyz(color));\n  output[3] = color[3];\n  return output;\n}\n\n/**\r\n * @param {Color} color LCHuv color with alpha.\r\n * @return {Color} RGBA color.\r\n */\nexport function lchaToRgba(color) {\n  const output = xyz.rgb(lchuv.xyz(color));\n  output[3] = color[3];\n  return output;\n}\n\n/**\r\n * @param {string} s String.\r\n * @return {Color} Color.\r\n */\nexport function fromString(s) {\n  if (cache.hasOwnProperty(s)) {\n    return cache[s];\n  }\n  if (cacheSize >= MAX_CACHE_SIZE) {\n    let i = 0;\n    for (const key in cache) {\n      if ((i++ & 3) === 0) {\n        delete cache[key];\n        --cacheSize;\n      }\n    }\n  }\n  const color = parseRgba(s);\n  if (color.length !== 4) {\n    throw new Error('Failed to parse \"' + s + '\" as color');\n  }\n  for (const c of color) {\n    if (isNaN(c)) {\n      throw new Error('Failed to parse \"' + s + '\" as color');\n    }\n  }\n  normalize(color);\n  cache[s] = color;\n  ++cacheSize;\n  return color;\n}\n\n/**\r\n * Return the color as an array. This function maintains a cache of calculated\r\n * arrays which means the result should not be modified.\r\n * @param {Color|string} color Color.\r\n * @return {Color} Color.\r\n * @api\r\n */\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  }\n  return fromString(color);\n}\n\n/**\r\n * Exported for the tests.\r\n * @param {Color} color Color.\r\n * @return {Color} Clamped color.\r\n */\nexport function normalize(color) {\n  color[0] = clamp(color[0] + 0.5 | 0, 0, 255);\n  color[1] = clamp(color[1] + 0.5 | 0, 0, 255);\n  color[2] = clamp(color[2] + 0.5 | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n\n/**\r\n * @param {Color} color Color.\r\n * @return {string} String.\r\n */\nexport function toString(color) {\n  let r = color[0];\n  if (r != (r | 0)) {\n    r = r + 0.5 | 0;\n  }\n  let g = color[1];\n  if (g != (g | 0)) {\n    g = g + 0.5 | 0;\n  }\n  let b = color[2];\n  if (b != (b | 0)) {\n    b = b + 0.5 | 0;\n  }\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 1000) / 1000;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n\n/**\r\n * @param {string} s String.\r\n * @return {boolean} Whether the string is actually a valid color\r\n */\nexport function isStringColor(s) {\n  try {\n    fromString(s);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}","map":{"version":3,"names":["lchuv","parseRgba","rgb","xyz","clamp","asString","color","toString","MAX_CACHE_SIZE","cache","cacheSize","withAlpha","length","output","slice","rgbaToLcha","lchaToRgba","fromString","s","hasOwnProperty","i","key","Error","c","isNaN","normalize","asArray","Array","isArray","r","g","b","a","undefined","Math","round","isStringColor","_"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/color.js"],"sourcesContent":["/**\r\n * @module ol/color\r\n */\r\nimport lchuv from 'color-space/lchuv.js';\r\nimport parseRgba from 'color-rgba';\r\nimport rgb from 'color-space/rgb.js';\r\nimport xyz from 'color-space/xyz.js';\r\nimport {clamp} from './math.js';\r\n\r\n/**\r\n * A color represented as a short array [red, green, blue, alpha].\r\n * red, green, and blue should be integers in the range 0..255 inclusive.\r\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\r\n * given then `1` will be used.\r\n * @typedef {Array<number>} Color\r\n * @api\r\n */\r\n\r\n/**\r\n * Return the color as an rgba string.\r\n * @param {Color|string} color Color.\r\n * @return {string} Rgba string.\r\n * @api\r\n */\r\nexport function asString(color) {\r\n  if (typeof color === 'string') {\r\n    return color;\r\n  }\r\n  return toString(color);\r\n}\r\n\r\n/**\r\n * @type {number}\r\n */\r\nconst MAX_CACHE_SIZE = 1024;\r\n\r\n/**\r\n * We maintain a small cache of parsed strings.  Whenever the cache grows too large,\r\n * we delete an arbitrary set of the entries.\r\n *\r\n * @type {Object<string, Color>}\r\n */\r\nconst cache = {};\r\n\r\n/**\r\n * @type {number}\r\n */\r\nlet cacheSize = 0;\r\n\r\n/**\r\n * @param {Color} color A color that may or may not have an alpha channel.\r\n * @return {Color} The input color with an alpha channel.  If the input color has\r\n * an alpha channel, the input color will be returned unchanged.  Otherwise, a new\r\n * array will be returned with the input color and an alpha channel of 1.\r\n */\r\nexport function withAlpha(color) {\r\n  if (color.length === 4) {\r\n    return color;\r\n  }\r\n  const output = color.slice();\r\n  output[3] = 1;\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {Color} color RGBA color.\r\n * @return {Color} LCHuv color with alpha.\r\n */\r\nexport function rgbaToLcha(color) {\r\n  const output = xyz.lchuv(rgb.xyz(color));\r\n  output[3] = color[3];\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {Color} color LCHuv color with alpha.\r\n * @return {Color} RGBA color.\r\n */\r\nexport function lchaToRgba(color) {\r\n  const output = xyz.rgb(lchuv.xyz(color));\r\n  output[3] = color[3];\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {string} s String.\r\n * @return {Color} Color.\r\n */\r\nexport function fromString(s) {\r\n  if (cache.hasOwnProperty(s)) {\r\n    return cache[s];\r\n  }\r\n  if (cacheSize >= MAX_CACHE_SIZE) {\r\n    let i = 0;\r\n    for (const key in cache) {\r\n      if ((i++ & 3) === 0) {\r\n        delete cache[key];\r\n        --cacheSize;\r\n      }\r\n    }\r\n  }\r\n\r\n  const color = parseRgba(s);\r\n  if (color.length !== 4) {\r\n    throw new Error('Failed to parse \"' + s + '\" as color');\r\n  }\r\n  for (const c of color) {\r\n    if (isNaN(c)) {\r\n      throw new Error('Failed to parse \"' + s + '\" as color');\r\n    }\r\n  }\r\n  normalize(color);\r\n  cache[s] = color;\r\n  ++cacheSize;\r\n  return color;\r\n}\r\n\r\n/**\r\n * Return the color as an array. This function maintains a cache of calculated\r\n * arrays which means the result should not be modified.\r\n * @param {Color|string} color Color.\r\n * @return {Color} Color.\r\n * @api\r\n */\r\nexport function asArray(color) {\r\n  if (Array.isArray(color)) {\r\n    return color;\r\n  }\r\n  return fromString(color);\r\n}\r\n\r\n/**\r\n * Exported for the tests.\r\n * @param {Color} color Color.\r\n * @return {Color} Clamped color.\r\n */\r\nexport function normalize(color) {\r\n  color[0] = clamp((color[0] + 0.5) | 0, 0, 255);\r\n  color[1] = clamp((color[1] + 0.5) | 0, 0, 255);\r\n  color[2] = clamp((color[2] + 0.5) | 0, 0, 255);\r\n  color[3] = clamp(color[3], 0, 1);\r\n  return color;\r\n}\r\n\r\n/**\r\n * @param {Color} color Color.\r\n * @return {string} String.\r\n */\r\nexport function toString(color) {\r\n  let r = color[0];\r\n  if (r != (r | 0)) {\r\n    r = (r + 0.5) | 0;\r\n  }\r\n  let g = color[1];\r\n  if (g != (g | 0)) {\r\n    g = (g + 0.5) | 0;\r\n  }\r\n  let b = color[2];\r\n  if (b != (b | 0)) {\r\n    b = (b + 0.5) | 0;\r\n  }\r\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 1000) / 1000;\r\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n}\r\n\r\n/**\r\n * @param {string} s String.\r\n * @return {boolean} Whether the string is actually a valid color\r\n */\r\nexport function isStringColor(s) {\r\n  try {\r\n    fromString(s);\r\n    return true;\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}