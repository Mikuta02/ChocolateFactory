{"ast":null,"code":"/**\r\n * @module ol/source/Tile\r\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { equivalent } from '../proj.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection, wrapX } from '../tilegrid.js';\nimport { scale as scaleSize, toSize } from '../size.js';\n\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] CacheSize.\r\n * @property {boolean} [opaque=false] Whether the layer is opaque.\r\n * @property {number} [tilePixelRatio] TilePixelRatio.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {import(\"./Source.js\").State} [state] State.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\r\n * @property {boolean} [wrapX=false] WrapX.\r\n * @property {number} [transition] Transition.\r\n * @property {string} [key] Key.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\n\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for sources providing images divided into a tile grid.\r\n * @abstract\r\n * @api\r\n */\nclass TileSource extends Source {\n  /**\r\n   * @param {Options} options SourceTile source options.\r\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate\n    });\n\n    /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\n    this.on;\n\n    /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\n    this.once;\n\n    /***\r\n     * @type {TileSourceOnSignature<void>}\r\n     */\n    this.un;\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\r\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n    const tileSize = [256, 256];\n    if (this.tileGrid) {\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\r\n     * @protected\r\n     * @type {import(\"../TileCache.js\").default}\r\n     */\n    this.tileCache = new TileCache(options.cacheSize || 0);\n\n    /**\r\n     * @protected\r\n     * @type {import(\"../size.js\").Size}\r\n     */\n    this.tmpSize = [0, 0];\n\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\n    this.key_ = options.key || '';\n\n    /**\r\n     * @protected\r\n     * @type {import(\"../Tile.js\").Options}\r\n     */\n    this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate\n    };\n\n    /**\r\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\r\n     * by a renderer if the views resolution does not match any resolution of the tile source.\r\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n     * will be used. If -1, the nearest higher resolution will be used.\r\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\r\n     */\n    this.zDirection = options.zDirection ? options.zDirection : 0;\n  }\n\n  /**\r\n   * @return {boolean} Can expire cache.\r\n   */\n  canExpireCache() {\n    return this.tileCache.canExpireCache();\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\r\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {number} z Zoom level.\r\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\r\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\r\n   *     loaded tile.  If the callback returns `false`, the tile will not be\r\n   *     considered loaded.\r\n   * @return {boolean} The tile range is fully covered with loaded tiles.\r\n   */\n  forEachLoadedTile(projection, z, tileRange, callback) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n    let covered = true;\n    let tile, tileCoordKey, loaded;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!import(\"../Tile.js\").default} */\n          tileCache.get(tileCoordKey);\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\r\n   * Set the value to be used as the key for all tiles in the source.\r\n   * @param {string} key The key for tiles.\r\n   * @protected\r\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {boolean} Opaque.\r\n   */\n  getOpaque(projection) {\n    return this.opaque_;\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   */\n  getResolutions(projection) {\n    const tileGrid = projection ? this.getTileGridForProjection(projection) : this.tileGrid;\n    if (!tileGrid) {\n      return null;\n    }\n    return tileGrid.getResolutions();\n  }\n\n  /**\r\n   * @abstract\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../Tile.js\").default} Tile.\r\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\r\n   * Return the tile grid of the tile source.\r\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\r\n   * @api\r\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    }\n    return this.tileGrid;\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../TileCache.js\").default} Tile cache.\r\n   * @protected\r\n   */\n  getTileCacheForProjection(projection) {\n    const sourceProjection = this.getProjection();\n    assert(sourceProjection === null || equivalent(sourceProjection, projection), 'A VectorTile source can only be rendered if it has a projection compatible with the view projection.');\n    return this.tileCache;\n  }\n\n  /**\r\n   * Get the tile pixel ratio for this source. Subclasses may override this\r\n   * method, which is meant to return a supported pixel ratio that matches the\r\n   * provided `pixelRatio` as close as possible.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Tile pixel ratio.\r\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\r\n   * @param {number} z Z.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../size.js\").Size} Tile size.\r\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    }\n    return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n  }\n\n  /**\r\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\r\n   * is outside the resolution and extent range of the tile grid, `null` will be\r\n   * returned.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\r\n   *     null if no tile URL should be created for the passed `tileCoord`.\r\n   */\n  getTileCoordForTileUrlFunction(tileCoord, projection) {\n    projection = projection !== undefined ? projection : this.getProjection();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\r\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\r\n   * @api\r\n   */\n  clear() {\n    this.tileCache.clear();\n  }\n  refresh() {\n    this.clear();\n    super.refresh();\n  }\n\n  /**\r\n   * Increases the cache size if needed\r\n   * @param {number} tileCount Minimum number of tiles needed.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\n  updateCacheSize(tileCount, projection) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCount > tileCache.highWaterMark) {\n      tileCache.highWaterMark = tileCount;\n    }\n  }\n\n  /**\r\n   * Marks a tile coord as being used, without triggering a load.\r\n   * @abstract\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\n  useTile(z, x, y, projection) {}\n}\n\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\r\n * type.\r\n */\nexport class TileSourceEvent extends Event {\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Tile.js\").default} tile The tile.\r\n   */\n  constructor(type, tile) {\n    super(type);\n\n    /**\r\n     * The tile related to the event.\r\n     * @type {import(\"../Tile.js\").default}\r\n     * @api\r\n     */\n    this.tile = tile;\n  }\n}\nexport default TileSource;","map":{"version":3,"names":["Event","Source","TileCache","TileState","abstract","assert","equivalent","getKeyZXY","withinExtentAndZ","getForProjection","getTileGridForProjection","wrapX","scale","scaleSize","toSize","TileSource","constructor","options","attributions","attributionsCollapsible","projection","state","interpolate","on","once","un","opaque_","opaque","undefined","tilePixelRatio_","tilePixelRatio","tileGrid","tileSize","getTileSize","getMinZoom","tileCache","cacheSize","tmpSize","key_","key","tileOptions","transition","zDirection","canExpireCache","expireCache","usedTiles","getTileCacheForProjection","forEachLoadedTile","z","tileRange","callback","covered","tile","tileCoordKey","loaded","x","minX","maxX","y","minY","maxY","containsKey","get","getState","LOADED","getGutterForProjection","getKey","setKey","changed","getOpaque","getResolutions","getTile","pixelRatio","getTileGrid","sourceProjection","getProjection","getTilePixelRatio","getTilePixelSize","getTileCoordForTileUrlFunction","tileCoord","getWrapX","isGlobal","clear","refresh","updateCacheSize","tileCount","highWaterMark","useTile","TileSourceEvent","type"],"sources":["C:/Programiranje/veb/projekat/chocolate-factoryapp/Frontend/front-app/node_modules/ol/source/Tile.js"],"sourcesContent":["/**\r\n * @module ol/source/Tile\r\n */\r\nimport Event from '../events/Event.js';\r\nimport Source from './Source.js';\r\nimport TileCache from '../TileCache.js';\r\nimport TileState from '../TileState.js';\r\nimport {abstract} from '../util.js';\r\nimport {assert} from '../asserts.js';\r\nimport {equivalent} from '../proj.js';\r\nimport {getKeyZXY, withinExtentAndZ} from '../tilecoord.js';\r\nimport {\r\n  getForProjection as getTileGridForProjection,\r\n  wrapX,\r\n} from '../tilegrid.js';\r\nimport {scale as scaleSize, toSize} from '../size.js';\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] CacheSize.\r\n * @property {boolean} [opaque=false] Whether the layer is opaque.\r\n * @property {number} [tilePixelRatio] TilePixelRatio.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {import(\"./Source.js\").State} [state] State.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\r\n * @property {boolean} [wrapX=false] WrapX.\r\n * @property {number} [transition] Transition.\r\n * @property {string} [key] Key.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for sources providing images divided into a tile grid.\r\n * @abstract\r\n * @api\r\n */\r\nclass TileSource extends Source {\r\n  /**\r\n   * @param {Options} options SourceTile source options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      projection: options.projection,\r\n      state: options.state,\r\n      wrapX: options.wrapX,\r\n      interpolate: options.interpolate,\r\n    });\r\n\r\n    /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {TileSourceOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.tilePixelRatio_ =\r\n      options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\r\n\r\n    /**\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\r\n     */\r\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\r\n\r\n    const tileSize = [256, 256];\r\n    if (this.tileGrid) {\r\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../TileCache.js\").default}\r\n     */\r\n    this.tileCache = new TileCache(options.cacheSize || 0);\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.tmpSize = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.key_ = options.key || '';\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../Tile.js\").Options}\r\n     */\r\n    this.tileOptions = {\r\n      transition: options.transition,\r\n      interpolate: options.interpolate,\r\n    };\r\n\r\n    /**\r\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\r\n     * by a renderer if the views resolution does not match any resolution of the tile source.\r\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n     * will be used. If -1, the nearest higher resolution will be used.\r\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\r\n     */\r\n    this.zDirection = options.zDirection ? options.zDirection : 0;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Can expire cache.\r\n   */\r\n  canExpireCache() {\r\n    return this.tileCache.canExpireCache();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\r\n   */\r\n  expireCache(projection, usedTiles) {\r\n    const tileCache = this.getTileCacheForProjection(projection);\r\n    if (tileCache) {\r\n      tileCache.expireCache(usedTiles);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {number} z Zoom level.\r\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\r\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\r\n   *     loaded tile.  If the callback returns `false`, the tile will not be\r\n   *     considered loaded.\r\n   * @return {boolean} The tile range is fully covered with loaded tiles.\r\n   */\r\n  forEachLoadedTile(projection, z, tileRange, callback) {\r\n    const tileCache = this.getTileCacheForProjection(projection);\r\n    if (!tileCache) {\r\n      return false;\r\n    }\r\n\r\n    let covered = true;\r\n    let tile, tileCoordKey, loaded;\r\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\r\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\r\n        tileCoordKey = getKeyZXY(z, x, y);\r\n        loaded = false;\r\n        if (tileCache.containsKey(tileCoordKey)) {\r\n          tile = /** @type {!import(\"../Tile.js\").default} */ (\r\n            tileCache.get(tileCoordKey)\r\n          );\r\n          loaded = tile.getState() === TileState.LOADED;\r\n          if (loaded) {\r\n            loaded = callback(tile) !== false;\r\n          }\r\n        }\r\n        if (!loaded) {\r\n          covered = false;\r\n        }\r\n      }\r\n    }\r\n    return covered;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   */\r\n  getGutterForProjection(projection) {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   */\r\n  getKey() {\r\n    return this.key_;\r\n  }\r\n\r\n  /**\r\n   * Set the value to be used as the key for all tiles in the source.\r\n   * @param {string} key The key for tiles.\r\n   * @protected\r\n   */\r\n  setKey(key) {\r\n    if (this.key_ !== key) {\r\n      this.key_ = key;\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {boolean} Opaque.\r\n   */\r\n  getOpaque(projection) {\r\n    return this.opaque_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   */\r\n  getResolutions(projection) {\r\n    const tileGrid = projection\r\n      ? this.getTileGridForProjection(projection)\r\n      : this.tileGrid;\r\n    if (!tileGrid) {\r\n      return null;\r\n    }\r\n    return tileGrid.getResolutions();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../Tile.js\").default} Tile.\r\n   */\r\n  getTile(z, x, y, pixelRatio, projection) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Return the tile grid of the tile source.\r\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\r\n   * @api\r\n   */\r\n  getTileGrid() {\r\n    return this.tileGrid;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   */\r\n  getTileGridForProjection(projection) {\r\n    if (!this.tileGrid) {\r\n      return getTileGridForProjection(projection);\r\n    }\r\n    return this.tileGrid;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../TileCache.js\").default} Tile cache.\r\n   * @protected\r\n   */\r\n  getTileCacheForProjection(projection) {\r\n    const sourceProjection = this.getProjection();\r\n    assert(\r\n      sourceProjection === null || equivalent(sourceProjection, projection),\r\n      'A VectorTile source can only be rendered if it has a projection compatible with the view projection.',\r\n    );\r\n    return this.tileCache;\r\n  }\r\n\r\n  /**\r\n   * Get the tile pixel ratio for this source. Subclasses may override this\r\n   * method, which is meant to return a supported pixel ratio that matches the\r\n   * provided `pixelRatio` as close as possible.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Tile pixel ratio.\r\n   */\r\n  getTilePixelRatio(pixelRatio) {\r\n    return this.tilePixelRatio_;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Z.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../size.js\").Size} Tile size.\r\n   */\r\n  getTilePixelSize(z, pixelRatio, projection) {\r\n    const tileGrid = this.getTileGridForProjection(projection);\r\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\r\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\r\n    if (tilePixelRatio == 1) {\r\n      return tileSize;\r\n    }\r\n    return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\r\n  }\r\n\r\n  /**\r\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\r\n   * is outside the resolution and extent range of the tile grid, `null` will be\r\n   * returned.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\r\n   *     null if no tile URL should be created for the passed `tileCoord`.\r\n   */\r\n  getTileCoordForTileUrlFunction(tileCoord, projection) {\r\n    projection = projection !== undefined ? projection : this.getProjection();\r\n    const tileGrid = this.getTileGridForProjection(projection);\r\n    if (this.getWrapX() && projection.isGlobal()) {\r\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\r\n    }\r\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\r\n  }\r\n\r\n  /**\r\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\r\n   * @api\r\n   */\r\n  clear() {\r\n    this.tileCache.clear();\r\n  }\r\n\r\n  refresh() {\r\n    this.clear();\r\n    super.refresh();\r\n  }\r\n\r\n  /**\r\n   * Increases the cache size if needed\r\n   * @param {number} tileCount Minimum number of tiles needed.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\r\n  updateCacheSize(tileCount, projection) {\r\n    const tileCache = this.getTileCacheForProjection(projection);\r\n    if (tileCount > tileCache.highWaterMark) {\r\n      tileCache.highWaterMark = tileCount;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marks a tile coord as being used, without triggering a load.\r\n   * @abstract\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\r\n  useTile(z, x, y, projection) {}\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\r\n * type.\r\n */\r\nexport class TileSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Tile.js\").default} tile The tile.\r\n   */\r\n  constructor(type, tile) {\r\n    super(type);\r\n\r\n    /**\r\n     * The tile related to the event.\r\n     * @type {import(\"../Tile.js\").default}\r\n     * @api\r\n     */\r\n    this.tile = tile;\r\n  }\r\n}\r\n\r\nexport default TileSource;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}